{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"IPancakePair.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Interface for AutoFarm.\r\n */\r\ninterface IPancakePair {\r\n\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n}"},"IPancakeRouter01.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IPancakeRouter01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}"},"IPancakeRouter02.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"./IPancakeRouter01.sol\";\n\ninterface IPancakeRouter02 is IPancakeRouter01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}"},"IPancakeswapFarm.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IPancakeswapFarm {\n    function poolLength() external view returns (uint256);\n\n    function userInfo() external view returns (uint256);\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to)\n        external\n        view\n        returns (uint256);\n\n    // View function to see pending CAKEs on frontend.\n    function pendingCake(uint256 _pid, address _user)\n        external\n        view\n        returns (uint256);\n\n    // Deposit LP tokens to MasterChef for CAKE allocation.\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    // Withdraw LP tokens from MasterChef.\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    // Stake CAKE tokens to MasterChef\n    function enterStaking(uint256 _amount) external;\n\n    // Withdraw CAKE tokens from STAKING.\n    function leaveStaking(uint256 _amount) external;\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) external;\n}"},"IStratA.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n// For interacting with our own strategy A\ninterface IStratA {\n    // Total want tokens managed by strategy\n    function depositReward(uint256 _depositAmt) external returns (bool);\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\ncontract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler\u0027s defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}"},"SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"StratXUpload.sol":{"content":"/*\n             .#############. \n          .###################. \n       .####%####################.,::;;;;;;;;;;, \n      .####%###############%######:::;;;;;;;;;;;;;, \n      ####%%################%######:::;;;;;;;;@;;;;;;, \n      ####%%################%%#####:::;;;;;;;;;@;;;;;;, \n      ####%%################%%#####:::;;;;;;;;;@@;;;;;; \n      `####%################%#####:::;;;;;;;;;;@@;;;;;; \n        `###%##############%####:::;;;;;;;;;;;;@@;;;;;; \n           `#################\u0027::%%%%%%%%%%%%;;;@;;;;;;\u0027 \n             `#############\u0027.%%%%%%%%%%%%%%%%%%;;;;;\u0027 \n               `#########\u0027%%%%#%%%%%%%%%%%%%%%%%%%, \n                 `#####\u0027.%%%%#%%%%%%%%%%%%%%#%%%%%%, \n                   `##\u0027 %%%%##%%%%%%%%%%%%%%%##%%%%% \n                   ###  %%%%##%%%%%%%%%%%%%%%##%%%%% \n                    \u0027   %%%%##%%%%%%%%%%%%%%%##%%%%% \n                   \u0027    `%%%%#%%%%%%%%%%%%%%%#%%%%%\u0027 \n                  \u0027       `%%%#%%%%%%%%%%%%%#%%%%\u0027 \n                  `         `%%%%%%%%%%%%%%%%%%\u0027 \n                   `          `%%%%%%%%%%%%%%\u0027 \n                    `           `%%%%%%%%%%\u0027  \u0027 \n                     \u0027            `%%%%%%\u0027   \u0027 \n                    \u0027              `%%%\u0027    \u0027 \n                   \u0027               .%%      ` \n                  `                %%%       \u0027 \n                   `                \u0027       \u0027 \n                    `              \u0027      \u0027 \n                    \u0027            \u0027      \u0027 \n                   \u0027           \u0027       ` \n                  \u0027           \u0027        \u0027 \n                              `       \u0027 \n                               \u0027 \n                              \u0027 \n                             \u0027 \nhttps://deflate.finance/\nhttps://twitter.com/DeflateFinance\nhttps://t.me/deflateann\nhttps://t.me/deflatechat\n\nFork from AutoFarm with isAutoComp removed\nAutocompounding for PancakeSwap and clones\nEarned, want, and the individual lp tokens are stored here.\n*/\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"./Ownable.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./Pausable.sol\";\nimport \"./ReentrancyGuard.sol\";\nimport \"./IPancakePair.sol\";\nimport \"./IPancakeswapFarm.sol\";\nimport \"./IPancakeRouter02.sol\";\nimport \"./IStratA.sol\";\n\ncontract StratX is Ownable, ReentrancyGuard, Pausable {\n    // Maximises yields in pancakeswap\n\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    bool public isCAKEStaking; // only for staking CAKE using pancakeswap\u0027s native CAKE staking contract.\n\n    address public farmContractAddress; // address of farm, eg, PCS, Thugs etc.\n    uint256 public pid; // pid of pool in farmContractAddress\n    address public wantAddress;\n    address public token0Address;\n    address public token1Address;\n    address public earnedAddress;\n    \n    address public constant pcsRouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // uniswap, pancakeswap etc\n    address public constant wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n    address public rewardToken;\n    address public rewardAddress; // StratA\n    address public constant devAddress = 0x7ead6eb3aB594817995F9995D091c06913c9A21C;\n    address public autoFarmAddress;\n    address public balloonAddress;\n    address public govAddress; // timelock contract\n\n    uint256 public lastEarnBlock = block.number;\n    uint256 public wantLockedTotal = 0;\n    uint256 public sharesTotal = 0;\n\n    address public constant buyBackAddress = 0x000000000000000000000000000000000000dEaD;\n    uint256 public controllerFee = 100;\n    uint256 public rewardRate = 150;\n    uint256 public buyBackRate = 200;\n    uint256 public constant feeMaxTotal = 450; // 4.5%. Anything above this is a negative APY\n    uint256 public constant feeMax = 10000; // 100 = 1%\n\n    uint256 public entranceFeeFactor = 9990; // \u003c 0.1% entrance fee - goes to pool + prevents front-running\n    uint256 public constant entranceFeeFactorMax = 10000;\n    uint256 public constant entranceFeeFactorLL = 9950; // 0.5% is the max entrance fee settable. LL = lowerlimit\n\n    uint256 public slippageFactor = 950; // 5% default slippage tolerance\n    uint256 public constant slippageFactorUL = 995;\n\n    address[] public earnedToWbnbPath;\n    address[] public earnedToRewardPath;\n    address[] public earnedToBLNPath;\n    address[] public earnedToToken0Path;\n    address[] public earnedToToken1Path;\n    address[] public token0ToEarnedPath;\n    address[] public token1ToEarnedPath;\n\n    constructor(\n        address _autoFarmAddress,\n        address _rewardAddress,\n        address _rewardToken,\n        address _balloonAddress,\n        bool _isCAKEStaking,\n        address _farmContractAddress,\n        uint256 _farmPid,\n        address _wantAddress,\n        address _earnedAddress\n    ) public {\n        govAddress = msg.sender;\n        autoFarmAddress = _autoFarmAddress;\n        rewardAddress = _rewardAddress;\n        rewardToken = _rewardToken;\n        balloonAddress = _balloonAddress;\n\n        isCAKEStaking = _isCAKEStaking;\n        wantAddress = _wantAddress;\n\n        if (!isCAKEStaking) {\n            token0Address = IPancakePair(wantAddress).token0();\n            token1Address = IPancakePair(wantAddress).token1();\n        }\n\n        farmContractAddress = _farmContractAddress;\n        pid = _farmPid;\n        earnedAddress = _earnedAddress;\n\n        earnedToWbnbPath = [earnedAddress, wbnbAddress];\n        earnedToRewardPath = [earnedAddress, wbnbAddress, rewardToken];\n\n        earnedToBLNPath = [earnedAddress, wbnbAddress, balloonAddress];\n        if (wbnbAddress == earnedAddress) {\n            earnedToBLNPath = [wbnbAddress, balloonAddress];\n        }\n\n        earnedToToken0Path = [earnedAddress, wbnbAddress, token0Address];\n        if (wbnbAddress == token0Address) {\n            earnedToToken0Path = [earnedAddress, wbnbAddress];\n        }\n\n        earnedToToken1Path = [earnedAddress, wbnbAddress, token1Address];\n        if (wbnbAddress == token1Address) {\n            earnedToToken1Path = [earnedAddress, wbnbAddress];\n        }\n\n        token0ToEarnedPath = [token0Address, wbnbAddress, earnedAddress];\n        if (wbnbAddress == token0Address) {\n            token0ToEarnedPath = [wbnbAddress, earnedAddress];\n        }\n\n        token1ToEarnedPath = [token1Address, wbnbAddress, earnedAddress];\n        if (wbnbAddress == token1Address) {\n            token1ToEarnedPath = [wbnbAddress, earnedAddress];\n        }\n\n        transferOwnership(autoFarmAddress);\n        \n        _resetAllowances();\n    }\n    \n    event SetSettings(\n        uint256 _controllerFee,\n        uint256 _rewardRate,\n        uint256 _buyBackRate,\n        uint256 _entranceFeeFactor,\n        uint256 _slippageFactor\n    );\n    \n    modifier govOnly() {\n        require(msg.sender == govAddress, \"!gov\");\n        _;\n    }\n\n    /**\n     * @dev Receives new deposits from user, can only be called by MasterChef\n     * _userAddress not used, possibly used by other strats\n     */\n    function deposit(address _userAddress, uint256 _wantAmt) external onlyOwner nonReentrant whenNotPaused returns (uint256) {\n        IERC20(wantAddress).safeTransferFrom(\n            address(msg.sender),\n            address(this),\n            _wantAmt\n        );\n\n        uint256 sharesAdded = _wantAmt;\n        if (wantLockedTotal \u003e 0) {\n            sharesAdded = _wantAmt\n                .mul(sharesTotal)\n                .mul(entranceFeeFactor)\n                .div(wantLockedTotal)\n                .div(entranceFeeFactorMax);\n        }\n        sharesTotal = sharesTotal.add(sharesAdded);\n\n        _farm();\n\n        return sharesAdded;\n    }\n\n    // If want tokens ever get stuck\n    function farm() public nonReentrant {\n        _farm();\n    }\n\n    // Deposit into the yield farm we\u0027re autocompounding\n    function _farm() internal {\n        require(sharesTotal \u003e 0, \"No stakers\");\n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\n        wantLockedTotal = wantLockedTotal.add(wantAmt);\n\n        if (isCAKEStaking) {\n            IPancakeswapFarm(farmContractAddress).enterStaking(wantAmt); // Just for CAKE staking, we dont use deposit()\n        } else {\n            IPancakeswapFarm(farmContractAddress).deposit(pid, wantAmt);\n        }\n    }\n\n    /**\n     * @dev Returns deposits from user, can only be called by MasterChef\n     * _userAddress not used, possibly used by other strats\n     */\n    function withdraw(address _userAddress, uint256 _wantAmt) external onlyOwner nonReentrant returns (uint256) {\n        require(_wantAmt \u003e 0, \"_wantAmt is 0\");\n\n        if (isCAKEStaking) {\n            IPancakeswapFarm(farmContractAddress).leaveStaking(_wantAmt); // Just for CAKE staking, we dont use withdraw()\n        } else {\n            IPancakeswapFarm(farmContractAddress).withdraw(pid, _wantAmt);\n        }\n\n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\n        if (_wantAmt \u003e wantAmt) {\n            _wantAmt = wantAmt;\n        }\n\n        if (wantLockedTotal \u003c _wantAmt) {\n            _wantAmt = wantLockedTotal;\n        }\n\n        uint256 sharesRemoved = _wantAmt.mul(sharesTotal).div(wantLockedTotal);\n        if (sharesRemoved \u003e sharesTotal) {\n            sharesRemoved = sharesTotal;\n        }\n        sharesTotal = sharesTotal.sub(sharesRemoved);\n        wantLockedTotal = wantLockedTotal.sub(_wantAmt);\n\n        IERC20(wantAddress).safeTransfer(autoFarmAddress, _wantAmt);\n\n        return sharesRemoved;\n    }\n\n    /**\n     * 1. Harvest farm tokens\n     * 2. Converts farm tokens into want tokens\n     * 3. Deposits want tokens\n     */\n    function earn() external nonReentrant whenNotPaused {\n        // Harvest farm tokens\n        if (isCAKEStaking) {\n            IPancakeswapFarm(farmContractAddress).leaveStaking(0); // Just for CAKE staking, we dont use withdraw()\n        } else {\n            IPancakeswapFarm(farmContractAddress).withdraw(pid, 0);\n        }\n\n        // Converts farm tokens into want tokens\n        uint256 earnedAmt = IERC20(earnedAddress).balanceOf(address(this));\n\n        earnedAmt = distributeFees(earnedAmt);\n        earnedAmt = distributeRewards(earnedAmt);\n        earnedAmt = buyBack(earnedAmt);\n\n        if (isCAKEStaking) {\n            lastEarnBlock = block.number;\n            _farm();\n            return;\n        }\n\n        if (earnedAddress != token0Address) {\n            // Swap half earned to token0\n            _safeSwap(\n                earnedAmt.div(2),\n                earnedToToken0Path,\n                address(this)\n            );\n        }\n\n        if (earnedAddress != token1Address) {\n            // Swap half earned to token1\n            _safeSwap(\n                earnedAmt.div(2),\n                earnedToToken1Path,\n                address(this)\n            );\n        }\n\n        // Get want tokens, ie. add liquidity\n        uint256 token0Amt = IERC20(token0Address).balanceOf(address(this));\n        uint256 token1Amt = IERC20(token1Address).balanceOf(address(this));\n        if (token0Amt \u003e 0 \u0026\u0026 token1Amt \u003e 0) {\n            IPancakeRouter02(pcsRouterAddress).addLiquidity(\n                token0Address,\n                token1Address,\n                token0Amt,\n                token1Amt,\n                0,\n                0,\n                address(this),\n                now.add(600)\n            );\n        }\n\n        lastEarnBlock = block.number;\n\n        _farm();\n    }\n\n    /**\n     * 1. Takes a percentage (1%) of earned tokens\n     * 2. Converts the percentage to WBNB\n     * 3. Rewards dev for existing\n     */\n    function distributeFees(uint256 _earnedAmt) internal returns (uint256) {\n        if (_earnedAmt \u003e 0 \u0026\u0026 controllerFee \u003e 0) {\n            // Performance fee\n            uint256 fee = _earnedAmt.mul(controllerFee).div(feeMax);\n    \n            // One must hope for a WBNB pairing\n            _safeSwapBnb(\n                fee,\n                earnedToWbnbPath,\n                devAddress\n            );\n            \n            _earnedAmt = _earnedAmt.sub(fee);\n        }\n\n        return _earnedAmt;\n    }\n\n    /**\n     * 1. Takes a percentage (1%) of earned tokens\n     * 2. Converts the percentage to Busd\n     * 3. Rewards BLN-BNB stakers with the Busd\n     */\n    function distributeRewards(uint256 _earnedAmt) internal returns (uint256) {\n        if (_earnedAmt \u003e 0 \u0026\u0026 rewardRate \u003e 0) {\n            // Performance fee\n            uint256 fee = _earnedAmt.mul(rewardRate).div(feeMax);\n    \n            uint256 currWbnb = IERC20(wbnbAddress).balanceOf(address(this));\n            \n            // One must hope for a WBNB pairing\n            _safeSwap(\n                fee,\n                earnedToRewardPath,\n                address(this)\n            );\n            \n            uint256 diffWbnb = IERC20(wbnbAddress).balanceOf(address(this)).sub(currWbnb);\n            \n            IStratA(rewardAddress).depositReward(diffWbnb);\n            \n            _earnedAmt = _earnedAmt.sub(fee);\n        }\n\n        return _earnedAmt;\n    }\n\n    /**\n     * 1. Takes a percentage (1%) of earned tokens\n     * 2. Converts the percentage to BLN\n     * 3. Burns the BLN\n     */\n    function buyBack(uint256 _earnedAmt) internal returns (uint256) {\n        if (buyBackRate == 0) {\n            return _earnedAmt;\n        }\n\n        uint256 buyBackAmt = _earnedAmt.mul(buyBackRate).div(feeMax);\n\n        _safeSwap(\n            buyBackAmt,\n            earnedToBLNPath,\n            buyBackAddress\n        );\n\n        return _earnedAmt.sub(buyBackAmt);\n    }\n\n    /**\n     * @dev Every time earn() is called dust will accumulate\n     * We call this function to convert the dust as well\n     */\n    function convertDustToEarned() external nonReentrant whenNotPaused {\n        require(!isCAKEStaking, \"isCAKEStaking\");\n\n        // Converts dust tokens into earned tokens, which will be reinvested on the next earn().\n\n        // Converts token0 dust (if any) to earned tokens\n        uint256 token0Amt = IERC20(token0Address).balanceOf(address(this));\n        if (token0Amt \u003e 0 \u0026\u0026 token0Address != earnedAddress) {\n            // Swap all dust tokens to earned tokens\n            IPancakeRouter02(pcsRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                token0Amt,\n                0,\n                token0ToEarnedPath,\n                address(this),\n                now.add(600)\n            );\n        }\n\n        // Converts token1 dust (if any) to earned tokens\n        uint256 token1Amt = IERC20(token1Address).balanceOf(address(this));\n        if (token1Amt \u003e 0 \u0026\u0026 token1Address != earnedAddress) {\n            // Swap all dust tokens to earned tokens\n            IPancakeRouter02(pcsRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                token1Amt,\n                0,\n                token1ToEarnedPath,\n                address(this),\n                now.add(600)\n            );\n        }\n    }\n\n    // Stops time\n    function pause() external govOnly {\n        _pause();\n    }\n\n    // The strat lives once more\n    function unpause() external govOnly {\n        _unpause();\n        _resetAllowances();\n    }\n\n    function _resetAllowances() internal {\n        IERC20(wantAddress).safeApprove(pcsRouterAddress, uint256(0));\n        IERC20(wantAddress).safeIncreaseAllowance(\n            farmContractAddress,\n            uint256(-1)\n        );\n\n        IERC20(earnedAddress).safeApprove(pcsRouterAddress, uint256(0));\n        IERC20(earnedAddress).safeIncreaseAllowance(\n            pcsRouterAddress,\n            uint256(-1)\n        );\n\n        IERC20(token0Address).safeApprove(pcsRouterAddress, uint256(0));\n        IERC20(token0Address).safeIncreaseAllowance(\n            pcsRouterAddress,\n            uint256(-1)\n        );\n\n        IERC20(token1Address).safeApprove(pcsRouterAddress, uint256(0));\n        IERC20(token1Address).safeIncreaseAllowance(\n            pcsRouterAddress,\n            uint256(-1)\n        );\n        \n        IERC20(wbnbAddress).safeApprove(rewardAddress, uint256(0));\n        IERC20(wbnbAddress).safeIncreaseAllowance(\n            rewardAddress,\n            uint256(-1)\n        );\n    }\n\n    function resetAllowances() external govOnly {\n        _resetAllowances();\n    }\n    \n    function updateRewardAddress(address _rewardAddress, address _rewardToken) external govOnly {\t\n        rewardAddress = _rewardAddress;\n        rewardToken = _rewardToken;\n        earnedToRewardPath = [earnedAddress, wbnbAddress, _rewardToken];\n    }\n    \n    function setSettings(\n        uint256 _controllerFee,\n        uint256 _rewardRate,\n        uint256 _buyBackRate,\n        uint256 _entranceFeeFactor,\n        uint256 _slippageFactor\n    ) external govOnly {\n        require(_controllerFee.add(_rewardRate).add(_buyBackRate) \u003c= feeMaxTotal, \"Max fee of 4.5%\");\n        require(_entranceFeeFactor \u003e= entranceFeeFactorLL, \"_entranceFeeFactor too low\");\n        require(_entranceFeeFactor \u003c= entranceFeeFactorMax, \"_entranceFeeFactor too high\");\n        require(_slippageFactor \u003c= slippageFactorUL, \"_slippageFactor too high\");\n        controllerFee = _controllerFee;\n        rewardRate = _rewardRate;\n        buyBackRate = _buyBackRate;\n        entranceFeeFactor = _entranceFeeFactor;\n        slippageFactor = _slippageFactor;\n\n        emit SetSettings(\n            _controllerFee,\n            _rewardRate,\n            _buyBackRate,\n            _entranceFeeFactor,\n            _slippageFactor\n        );\n    }\n\n    function setGov(address _govAddress) external govOnly {\n        govAddress = _govAddress;\n    }\n    \n    function _safeSwap(\n        uint256 _amountIn,\n        address[] memory _path,\n        address _to\n    ) internal {\n        uint256[] memory amounts = IPancakeRouter02(pcsRouterAddress).getAmountsOut(_amountIn, _path);\n        uint256 amountOut = amounts[amounts.length.sub(1)];\n\n        IPancakeRouter02(pcsRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            _amountIn,\n            amountOut.mul(slippageFactor).div(1000),\n            _path,\n            _to,\n            now.add(600)\n        );\n    }\n    \n    function _safeSwapBnb(\n        uint256 _amountIn,\n        address[] memory _path,\n        address _to\n    ) internal {\n        uint256[] memory amounts = IPancakeRouter02(pcsRouterAddress).getAmountsOut(_amountIn, _path);\n        uint256 amountOut = amounts[amounts.length.sub(1)];\n\n        IPancakeRouter02(pcsRouterAddress).swapExactTokensForETHSupportingFeeOnTransferTokens(\n            _amountIn,\n            amountOut.mul(slippageFactor).div(1000),\n            _path,\n            _to,\n            now.add(600)\n        );\n    }\n}"}}