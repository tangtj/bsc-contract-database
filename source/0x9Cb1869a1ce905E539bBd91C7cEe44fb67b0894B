// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

interface IBEP20 {
    function totalSupply() external pure returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract tcCoin is IBEP20 {
    string public constant name = "tcCoin";
    string public constant symbol = "tc";
    uint8 public constant decimals = 8;
    uint256 public constant initialSupply = 1e9 * (10 ** uint256(decimals));
    uint256 public constant maxTransactionAmount = 1e8 * (10 ** uint256(decimals));
    uint256 public constant minTransactionAmount = 20 * (10 ** uint256(decimals));
    uint256 public constant transactionFeePercentage = 3;
    address public constant feeRecipientAddress = 0x27Ca50cd6B47157daB7C23ea42Df102e2c611263;
    address public constant blackHoleAddress = address(0);

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _exemptFromFee;

    constructor() {
        _balances[msg.sender] = initialSupply;
        emit Transfer(address(0), msg.sender, initialSupply);
    }

    function totalSupply() external pure override returns (uint256) {
        return initialSupply;
    }

    function balanceOf(address account) external view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) external override returns (bool) {
        require(recipient != address(0), "BEP20: transfer to the zero address");
        require(amount > 0, "BEP20: Invalid transfer amount");
        require(amount <= maxTransactionAmount, "BEP20: Exceeds max transaction amount");

        uint256 feeAmount = _calculateTransactionFee(amount);
        uint256 transferAmount = amount - feeAmount;

        _transfer(msg.sender, recipient, transferAmount);
        _transfer(msg.sender, feeRecipientAddress, feeAmount);

        if (recipient == blackHoleAddress) {
            _burn(blackHoleAddress, feeAmount);
        }

        return true;
    }

    function allowance(address owner, address spender) external view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(recipient != address(0), "BEP20: transfer to the zero address");
        require(amount > 0, "BEP20: Invalid transfer amount");
        require(amount <= maxTransactionAmount, "BEP20: Exceeds max transaction amount");

        uint256 currentAllowance = _allowances[sender][msg.sender];
        require(currentAllowance >= amount, "BEP20: transfer amount exceeds allowance");

        uint256 feeAmount = _calculateTransactionFee(amount);
        uint256 transferAmount = amount - feeAmount;

        _transfer(sender, recipient, transferAmount);
        _transfer(sender, feeRecipientAddress, feeAmount);
        _allowances[sender][msg.sender] = currentAllowance - amount;

        if (recipient == blackHoleAddress) {
            _burn(blackHoleAddress, feeAmount);
        }

        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {
        uint256 currentAllowance = _allowances[msg.sender][spender];
        require(currentAllowance >= subtractedValue, "BEP20: decreased allowance below zero");
        _approve(msg.sender, spender, currentAllowance - subtractedValue);
        return true;
    }

    function isExemptFromFee(address account) external view returns (bool) {
        return _exemptFromFee[account];
    }

    function setExemptFromFee(address account, bool exempt) external {
        require(msg.sender == feeRecipientAddress, "BEP20: Only fee recipient address can set exemption");

        _exemptFromFee[account] = exempt;
    }

    function _transfer(address sender, address recipient, uint256 amount) private {
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(recipient != address(0), "BEP20: transfer to the zero address");
        require(amount > 0, "BEP20: Invalid transfer amount");

        _balances[sender] -= amount;
        _balances[recipient] += amount;
        emit Transfer(sender, recipient, amount);
    }

    function _calculateTransactionFee(uint256 amount) private view returns (uint256) {
        if (_exemptFromFee[msg.sender] || msg.sender == feeRecipientAddress) {
            return 0;
        }
        
        if (amount >= minTransactionAmount) {
            return (amount * transactionFeePercentage) / 100;
        } else {
            return 0;
        }
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _burn(address account, uint256 amount) private {
        require(account != address(0), "BEP20: burn from the zero address");

        _balances[account] -= amount;
        emit Transfer(account, blackHoleAddress, amount);
    }
}