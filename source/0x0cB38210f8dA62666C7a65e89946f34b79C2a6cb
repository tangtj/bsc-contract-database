// SPDX-License-Identifier: MIT
/*
 ⚡️ Website  : https://FirepotFinance.fun/
 ✉️ Telegram : https://t.me/FirepotFinanceToken
 ✖️ Twitter  : https://twitter.com/FirepotFinanceBep

 🔥🚀 Introducing Firepot Finance - Igniting Your Investment Journey! 🔥🚀

🌟 Why Invest in Firepot Finance? 🌟

Are you ready to set your investments ablaze? Look no further than Firepot Finance, the scorching-hot BEP-20 token that's about to revolutionize the crypto space! Here's why you should hop on board:

🔥 Innovative Utility: Firepot Finance isn't just another token. It's a gateway to a world of opportunities. Holders will gain exclusive access to our sizzling ecosystem, including NFT marketplaces, decentralized finance (DeFi) products, and much more.

📈 Unmatched Growth Potential: With a dedicated team of experts and a clear vision, Firepot Finance is positioned for exponential growth. As we fan the flames of innovation, your investments have the potential to skyrocket!

🛡️ Secure and Transparent: We take security seriously. Firepot Finance is built on a robust blockchain infrastructure, ensuring that your investments remain safe and transactions transparent. Your peace of mind matters to us.

🔒 Liquidity Lock: Our liquidity pool is locked, guaranteeing stability and preventing sudden price fluctuations. You can trust that Firepot Finance is here for the long haul.

🔥 Community Power: By investing in Firepot Finance, you become part of a vibrant and passionate community. Join discussions, share ideas, and collectively shape the future of our ecosystem.

📜 Roadmap 2023-2025 📜

🔥 Q3 2023:

Token Launch and Community Building
Listings on Major Exchanges
Launch of Firepot Wallet
🌟 Q1 2024:

Introduction of Firepot NFT Marketplace
Partnerships with Top Artists and Creators
Initial Development of Firepot DeFi Products
🚀 Q3 2024:

FirepotSwap: Our Own Decentralized Exchange (DEX)
Expansion of DeFi Product Line
Strategic Partnerships with Other Leading Projects
🌎 Q1 2025:

Launch of Firepot Blockchain (FIRE Chain)
Integration of Cross-Chain Compatibility
Full-Fledged DeFi Suite: Lending, Staking, Yield Farming
🔥 Q3 2025:

Mainstream Adoption Campaigns
Firepot Finance Payment Card (FIRE Card)
Continuous Ecosystem Growth and Innovation
🔥 Join Us on Social Media! 🔥

Stay updated and engage with the Firepot Finance community across different platforms:

🔗 site: www.firepot.finance
📱 Twitter: @FirepotFinanceOfficial
📷 Instagram: @firepotfinance_insta
💬 Telegram: t.me/firepotfinancechat
📢 Reddit: r/FirepotFinanceReddit
📸 TikTok: @firepotfinance_tiktok

🔥 Get ready to embrace the flames of prosperity with Firepot Finance! Invest now and be a part of our scorching journey to the future. 🔥🚀 #IgniteYourInvestments #FirepotFinance 🌟🔥🚀


*/
pragma solidity 0.8.21;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

interface ERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }

}

contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
}

contract FirepotFinanceToken is Context, ERC20, Ownable {
    using SafeMath for uint256;
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => bool) private _isExcludedFromFee;
    mapping (address => bool) private bots;
    mapping(address => uint256) private _holderLastTransferTimestamp;
    bool public transferDelayEnabled = false;
    address payable private _taxWallecoin;

    uint256 private _initialBuyTax=6;
    uint256 private _initialSellTax=7;
    uint256 private _finalBuyTax=3;
    uint256 private _finalSellTax=4;
    uint256 private _reduceBuyTaxAt=25;
    uint256 private _reduceSellTaxAt=50;
    uint256 private _preventSwapBefore=5;
    uint256 private _buyCount=0;

    uint8 private constant _decimals = 9;
    uint256 private constant _tTotal = 100000000 * 10**_decimals;
    string private constant _name = "Firepot Finance";
    string private constant _symbol = "Firepot Finance";
    uint256 public _maxtxperwallet = 2500000 * 10**_decimals;
    uint256 public _maxtxwalletsize = 2500000 * 10**_decimals;
    uint256 public _taxSwapThreshold= 300000 * 10**_decimals;
    uint256 public _maxTaxSwap= 1300000 * 10**_decimals;
    string public constant FirepotFinancewebsite = "https://FirepotFinance.io/";
    string public constant FirepotFinancetelegram = "https://t.me/FirepotFinance";
    string public constant FirepotFinanceaudited = "FirepotFinance is audited by: https://www.certik.com/";
    address private marketingAddress = 0x371b4AeabF297E7946aBE3Be84a6e27A8174e37d;

    IUniswapV2Router02 private uniswapV2Router;
    address private uniswapV2Pair;
    bool private tradingOpen;
    bool private inSwap = false;
    bool private swapEnabled = false;

    event MaxTxAmountUpdated(uint _maxtxperwallet);
    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor () {
        _taxWallecoin = payable(_msgSender());
        _balances[_msgSender()] = _tTotal;
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[_taxWallecoin] = true;
        _isExcludedFromFee[address(0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE)] = true;  //pinklock

        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "BEP20: transfer amount exceeds allowance"));
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(address from, address to, uint256 amount) private {
        require(from != address(0), "BEP20: transfer from the zero address");
        require(to != address(0), "BEP20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        uint256 taxAmount=0;
        if (from != owner() && to != owner()) {
            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);

            if (transferDelayEnabled) {
                  if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {
                      require(
                          _holderLastTransferTimestamp[tx.origin] <
                              block.number,
                          "_transfer:: Transfer Delay enabled.  Only one purchase per block allowed."
                      );
                      _holderLastTransferTimestamp[tx.origin] = block.number;
                  }
              }

            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {
                require(amount <= _maxtxperwallet, "Exceeds the _maxtxperwallet.");
                require(balanceOf(to) + amount <= _maxtxwalletsize, "Exceeds the maxWalletSize.");
                _buyCount++;
            }

            if(to == uniswapV2Pair && from!= address(this) ){
                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);
            }

            uint256 contractTokenBalance = balanceOf(address(this));
            if (!inSwap && to   == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {
                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));
                uint256 contractETHBalance = address(this).balance;
                if(contractETHBalance > 50000000000000000) {
                    sendETHToFee(address(this).balance);
                }
            }
        }

        if(taxAmount>0){
          _balances[address(this)]=_balances[address(this)].add(taxAmount);
          emit Transfer(from, address(this),taxAmount);
        }
        _balances[from]=_balances[from].sub(amount);
        _balances[to]=_balances[to].add(amount.sub(taxAmount));
        emit Transfer(from, to, amount.sub(taxAmount));
    }


    function min(uint256 a, uint256 b) private pure returns (uint256){
      return (a>b)?b:a;
    }

    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function removeLimits() external onlyOwner{
        _maxtxperwallet = _tTotal;
        _maxtxwalletsize=_tTotal;
        transferDelayEnabled=false;
        emit MaxTxAmountUpdated(_tTotal);
    }

    function sendETHToFee(uint256 amount) private {
        _taxWallecoin.transfer(amount);
    }


    function openTrading() external onlyOwner() {
        require(!tradingOpen,"trading is already open");
        uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        _approve(address(this), address(uniswapV2Router), _tTotal);
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());
        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);
        ERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
        
		swapEnabled = true;
        tradingOpen = true;
    }

    receive() external payable {}

    function manualSwap() external {
        require(_msgSender()==_taxWallecoin);
        uint256 tokenBalance=balanceOf(address(this));
        if(tokenBalance>0){
          swapTokensForEth(tokenBalance);
        }
        uint256 ethBalance=address(this).balance;
        if(ethBalance>0){
          sendETHToFee(ethBalance);
        }
    }
}