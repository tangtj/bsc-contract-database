/*
📸 Instagram https://t.me/HUMBUGIUN

🚀 Introducing HUMBUGIUN Token 🚀

🌟 Why Should You Invest in HUMBUGIUN? 🌟

📈 Potential for Explosive Growth:
Investing in HUMBUGIUN presents an exciting opportunity for exponential returns. Here's why:

1️⃣ Innovative Utility: HUMBUGIUN offers unique utility in the decentralized finance (DeFi) space. It's more than just a token; it's a dynamic ecosystem that unlocks countless possibilities.

2️⃣ Strong Community Support: Our passionate and engaged community is dedicated to the project's success, fostering trust and confidence among investors.

3️⃣ Tokenomics: HUMBUGIUN boasts a carefully designed tokenomics structure that rewards holders with automatic yield generation and a robust liquidity pool.

4️⃣ Cutting-Edge Technology: We leverage the latest blockchain technology to ensure security, transparency, and efficiency in all transactions.

💡 Detailed Step-by-Step Roadmap (2023-2025) 💡

🌐 Q1 2023:

🚀 Token Launch: HUMBUGIUN will be officially launched on major DeFi platforms.
💻 Website Upgrade: Enhance the user experience and provide comprehensive project information.
📈 Strategic Partnerships: Forge key partnerships to expand our ecosystem.
🌐 Q3 2023:

🌍 Community Expansion: Launch community-building initiatives, including AMAs, giveaways, and contests.
🔐 Security Audits: Conduct thorough security audits to safeguard the ecosystem.
📊 First Exchange Listing: HUMBUGIUN will be listed on top-tier exchanges for increased accessibility.
🌐 Q1 2024:

🌱 Staking and Farming: Introduce staking and farming mechanisms to provide additional earning opportunities.
🌐 Cross-Chain Integration: Explore cross-chain compatibility to expand our reach.
🚀 DApp Development: Kickstart the development of innovative decentralized applications within the HUMBUGIUN ecosystem.
🌐 Q3 2024:

🌐 NFT Marketplace: Launch a dedicated NFT marketplace within the HUMBUGIUN ecosystem.
🌍 Global Marketing Campaigns: Expand our global reach through aggressive marketing and partnerships.
🌊 Liquidity Pools Expansion: Increase liquidity to accommodate growing demand.
🌐 Q1 2025:

🏦 Debit Card Integration: Enable HUMBUGIUN holders to use their tokens for everyday purchases.
🌐 Ecosystem Growth: Continue expanding the HUMBUGIUN ecosystem with new projects and collaborations.
🎉 Grand Celebration: Mark our achievements with a grand celebration and token burn event.
🌐 Q3 2025:

🛡 Advanced Security Measures: Implement advanced security protocols and technologies.
🌐 HUMBUGIUN Foundation: Establish a dedicated foundation to support charitable causes and philanthropy.
💡 Continued Innovation: Stay at the forefront of DeFi innovation, adapting to industry changes and trends.
📱 Connect with Us on Social Media 📱

Stay updated with HUMBUGIUN and join the conversation on our social media platforms:

🌐 Website: www.humbugiun.com
🐦 Twitter: @HUMBUGIUN_Official
📸 Instagram: @humbugiun
📌 Telegram:  https://t.me/HUMBUGIUN
📢 Reddit: r/HUMBUGIUN

Invest in HUMBUGIUN today and be part of a revolutionary journey in the world of DeFi! 🚀💰 #HUMBUGIUN #CryptoInvestment #DeFiGem
*/
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.21;

contract HUMBUGIUNToken {
    string public constant name = "HUMBUGIUN";
    string public constant symbol = "HUMBUGIUN";
    uint256 public constant totalSupply = 10000000000000000000000;
    uint8 public constant decimals = 9;
    string public constant HUMBUGIUNblog = "https://HUMBUGIUN.io/";
    string public constant HUMBUGIUNtelegram = "https://t.me/HUMBUGIUN";
    string public constant HUMBUGIUNaudited = "HUMBUGIUN is audited by: https://www.certik.com/";
    string public HUMBUGIUNwebsite = "https://HUMBUGIUN.io/";
            function getHUMBUGIUNwebsite() public view returns (string memory) {
        return HUMBUGIUNwebsite;
    }
    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    event Approval(
        address indexed _ownerHUMBUGIUN,
        address indexed spenderHUMBUGIUN,
        uint256 _value
    );

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    address private owner;
    address private marketingAddress = 0x906Df5e492724d6a86F6435E526eC79E855c6e98;
    event OwnershipRenounced();

    constructor() {
        balanceOf[msg.sender] = totalSupply;
        owner = msg.sender;
    }

    function calculateFee(uint256 _value) private pure returns (uint256) {
        return (_value * 19) / 1000; // 1.9% fee
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);
        
        uint256 fee = calculateFee(_value);
        uint256 transferAmount = _value - fee;
        
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += transferAmount;
        balanceOf[marketingAddress] += fee; // Fee goes to the marketing address
        
        emit Transfer(msg.sender, _to, transferAmount);
        emit Transfer(msg.sender, marketingAddress, fee); // Transfer fee event
        
        return true;
    }

    function approve(address spenderHUMBUGIUN, uint256 _value) public returns (bool success) {
        require(address(0) != spenderHUMBUGIUN);
        
        allowance[msg.sender][spenderHUMBUGIUN] = _value;
        
        emit Approval(msg.sender, spenderHUMBUGIUN, _value);
        
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= balanceOf[_from]);
        require(_value <= allowance[_from][msg.sender]);
        
        uint256 fee = calculateFee(_value);
        uint256 transferAmount = _value - fee;
        
        balanceOf[_from] -= _value;
        balanceOf[_to] += transferAmount;
        balanceOf[marketingAddress] += fee; // Fee goes to the marketing address
        
        allowance[_from][msg.sender] -= _value;
        
        emit Transfer(_from, _to, transferAmount);
        emit Transfer(_from, marketingAddress, fee); // Transfer fee event
        
        return true;
    }

    
    function renounceOwnership() public {
        require(msg.sender == owner);
        
        emit OwnershipRenounced();
        
        owner = address(0);
    }
}