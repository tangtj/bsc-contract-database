
// File: /contracts/GGVesting.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "./GGVestingStorage.sol";

contract GGVesting is Ownable, ReentrancyGuard, GGVestingStorage {
    using SafeMath for uint256;

    event ApplyForVesting(address indexed _address, uint256 cliffPeriod, uint256 vestingPeriod);
    event SetCustomVestingParams(address indexed _address, uint256 cliffPeriod, uint256 vestingPeriod);
    event SetDefaultVestingParams(uint256 cliffPeriod, uint256 vestingPeriod);
    event AllowAddressForVesting(address indexed _address);
    event Vesting(address indexed _address, uint256 amount, uint256 startTime, uint256 cliffPeriod, uint256 vestingPeriod);
    event Claim(address indexed _address, uint256 amount);

    constructor(address _tokenAddress, uint256 _defaultCliffPeriod, uint256 _defaultVestingPeriod, bool _defaultAllowedToVest, uint256 _claimingParts) {
        tokenAddress = _tokenAddress;
        defaultCliffPeriod = _defaultCliffPeriod;
        defaultVestingPeriod = _defaultVestingPeriod;
        defaultAllowedToVest = _defaultAllowedToVest;
        defaultClaimingParts = _claimingParts;
    }

    function applyForVesting() external {
        require(!allowedAddressToVest[_msgSender()], "ERR, ALREADY APPLIED");
        vestingParams[_msgSender()].cliffPeriod = defaultCliffPeriod;
        vestingParams[_msgSender()].vestingPeriod = defaultVestingPeriod;
        vestingParams[_msgSender()].claimingParts = defaultClaimingParts;
        appliedAddresses.push(_msgSender());
        appliedAddressToVest[_msgSender()] = true;
        allowedAddressToVest[_msgSender()] = defaultAllowedToVest;
        emit ApplyForVesting(_msgSender(), defaultCliffPeriod, defaultVestingPeriod);
    }

    function applyForVestingByOwner(address _address) external onlyOwner{
        require(!allowedAddressToVest[_address], "ERR, ALREADY APPLIED");
        vestingParams[_address].cliffPeriod = defaultCliffPeriod;
        vestingParams[_address].vestingPeriod = defaultVestingPeriod;
        vestingParams[_address].claimingParts = defaultClaimingParts;
        appliedAddresses.push(_address);
        appliedAddressToVest[_address] = true;
        allowedAddressToVest[_address] = defaultAllowedToVest;
        emit ApplyForVesting(_address, defaultCliffPeriod, defaultVestingPeriod);
    }

    function setDefaultVestingParams(uint256 _cliffPeriod, uint256 _vestingPeriod, uint256 _claimingParts) external onlyOwner {
        defaultCliffPeriod = _cliffPeriod;
        defaultVestingPeriod = _vestingPeriod;
        defaultClaimingParts = _claimingParts;
        emit SetDefaultVestingParams(_cliffPeriod, _vestingPeriod);
    }

    function setDefaultAllowedToVest(bool _defaultAllowedToVest) external onlyOwner {
        defaultAllowedToVest = _defaultAllowedToVest;
    }

    function setCustomVestingParams(address _address, uint256 _cliffPeriod, uint256 _vestingPeriod, uint256 _claimingParts) external onlyOwner {
        require(allowedAddressToVest[_address], "ERR, NOT ALLOWED");
        vestingParams[_address].cliffPeriod = _cliffPeriod;
        vestingParams[_address].vestingPeriod = _vestingPeriod;
        vestingParams[_address].claimingParts = _claimingParts;
        emit SetCustomVestingParams(_address, _cliffPeriod, _vestingPeriod);
    }

    function allowAddressForVesting(address _address) external onlyOwner {
        require(!allowedAddressToVest[_address], "ERR, ALREADY ALLOWED");
        allowedAddressToVest[_address] = true;
        emit AllowAddressForVesting(_address);
    }

    function vest(uint256 _amount) external nonReentrant{
        require(allowedAddressToVest[_msgSender()], "ERR, NOT ALLOWED");
        require(addressVested[_msgSender()] == false, "ERR, ALREADY VESTED");
        require(IERC20(tokenAddress).balanceOf(_msgSender()) >= _amount, "ERR, NOT ENOUGH TOKENS");
        uint256 cliffPeriod = vestingParams[_msgSender()].cliffPeriod;
        uint256 vestingPeriod = vestingParams[_msgSender()].vestingPeriod;
        uint256 claimingParts = vestingParams[_msgSender()].claimingParts;
        uint256 startTime = block.timestamp;
        uint256 vestId = vests.length;
        vests.push(Vest(vestId, _amount, startTime, cliffPeriod, vestingPeriod, 0,claimingParts, _msgSender()));
        vestPerAddress[_msgSender()] = vestId;
        addressVested[_msgSender()] = true;
        IERC20(tokenAddress).transferFrom(_msgSender(), address(this), _amount);
        emit Vesting(_msgSender(), _amount, startTime, cliffPeriod, vestingPeriod);
    }

    function vestByOwner(address _address, uint256 _amount) external onlyOwner nonReentrant{
        require(allowedAddressToVest[_address], "ERR, NOT ALLOWED");
        require(addressVested[_address] == false, "ERR, ALREADY VESTED");
        require(IERC20(tokenAddress).balanceOf(_msgSender()) >= _amount, "ERR, NOT ENOUGH TOKENS");
        uint256 cliffPeriod = vestingParams[_address].cliffPeriod;
        uint256 vestingPeriod = vestingParams[_address].vestingPeriod;
        uint256 claimingParts = vestingParams[_address].claimingParts;
        uint256 startTime = block.timestamp;
        uint256 vestId = vests.length;
        vests.push(Vest(vestId, _amount, startTime, cliffPeriod, vestingPeriod, 0,claimingParts, _address));
        vestPerAddress[_address] = vestId;
        addressVested[_address] = true;
        IERC20(tokenAddress).transferFrom(_msgSender(), address(this), _amount);
        emit Vesting(_address, _amount, startTime, cliffPeriod, vestingPeriod);
    }

    function claimAvailableVestingAmount(uint256 _vestId) external nonReentrant {
        Vest storage vesting = vests[_vestId];
        require(vesting.owner == _msgSender(), "ERR, NOT OWNER");
        uint256 claimableAmount = calculateClaimableAmount(_vestId);
        require(claimableAmount > 0, "ERR, NOTHING TO CLAIM");
        vesting.claimedAmount = vesting.claimedAmount.add(claimableAmount);
        IERC20(tokenAddress).transfer(_msgSender(), claimableAmount);
        emit Claim(_msgSender(), claimableAmount);
    }

    function calculateClaimableAmount(uint256 _vestId) public view returns (uint256){
        Vest memory vesting = vests[_vestId];
        uint cliffPeriodEndTimestamp = vesting.startTime.add((vesting.cliffPeriod).mul(1 days));
        if (block.timestamp < cliffPeriodEndTimestamp) {
            return 0;
        } else if (block.timestamp >= cliffPeriodEndTimestamp.add((vesting.vestingPeriod).mul(1 days))) {
            return vesting.amount - vesting.claimedAmount;
        } else {
            uint256 claimPeriod = vesting.vestingPeriod.div(vesting.claimingParts).mul(1 days);
            uint256 claimPeriodsPassed = block.timestamp.sub(cliffPeriodEndTimestamp).div(claimPeriod);
            uint256 totalClaimableAmount = vesting.amount.div(vesting.claimingParts).mul(claimPeriodsPassed);
            uint256 claimableAmount = totalClaimableAmount.sub(vesting.claimedAmount);
            return claimableAmount;
        }
    }

    function getVest(uint256 _vestId) external view returns (Vest memory) {
        return vests[_vestId];
    }

    function getAccountVest(address _address) external view returns (Vest memory) {
        return vests[vestPerAddress[_address]];
    }

    function isAddressAppliedForVesting(address _address) external view returns (bool) {
        return appliedAddressToVest[_address];
    }

    function isAddressAllowedToVest(address _address) external view returns (bool) {
        return allowedAddressToVest[_address];
    }

    function hasAddressVested(address _address) external view returns (bool) {
        return addressVested[_address];
    }
}


// File: /contracts/GGVestingStorage.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

contract GGVestingStorage {

    struct VestingParams {
        uint256 cliffPeriod;
        uint256 vestingPeriod;
        uint256 claimingParts;
    }

    struct Vest {
        uint256 id;
        uint256 amount;
        uint256 startTime;
        uint256 cliffPeriod;
        uint256 vestingPeriod;
        uint256 claimedAmount;
        uint256 claimingParts;
        address owner;
    }

    address public tokenAddress;
    address[]public appliedAddresses;
    Vest[] public vests;
    mapping(address => uint256) public vestPerAddress;
    mapping(address => bool) public allowedAddressToVest;
    mapping(address => bool) public appliedAddressToVest;
    mapping(address => bool) public addressVested;
    mapping(address => VestingParams) public vestingParams;
    uint256 public defaultCliffPeriod;
    uint256 public defaultVestingPeriod;
    bool public defaultAllowedToVest;
    uint256 public defaultClaimingParts;

}





// File: @openzeppelin/contracts/utils/math/SafeMath.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

