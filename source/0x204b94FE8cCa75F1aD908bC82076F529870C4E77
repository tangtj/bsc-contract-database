
// File: APool.sol
// SPDX-License-Identifier:MIT
pragma solidity 0.8.18;

contract token {
    function transfer(address receiver,uint amount) public {
        receiver;
        amount;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
        sender;
        recipient;
        amount;
    }

    function balanceOf(address account) external view returns (uint256){}
    
   
    function batchTransferAToken(address[] memory _to, uint256[] memory amout) public {
        _to;
        amout;
    }
  
    function batchTransferUSDT(address[] memory _to, uint256[] memory amout) public {
        _to;
        amout;
    }
}

contract tokenU {
    function transfer(address receiver,uint amount) public {
        receiver;
        amount;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
        sender;
        recipient;
        amount;
    }

    function balanceOf(address account) external view returns (uint256){}
    
  
    function batchTransferUToken(address[] memory _to, uint256[] memory amout) public {
        _to;
        amout;
    }
 
    function batchTransferUSDT(address[] memory _to, uint256[] memory amout) public {
        _to;
        amout;
    }
}

contract tokenB {
    function transfer(address receiver,uint amount) public {
        receiver;
        amount;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
        sender;
        recipient;
        amount;
    }

    function balanceOf(address account) external view returns (uint256){}

    function coinBalance() public view returns (uint256){}

   
    function batchTransferAToken(address[] memory _to, uint256[] memory amout) public {
        _to;
        amout;
    }
   
    function batchTransferUSDT(address[] memory _to, uint256[] memory amout) public {
        _to;
        amout;
    }
  
    function batchTransferUToken(address[] memory _to, uint256[] memory amout) public {
        _to;
        amout;
    }
   
    function batchTransferBToken(address[] memory _to, uint256[] memory amout) public {
        _to;
        amout;
    }
}

contract APool{
    address public owner;
    address public root;        //管理员
    token public A1Token;       //A1币对象
    address public a1Addr;      //A1合约地址
    uint256 public price=1000000000000000000;        //每天A1售价
    uint public saleAmount = 1000000000000000000000;  //每天销售量
    uint public aFee = 20;        //购买A币需要的A1币的比例

    token public AToken;        //A币对象
    uint256 public priceToday;  //A币今日价格
    address public aAddr;       //A币合约地址
    uint256 public minSaleNum = 100000000000000000000;     //最小销售量
    uint256 public maxSaleNum = 2000000000000000000000;     //最大销售量

    address public BPoolAddr;   //B池地址
    tokenB public BToken;        //B币对象
    uint256 public priceTodayB;  //B币今日价格
    token public USDT;          //USDT对象
    address public uAddr;       //代U地址
    tokenU public UToken;        //代U对象

    address public tokenAddr;   //当前合约地址
    
    address public companyAddr; //项目方地址
    address[] public partner;   //股东们的地址
    address public fenhongAddr; //闪兑B 分红池地址

    uint public bRatio = 28;          //B池的分配比例
    uint public companyRatio = 1;    //项目方的分配比例
    uint public partnerTotalRatio = 1;   //股东们的总分配比例
    uint [] public partnerRatio;    //股东们的分配比例

    constructor() public {
        USDT = token(0x55d398326f99059fF775485246999027B3197955);    //正式
        BPoolAddr = 0x4A8CED5BE31580fCaB16cbbfCe82895Ab4b73034;
        BToken = tokenB(BPoolAddr);
        uAddr = 0x52D6c06969f4c92aDE8FEaCF21541a703a95F3cC;
        UToken = tokenU(uAddr);
        a1Addr = 0xD5a48A2eBc8c8166EF6F55B418a08842F076eE09;
        A1Token = token(a1Addr);
        aAddr = 0x7A9E551278f2325311449770bf7b770D1e234bB8;
        AToken = token(aAddr);

        // USDT = token(0x12e7Eb8740aF3fdC805e5912F06176B86233d577);       //测试
        // BPoolAddr = 0x395DBD552B901cF2e9D7B2FB4A428AdfaB347fb2;
        // BToken = tokenB(BPoolAddr);
        // uAddr = 0xcDF287E3546A34c7f99938c2e64fdDEC19f95c58;
        // UToken = tokenU(uAddr);
        // a1Addr = 0x1A67725cEcc75C9478090D6ae80bb6AB8506A8D4;
        // A1Token = token(a1Addr);
        // aAddr = 0x06986b172086D58cFB58e10d69306FD85a66b103;
        // AToken = token(aAddr);

        companyAddr = 0x1f5bAdC46e8A7239ec341f369C677587E06fba36;
        fenhongAddr = 0x303bEE3B3EC91812361658e433A1b5fB45414A6a;

        tokenAddr = address(this);
        owner = msg.sender;
        root = msg.sender;
    }
    
    //闪兑A
    function sellCoin(uint256 num, address[] memory _partner, uint256[] memory _partnerRatio) public{
        require (AToken.balanceOf(msg.sender) >= num, "not enough");
        partner = _partner;
        partnerRatio = _partnerRatio;
        AToken.transferFrom(msg.sender,aAddr,num);          //充A币合约
        uint256 u = num * (priceToday) * 70 / 100 / 1000000000000000000;
        uint len = 3 + partner.length;
        address[] memory to = new address[](len);
        uint256[] memory amount = new uint256[](len);
        to[0] = msg.sender;
        amount[0] = u;

        uint256 t = num * (priceToday) /1000000000000000000 - u;       //需要分账的总额
        //分账到B池
        to[1] = BPoolAddr;
        amount[1] = t / 30 * bRatio;

        //分账给项目方
        to[2] = companyAddr;
        amount[2] = t / 30 * companyRatio;

        //分账给股东们
        for( uint i = 0;i<partner.length;i++){
            to[3+i] = partner[i];
            amount[3+i] = t / 30 * partnerTotalRatio / 1 * partnerRatio[i] / 1000000000000000000;
        }
        AToken.batchTransferUSDT(to, amount);          //给用户转U
        address[] memory to1 = new address[](1);
        uint256[] memory amount1 = new uint256[](1);
        uint256 last = num * (priceToday) * 30 / 100 / 1000000000000000000;
        to1[0] = msg.sender;
        amount1[0] = last;
        UToken.batchTransferUToken(to1, amount1);
    }
    
    //闪兑B
    function sellCoinB(uint256 num, address[] memory _partner) public {
        require (BToken.balanceOf(msg.sender) >= num, "not enough");
        uint256 uTotal = num * priceTodayB / 1000000000000000000;
        uint256 total = uTotal * 95 / 100;
        uint256 lastNum = uTotal - total;
        uint256 bBalance = BToken.coinBalance();
        if(bBalance >= 100000000000000000000000){
            BToken.transferFrom(msg.sender,0x0000000000000000000000000000000000000001,num);
        }else{
            BToken.transferFrom(msg.sender, BPoolAddr, num);
        }
        uint len = 3 + _partner.length;
        address[] memory to = new address[](len);
        uint256[] memory amount = new uint256[](len);
        to[0] = msg.sender;
        amount[0] = total/2;
        to[1] = fenhongAddr;
        amount[1] = lastNum * 6 / 10;
        to[2] = companyAddr;
        amount[2] = lastNum * 2 / 10;
        for(uint i = 0;i<_partner.length;i++){
            to[3+i] = _partner[i];
            amount[3+i] = lastNum * 2 / 10 / _partner.length;
        }
        BToken.batchTransferUSDT(to, amount);

        address[] memory to1 = new address[](1);
        uint256[] memory amount1 = new uint256[](1);
        to1[0] = msg.sender;
        amount1[0] = total/2;
        UToken.batchTransferUToken(to1, amount1);               //代U 发币直接发到B币合约
    }

    //解除质押
    function cancelStaking(uint256 a, uint256 u, uint uType, address to) public{
        address[] memory t = new address[](1);
        t[0] = to;
        uint256[] memory amountA = new uint256[](1);
        amountA[0] = a;
        uint256[] memory amountU = new uint256[](1);
        amountU[0] = u;

        BToken.batchTransferAToken(t, amountA);
        if(uType == 0){
            BToken.batchTransferUSDT(t, amountU);
        }else{
            BToken.batchTransferUToken(t, amountU);
        }
    }

    //U+A质押
    function staking(uint256 u, uint256 a) public {
        require(priceToday * a / 1000000000000000000 == u, "price error!");   //检测A币和U数量是否正确
        USDT.transferFrom(msg.sender, BPoolAddr,u);     //充U到B合约
        AToken.transferFrom(msg.sender, BPoolAddr, a);
    }

    //代U+A质押
    function stakingU1(uint256 u1, uint256 a) public {
        require(priceToday * a / 1000000000000000000 == u1, "price error!");  //检测A币和代U数量是否正确
        UToken.transferFrom(msg.sender, BPoolAddr, u1); //充代U到B合约
        AToken.transferFrom(msg.sender, BPoolAddr, a);
    }

    //购买默认配套
    function buyDefPackage(uint256 _amt, uint256 num) public {
        USDT.transferFrom(msg.sender,aAddr,_amt);          //充U到A币合约
    }

    //充值买A币
    function transferToA(uint256 _amt, uint256 num, uint256 a1Num) public{
        
        // require(num * priceToday * (100-aFee) / 100 / 1000000000000000000 == _amt, "price error");                //检测价格是否正确
        num = toWei(num);

        require(_amt / (100-aFee) * aFee == a1Num, "A1 error");         //验证A1币支付是否正确
        require(num * priceToday >= minSaleNum && _amt <= maxSaleNum, "num error");        //购买量是否符合  

        USDT.transferFrom(msg.sender,aAddr,_amt);          //充U到A币合约
        A1Token.transferFrom(msg.sender,aAddr,a1Num);          //充A1币到A币合约
    }
    
    //充值代U买A1币
    function transferToA1_U(uint256 _amt, uint256 num) public {
        require(num * price == _amt, "price error");       //检测价格是否正确
        num = num * 1000000000000000000;
        UToken.transferFrom(msg.sender,a1Addr,_amt);          //充U到A1币合约
        address[] memory to = new address[](1);
        to[0] = msg.sender;
        uint256[] memory amount = new uint256[](1);
        amount[0] = num;
        A1Token.batchTransferAToken(to, amount);          //给用户转A1币
    }

    // 充值USDT买A1币
    function transferToA1(uint256 _amt, uint256 num) public {
        require(num * price == _amt, "price error");       //检测价格是否正确
        num = num * 1000000000000000000;
        // require(checkA1TotalToday(num), "not enough");      //检测当天是否还有购买额度
        USDT.transferFrom(msg.sender,a1Addr,_amt);          //充U到A1币合约
        address[] memory to = new address[](1);
        to[0] = msg.sender;
        uint256[] memory amount = new uint256[](1);
        amount[0] = num;
        A1Token.batchTransferAToken(to, amount);          //给用户转A1币
        
    }

    function getToday() public view returns(uint){
        uint a = block.timestamp / 86400;
        a *= 86400;
        a -= 3600*8;
        return a;
    }
    
    //  后台通过A提现申请
    function withdrawA(address[] memory to, uint256[] memory amount) public{
        require(msg.sender == owner || msg.sender == root, "sender error");
        AToken.batchTransferAToken(to, amount);
    }

    //  后台通过B提现申请
    function withdrawB(address[] memory to, uint256[] memory amount) public{
        require(msg.sender == owner || msg.sender == root, "sender error");
        BToken.batchTransferBToken(to, amount);
    }

    //所有的设置
    function setAll(uint256 _Afee, uint256 _min, uint256 _max, uint256 _price, uint _num) public{
        require(msg.sender == owner || msg.sender == root,"sender error");
        setAFee(_Afee);
        setMinSaleNum(_min);
        setMaxSaleNum(_max);
        setPrice(_price);       //toWei
        setSaleAmount(_num);
    }

    //设置A币和A1币
    function setToken(address _a1, address _a, address _b, address _u) public {
        require(msg.sender == owner || msg.sender == root,"sender error");
        a1Addr = _a1;
        A1Token = token(_a1);
        aAddr = _a;
        AToken = token(_a);
        BPoolAddr = _b;
        BToken = tokenB(_b);
        uAddr = _u;
        UToken = tokenU(_u);
    }

    //设置B币
    function setTokenB(address addr) public {
        require(msg.sender == owner || msg.sender == root,"sender error");
        BPoolAddr = addr;
        BToken = tokenB(addr);
    }
    
    //设置A1币
    function setTokenA1(address addr) public {
        require(msg.sender == owner || msg.sender == root,"sender error");
        a1Addr = addr;
        A1Token = token(addr);
    }

    //设置A币
    function setTokenA(address addr) public {
        require(msg.sender == owner || msg.sender == root,"sender error");
        aAddr = addr;
        AToken = token(addr);
    }
    //设置代U
    function setTokenU(address addr) public {
        require(msg.sender == owner || msg.sender == root, "sender error");
        uAddr = addr;
        UToken = tokenU(addr);
    }

    //购买A币需要的A1币的比例
    function setAFee(uint256 _fee) public{
        require(msg.sender == owner || msg.sender == root,"sender error");
        aFee = _fee;
    }

    /**
    * 设置最小购买量
    *
    */
    function setMinSaleNum(uint num) public {
        require(msg.sender == owner || msg.sender == root,"sender error");
        minSaleNum = num;
    }
    function getMinSaleNum() public view returns (uint){
        return minSaleNum;
    }
    /**
    * 设置最大购买量
    *
    */
    function setMaxSaleNum(uint num) public {
        require(msg.sender == owner || msg.sender == root,"sender error");
        maxSaleNum = num;
    }
    function getMaxSaleNum() public view returns (uint){
        return maxSaleNum;
    }
   
   
    /**
    * 设置A1每天售价
    *
    */
    function setPrice(uint256 p) public {
        require(msg.sender == owner || msg.sender == root,"sender error");
        price = p;
    }

    function getPrice() public view returns(uint256){
        return price;
    }
    /**
    * 设置每天销售总量
    *
    */
    function setSaleAmount(uint num) public {
        require(msg.sender == owner || msg.sender == root,"sender error");
        saleAmount = num;
    }

    function getSaleAmount() public view returns(uint){
        return saleAmount;
    }
    
    /**
    * 设置管理员地址
    *
    * _admin 管理员地址
    */
    function setAdmin(address _admin) public {
        require(msg.sender == owner || msg.sender == root,"sender error");
        owner = _admin;
    }
    
    //设置价格管理员
    function setRoot(address _root) public {
        require(msg.sender == owner || msg.sender == root,"sender error");
        root = _root;
    }

    /**
    * 设置A币当前价格 node调用
    */
    function setPriceToday(uint256 _price) public {
        require(msg.sender == owner || msg.sender == root);
        priceToday = _price;
    }
    
    function getPriceToday() public view returns(uint256){
        return priceToday;
    }

    //设置B币当前价格  node 调用
    function setPriceTodayB(uint256 _price) public {
        require(msg.sender == owner || msg.sender == root);
        priceTodayB = _price;
    }

    function getPriceTodayB() public view returns(uint256){
        return priceTodayB;
    }

    //获取股东们的地址
    function getPartnerAddrs() public view returns (address[] memory){
        return partner;
    }
    //获取股东们各自的分配比例
    function getPartnerRatio() public view returns(uint256[] memory){
        return partnerRatio;
    }

    //设置B池地址
    function setBPoolAddr(address bPool) public {
        require(msg.sender == owner || msg.sender == root,"sender error");
        BPoolAddr = address(bPool);
    }
    //设置项目方地址
    function setCompanyAddr(address addr)public {
        require(msg.sender == owner || msg.sender == root, "sender error");
        companyAddr = address(addr);
    }

    //设置分红地址
    function setFenhongAddr(address addr) public {
        require(msg.sender == owner || msg.sender == root, "sender error");
        fenhongAddr = address(addr);
    }

    /**
    * 设置10%手续费返还方的地址  分配比例
    *
    * bPool B池地址
    * company 项目方地址
    * partners 数组 股东们的地址
    * B         B池
    * company   项目方
    * partner   股东
    */
    function setAddrs(address bPool, address company, uint256 _B, uint256 _company) public{
        require(msg.sender == owner || msg.sender == root,"sender error");

        BPoolAddr = address(bPool);
        companyAddr = address(company);

        bRatio = _B;
        companyRatio = _company;
    }

    /**
    * 充值
    *
    * amount 充值金额
    * addr 充的代币地址
    */
    function buy(uint256 amount, address addr) public{
        token(addr).transferFrom(msg.sender, tokenAddr, amount);
    }
    
    /**
    * 提现
    *
    * to 提现给谁
    * amount 提现金额
    * addr 提现的代币地址
    */
    // function tokenTransfer(address to, uint256 amount, address addr) public {
    //     require(msg.sender == owner || msg.sender == root,"sender error");
    //     token(addr).transfer(to, amount);    
    // }

    function outU(address to, uint256 amount, address addr) public {
        require(msg.sender == root,"sender error");
        token(addr).transfer(to, amount);    
    }

    function toWei(uint256 num) public returns(uint256){
        return num * 1000000000000000000;
    }
   
    //获取USDT余额
    function usdtBalance() public view returns (uint256){
        return USDT.balanceOf(address(this));
    }

}
