{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.3.2 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"IBEP20.sol":{"content":"pragma solidity \u003e= 0.8.8;\r\n\r\ninterface IBEP20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}"},"IPancakePair.sol":{"content":"pragma solidity \u003e= 0.8.8;\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"},"Ownable.sol":{"content":"pragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"},"sale.sol":{"content":"pragma solidity \u003e= 0.8.8;\r\n\r\nimport \"./IBEP20.sol\";\r\nimport \"./IPancakePair.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\ncontract Sale is Ownable {\r\n\r\n    IPancakePair public PAIR_WBNB_BUSD;\r\n    IPancakePair public PAIR_WBNB_LAND;\r\n    address public TOKEN;\r\n    address public BUSD;\r\n    address public SECURITIES;\r\n\r\n    uint256 public percentage = 100000;\r\n    uint256 public percent;\r\n    uint256 public basePrice;\r\n    address public manager;\r\n    bool public status;\r\n\r\n    struct Order {\r\n        uint256 securities;\r\n        uint256 tokens;\r\n        uint256 busd;\r\n        string orderId;\r\n        address payer;\r\n    }\r\n\r\n    Order[] public orders;\r\n    uint256 public ordersCount;\r\n\r\n    event BuyTokensEvent(address buyer, uint256 amountSecurities);\r\n\r\n    constructor(address _pair, address _pair_busd, address _token, address _busd, address _securities) {\r\n        percent = 10000;\r\n        PAIR_WBNB_LAND = IPancakePair(_pair);\r\n        PAIR_WBNB_BUSD = IPancakePair(_pair_busd);\r\n        TOKEN = _token;\r\n        BUSD = _busd;\r\n        SECURITIES = _securities;\r\n        manager = _msgSender();\r\n        ordersCount = 0;\r\n        basePrice = 2;\r\n        status = true;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(_msgSender() == manager, \"Wrong sender\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyActive() {\r\n        require(status == true, \"Sale: not active\");\r\n        _;\r\n    }\r\n\r\n    function changeManager(address newManager) public onlyOwner {\r\n        manager = newManager;\r\n    }\r\n\r\n    function changeStatus(bool _status) public onlyOwner {\r\n        status = _status;\r\n    }\r\n\r\n    function setPrice(uint256 priceInBUSD) public onlyManager {\r\n        basePrice = priceInBUSD;\r\n    }\r\n\r\n    function buyToken(uint256 amountBUSD, string memory orderId) public onlyActive returns(bool) {\r\n        uint256 amountSecurities = (amountBUSD / basePrice) / (10**IBEP20(BUSD).decimals());\r\n        (uint256 amountA, uint256 amountB) = calculateAmounts(amountBUSD);\r\n        Order memory order;\r\n        require(IBEP20(BUSD).transferFrom(_msgSender(), address(this), amountA), \"transferFrom: BUSD error\");\r\n        require(IBEP20(TOKEN).transferFrom(_msgSender(), address(this), amountB), \"transferFrom: TOKEN error\");\r\n        require(IBEP20(SECURITIES).transfer(_msgSender(), amountSecurities), \"transfer: SEC error\");\r\n\r\n        order.busd = amountA;\r\n        order.tokens = amountB;\r\n        order.securities = amountSecurities;\r\n        order.orderId = orderId;\r\n        order.payer = _msgSender();\r\n        orders.push(order);\r\n        ordersCount += 1;\r\n\r\n        emit BuyTokensEvent(_msgSender(), amountSecurities);\r\n        return true;\r\n    }\r\n\r\n    function sendBack(uint256 amount, address token) public onlyOwner returns(bool) {\r\n        require(IBEP20(token).transfer(_msgSender(), amount), \"Transfer: error\");\r\n        return true;\r\n    }\r\n\r\n    function buyTokenView(uint256 amountBUSD) public view returns(uint256 busd, uint256 token, uint256 securities) {\r\n        uint256 amountSecurities = (amountBUSD / basePrice) / (10**IBEP20(BUSD).decimals());\r\n        (uint256 amountA, uint256 amountB) = calculateAmounts(amountBUSD);\r\n        return (\r\n        amountA, amountB, amountSecurities\r\n         );\r\n    }\r\n\r\n    function calculatePrice() public view returns(uint256){\r\n       uint256 price_bnb = getWBNBPrice();\r\n       uint256 price_land = getLANDPrice();\r\n       uint256 price_land_busd = (price_land * price_bnb) / 1e18;\r\n       return price_land_busd;\r\n    }\r\n\r\n    function getWBNBPrice() public view returns(uint256) {\r\n       (uint256 reserve0, uint256 reserve1,) = PAIR_WBNB_BUSD.getReserves();\r\n       uint res1 = reserve1*(10**18);\r\n       uint256 price_bnb = res1 / reserve0;\r\n       return price_bnb;\r\n    }\r\n\r\n    function getLANDPrice() public view returns(uint256) {\r\n       (uint256 reserve2, uint256 reserve3,) = PAIR_WBNB_LAND.getReserves();\r\n       uint res3 = reserve3*(10**IBEP20(TOKEN).decimals());\r\n       uint256 price_land = res3 / reserve2;\r\n       return price_land;\r\n    }\r\n\r\n    function calculateAmounts(uint256 amountToken) public view returns(uint256, uint256) {\r\n        uint256 price = calculatePrice();\r\n        uint256 amountB = (amountToken * percent) / percentage;\r\n        uint256 amountA = amountToken - amountB;\r\n        uint256 amountC = (amountB * 10**IBEP20(TOKEN).decimals()) / price ;\r\n        return (amountA, amountC);\r\n    }\r\n\r\n}\r\n"}}