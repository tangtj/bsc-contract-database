// SPDX-License-Identifier: MIT
// File: @openzeppelin/contracts/utils/Address.sol


// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     *
     * Furthermore, `isContract` will also return true if the target contract within
     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,
     * which only has an effect at the end of a transaction.
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}

// File: @openzeppelin/contracts/utils/math/SafeMath.sol


// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

// File: contracts/CommunityO7StarProject.sol

//deps/npm/@openzeppelin/contracts/token/ERC20/IERC20.sol

//deps/npm/@openzeppelin/contracts/access/Ownable.sol

//deps/npm/@openzeppelin/contracts/utils/math/SafeMath.sol

//deps/npm/@openzeppelin/contracts/utils/Address.sol

pragma solidity ^0.8.0;





contract CommunityO7StarProject is Ownable {
    using SafeMath for uint256;
    using Address for address;

    // Track Ether balances for users
    mapping(address => uint256) private etherBalances;
    // Track BNB balances for users
    mapping(address => uint256) private bnbBalances;
    // Track ERC-20 and BEP-20 token balances for users
    mapping(address => mapping(address => uint256)) private userTokenBalances;
    // List of supported tokens
    mapping(address => bool) private supportedTokens;
    // List of supported tokens
    address[] private supportedTokenList;
    // Gas estimation limit
    uint256 public gasEstimationLimit = 500000;

    // Recipient wallet address for Ether, BNB, ERC-20, and BEP-20 tokens
    address public recipientWalletAddress;

    // Address of the USDT BEP-20 token contract (admin-only)
    address public usdtTokenAddress;

    // Cooldown period for withdrawals (30 days)
    uint256 public withdrawalCooldownPeriod = 30 days;

    // Cooldown timestamp for each user's withdrawals
    mapping(address => uint256) public withdrawalCooldown;
    
    // Timestamp of the last withdrawal for each user's token balance
    mapping(address => mapping(address => uint256)) public lastWithdrawalTimestamp;

    // Mapping to store minimum amounts for each token
    mapping(address => uint256) public minTokenAmounts;
    
    // Minimum contract balance required for Ether, BNB, and USDT
    uint256 public minContractBalance = 0.00001 ether;

    // Withdrawal limit percentage (30%)
    uint256 public withdrawalLimitPercentage = 30;

    constructor(
        address initialRecipientWalletAddress
    ) {
        // Initialize recipient wallet address
        recipientWalletAddress = initialRecipientWalletAddress;

        // Set minimum amounts for Ether and BNB (0.00001 Ether)
        minTokenAmounts[address(0)] = 0.00001 ether;
    }

    modifier onlySupportedToken(address tokenAddress) {
        require(supportedTokens[tokenAddress], "Token not supported");
        _;
    }

    modifier nonZeroAmount(uint256 amount) {
        require(amount > 0, "Amount must be greater than zero");
        _;
    }

    modifier validRecipient(address recipient) {
        require(recipient != address(0), "Invalid recipient address");
        _;
    }

    modifier sufficientBalance(address user, uint256 amount, address tokenAddress) {
        require(userTokenBalances[user][tokenAddress] >= amount, "Insufficient token balance");
        _;
    }

    modifier sufficientEtherBalance(address user, uint256 amount) {
        require(etherBalances[user] >= amount, "Insufficient Ether balance");
        _;
    }

    modifier sufficientBNBBalance(address user, uint256 amount) {
        require(bnbBalances[user] >= amount, "Insufficient BNB balance");
        _;
    }

    modifier checkGasEstimation() {
        require(gasleft() >= gasEstimationLimit, "Insufficient gas for the transaction");
        _;
    }

    modifier notInCooldown(address user) {
        require(withdrawalCooldown[user] <= block.timestamp, "Withdrawal cooldown period not over");
        _;
    }

    // Function to change the recipient wallet address
    function changeRecipientWalletAddress(address newRecipientWalletAddress) external onlyOwner validRecipient(newRecipientWalletAddress) {
        recipientWalletAddress = newRecipientWalletAddress;
    }

    // Function to add a new supported token
    function addSupportedToken(address tokenAddress) external onlyOwner {
        require(!supportedTokens[tokenAddress], "Token is already supported");
        supportedTokens[tokenAddress] = true;
        supportedTokenList.push(tokenAddress);
    }

    // Function to remove a supported token
    function removeSupportedToken(address tokenAddress) external onlyOwner {
        require(supportedTokens[tokenAddress], "Token is not supported");
        supportedTokens[tokenAddress] = false;
        for (uint256 i = 0; i < supportedTokenList.length; i++) {
            if (supportedTokenList[i] == tokenAddress) {
                supportedTokenList[i] = supportedTokenList[supportedTokenList.length - 1];
                supportedTokenList.pop();
                break;
            }
        }
    }

    // Deposit Ether to the contract
    function depositEther() external payable nonZeroAmount(msg.value) {
        etherBalances[msg.sender] = etherBalances[msg.sender].add(msg.value);
    }

    // Withdraw Ether from the contract
    function withdrawEther(uint256 amount) external nonZeroAmount(amount) sufficientEtherBalance(msg.sender, amount) checkGasEstimation notInCooldown(msg.sender) {
        require(amount >= minTokenAmounts[address(0)], "Amount must be greater than or equal to the minimum");

        etherBalances[msg.sender] = etherBalances[msg.sender].sub(amount);
        (bool success, ) = payable(msg.sender).call{value: amount}("");
        require(success, "Ether transfer failed");

        // Update withdrawal cooldown
        withdrawalCooldown[msg.sender] = block.timestamp.add(withdrawalCooldownPeriod);
    }

    // Deposit BNB to the contract
    function depositBNB() external payable nonZeroAmount(msg.value) {
        bnbBalances[msg.sender] = bnbBalances[msg.sender].add(msg.value);
    }

    // Withdraw BNB from the contract
    function withdrawBNB(uint256 amount) external nonZeroAmount(amount) sufficientBNBBalance(msg.sender, amount) checkGasEstimation notInCooldown(msg.sender) {
        require(amount >= minTokenAmounts[address(0)], "Amount must be greater than or equal to the minimum");

        bnbBalances[msg.sender] = bnbBalances[msg.sender].sub(amount);
        (bool success, ) = payable(msg.sender).call{value: amount}("");
        require(success, "BNB transfer failed");

        // Update withdrawal cooldown
        withdrawalCooldown[msg.sender] = block.timestamp.add(withdrawalCooldownPeriod);
    }

    // Deposit ERC-20 and BEP-20 tokens to the contract
    function depositToken(address tokenAddress, uint256 amount) external onlySupportedToken(tokenAddress) nonZeroAmount(amount) checkGasEstimation {
        require(amount >= minTokenAmounts[tokenAddress], "Amount must be greater than or equal to the minimum");

        // Check and transfer tokens
        require(
            IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount),
            "Token transfer failed"
        );

        // Update user token balance
        userTokenBalances[msg.sender][tokenAddress] = userTokenBalances[msg.sender][tokenAddress].add(amount);
    }

    // Withdraw ERC-20 and BEP-20 tokens from the contract
    function withdrawToken(address tokenAddress, uint256 amount) external onlySupportedToken(tokenAddress) nonZeroAmount(amount) sufficientBalance(msg.sender, amount, tokenAddress) checkGasEstimation notInCooldown(msg.sender) {
        require(amount >= minTokenAmounts[tokenAddress], "Amount must be greater than or equal to the minimum");

        // Update user token balance
        userTokenBalances[msg.sender][tokenAddress] = userTokenBalances[msg.sender][tokenAddress].sub(amount);

        // Transfer tokens
        require(
            IERC20(tokenAddress).transfer(msg.sender, amount),
            "Token transfer failed"
        );

        // Update withdrawal cooldown
        withdrawalCooldown[msg.sender] = block.timestamp.add(withdrawalCooldownPeriod);
    }

    // Function to get the balance of a specific ERC-20 or BEP-20 token for a user
    function getUserTokenBalance(address user, address tokenAddress) external view returns (uint256) {
        return userTokenBalances[user][tokenAddress];
    }

    // Function to get the balance of Ether for a user
    function getUserEtherBalance(address user) external view returns (uint256) {
        return etherBalances[user];
    }

    // Function to get the balance of BNB for a user
    function getUserBNBBalance(address user) external view returns (uint256) {
        return bnbBalances[user];
    }

    // Function to get the list of supported tokens
    function getSupportedTokens() external view returns (address[] memory) {
        return supportedTokenList;
    }

    // Function to get gas estimation limit
    function getGasEstimationLimit() external view returns (uint256) {
        return gasEstimationLimit;
    }

    // Function to set gas estimation limit
    function setGasEstimationLimit(uint256 newLimit) external onlyOwner {
        gasEstimationLimit = newLimit;
    }

    // Function to withdraw all Ether and BNB to owner
    function withdrawAllToOwner() external onlyOwner {
        uint256 contractBalance = address(this).balance;
        require(contractBalance >= 0.00001 ether, "Contract balance is zero");
        payable(owner()).transfer(contractBalance);
    }

    // Function to withdraw all ERC-20 and BEP-20 tokens to owner
    function withdrawAllTokensToOwner() external onlyOwner {
        for (uint256 i = 0; i < supportedTokenList.length; i++) {
            address tokenAddress = supportedTokenList[i];
            uint256 tokenBalance = IERC20(tokenAddress).balanceOf(address(this));
            if (tokenBalance > 0) {
                require(
                    IERC20(tokenAddress).transfer(owner(), tokenBalance),
                    "Token transfer failed"
                );
            }
        }
    }

    // Fallback function to receive Ether
    receive() external payable {}

    // Admin function to set the USDT BEP-20 token address
    function setUsdtTokenAddress(address tokenAddress) external onlyOwner {
        require(tokenAddress != address(0), "Invalid token address");
        usdtTokenAddress = tokenAddress;
    }

    // Deposit USDT from user's wallet to this contract
    function depositUsdt(uint256 amount) external nonZeroAmount(amount) checkGasEstimation {
        require(amount >= minTokenAmounts[usdtTokenAddress], "Amount must be greater than or equal to the minimum");
        require(usdtTokenAddress != address(0), "USDT token address not set");
        require(
            IERC20(usdtTokenAddress).transferFrom(msg.sender, address(this), amount),
            "USDT transfer failed"
        );

        // Update user's USDT balance
        userTokenBalances[msg.sender][usdtTokenAddress] = userTokenBalances[msg.sender][usdtTokenAddress].add(amount);
    }

    // Function to withdraw USDT from the contract
    function withdrawUsdt(uint256 amount) external nonZeroAmount(amount) checkGasEstimation notInCooldown(msg.sender) {
        require(amount >= minTokenAmounts[usdtTokenAddress], "Amount must be greater than or equal to the minimum");
        require(usdtTokenAddress != address(0), "USDT token address not set");
        require(userTokenBalances[msg.sender][usdtTokenAddress] >= amount, "Insufficient USDT balance");
        
        // Check withdrawal limits
        require(canWithdraw(msg.sender, usdtTokenAddress, amount), "Withdrawal limits exceeded");

        // Update user's USDT balance
        userTokenBalances[msg.sender][usdtTokenAddress] = userTokenBalances[msg.sender][usdtTokenAddress].sub(amount);

        // Transfer USDT
        require(
            IERC20(usdtTokenAddress).transfer(msg.sender, amount),
            "USDT transfer failed"
        );

        // Update last withdrawal timestamp
        lastWithdrawalTimestamp[msg.sender][usdtTokenAddress] = block.timestamp;

        // Update withdrawal cooldown
        withdrawalCooldown[msg.sender] = block.timestamp.add(withdrawalCooldownPeriod);
    }

    // Function to withdraw all USDT from the contract to owner
    function withdrawAllUsdtToOwner() external onlyOwner {
        require(usdtTokenAddress != address(0), "USDT token address not set");
        uint256 usdtBalance = IERC20(usdtTokenAddress).balanceOf(address(this));
        require(usdtBalance > 0, "USDT balance is zero");
        require(
            IERC20(usdtTokenAddress).transfer(owner(), usdtBalance),
            "USDT transfer failed"
        );
    }

    // Function to reset user's withdrawal cooldown
    function resetWithdrawalCooldown(address user) external onlyOwner {
        withdrawalCooldown[user] = 0;
    }

    // Function to set the minimum deposit amount for a specific token
    function setMinDepositAmount(address tokenAddress, uint256 newMinAmount) external onlyOwner {
        minTokenAmounts[tokenAddress] = newMinAmount;
    }

    // Function to set the minimum withdrawal amount for a specific token
    function setMinWithdrawalAmount(address tokenAddress, uint256 newMinAmount) external onlyOwner {
        minTokenAmounts[tokenAddress] = newMinAmount;
    }

    // Function to set the minimum transfer amount for a specific token
    function setMinTransferAmount(address tokenAddress, uint256 newMinAmount) external onlyOwner {
        minTokenAmounts[tokenAddress] = newMinAmount;
    }

    // Function to set the minimum contract balance for Ether, BNB, and USDT
    function setMinContractBalance(uint256 newMinBalance) external onlyOwner {
        minContractBalance = newMinBalance;
    }

    // Function to set the minimum withdrawal amount for USDT
    function setMinUSDTWithdrawalAmount(uint256 newMinAmount) external onlyOwner {
        minTokenAmounts[usdtTokenAddress] = newMinAmount;
    }

    // Function to get the minimum withdrawal amount for USDT
    function getMinUSDTWithdrawalAmount() external view returns (uint256) {
        return minTokenAmounts[usdtTokenAddress];
    }

    // Function to get the minimum contract balance for Ether, BNB, and USDT
    function getMinContractBalance() external view returns (uint256) {
        return minContractBalance;
    }

    // Function to check if a user can withdraw a specific amount of tokens
    function canWithdraw(address user, address tokenAddress, uint256 amount) internal view returns (bool) {
        uint256 lastWithdrawal = lastWithdrawalTimestamp[user][tokenAddress];

        if (lastWithdrawal == 0) {
            // No previous withdrawal, allow it
            return true;
        }

        uint256 elapsedTime = block.timestamp - lastWithdrawal;

        if (elapsedTime >= withdrawalCooldownPeriod) {
            // Cooldown period has passed, allow it
            return true;
        }

        uint256 remainingBalance = userTokenBalances[user][tokenAddress].mul(withdrawalLimitPercentage).div(100);

        if (amount <= remainingBalance) {
            // Within the withdrawal limit
            return true;
        }

        return false;
    }
}