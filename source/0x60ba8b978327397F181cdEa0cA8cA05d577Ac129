
// File: src/TestBridge/TestBridge.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import {IZKBridge} from "../interfaces/IZKBridge.sol";
import {IZKBridgeReceiver} from "../interfaces/IZKBridgeReceiver.sol";

contract TestBridge is IZKBridgeReceiver {
    address public zkBridge;

    event MessageSent(uint64 sequence);
    event MessageReceived(uint16 srcChainId, address srcAddress, uint64 sequence, bytes payload);

    constructor(address zkBridge_) {
        zkBridge = zkBridge_;
    }

    function setBridge(address _bridge) external {
        zkBridge = _bridge;
    }

    function send(uint16 dstChainId, address dstAddress, bytes calldata payload) external payable {
        uint64 sequence = IZKBridge(zkBridge).send{value: msg.value}(
            dstChainId,
            dstAddress,
            payload
        );
        emit MessageSent(sequence);
    }

    function zkReceive(
        uint16 srcChainId,
        address srcAddress,
        uint64 sequence,
        bytes calldata payload
    ) external {
        emit MessageReceived(srcChainId, srcAddress, sequence, payload);
    }
}


// File: src/interfaces/IZKBridge.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IZKBridge {
    function send(
        uint16 dstChainId,
        address dstAddress,
        bytes memory payload
    ) external payable returns (uint64 sequence);
}


// File: src/interfaces/IZKBridgeReceiver.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IZKBridgeReceiver {
    // @notice ZKBridge endpoint will invoke this function to deliver the message on the destination
    // @param srcChainId - the source endpoint identifier
    // @param srcAddress - the source sending contract address from the source chain
    // @param sequence - the ordered message nonce
    // @param payload - the signed payload is the UA bytes has encoded to be sent
    function zkReceive(
        uint16 srcChainId,
        address srcAddress,
        uint64 sequence,
        bytes calldata payload
    ) external;
}

