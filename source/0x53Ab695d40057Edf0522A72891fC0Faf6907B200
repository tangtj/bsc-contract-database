
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/IPropNFTInfo.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

interface IPropNFTInfo {
    struct NFTInfo {
        uint256 tokenID;
        address community;
        uint256 amount;
        bool isClaimed;
    }
}

// File: contracts/PropTokenPresale.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./IPropNFTInfo.sol";

interface IPropNFT {
    function totalSupply() external view returns (uint256);

    function mint(address, uint256) external;

    function ownerOf(uint256) external view returns (address);
}

interface IPresale is IPropNFTInfo {
    function nftDetails(uint256) external view returns (NFTInfo memory);
}

contract PropTokenPresale is Ownable, IPropNFTInfo {
    address public constant propToken = 0xEc202b99b5ac4c48f3864cF159369ed1368B62DA;
    address public propNFT;

    address public busd = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;

    uint256 public constant PRICE = 0.0018 ether; // price of prop token of round1 in usdt

    uint256 public minBuyAmount = 10 ether; //at least have to buy 50 usdc

    uint256 public totalRaisedAmount; //busd amount

    uint8 public devFee = 3;
    uint8 public communityFee = 5;

    uint8 public unlockPercent;

    address devWallet = 0xcaB6769216D4acC9fE8f14716fe7421c2CCdd180;
    address treasuryWallet =
        0x40F3c98a3Bc57b21f4b8d2a36369a0A96F84cdDF;

    address public winCommunity;
    uint256 public prizeDeadline;

    bool public isActive = true;

    mapping(address => uint256) public communityRaisedAmount; //busd
    mapping(address => uint256) public communityNumber;
    mapping(address => mapping(address => bool)) isCommunityMember;

    mapping(uint256 => NFTInfo) public nftDetails;

    mapping(address => bool) public isRegistered;

    mapping(address => uint256) public lockedAmount;
    mapping(address => uint256) public withdrawAmount;

    event BoughtTokens(
        address buyer,
        address refer,
        uint256 value,
        uint256 nftID
    );

    event ClaimedReward(uint256 nftID);

    constructor(address _presale, address _propNFT) {
        propNFT = _propNFT;
        initNFTInfo(_presale);
    }

    function registerCommunity(address _leaderAddress) external onlyOwner {
        isRegistered[_leaderAddress] = true;
    }

    function setNFT(address _tokenAddr) public onlyOwner {
        propNFT = _tokenAddr;
    }

    function setBuyToken(address _tokenAddr) public onlyOwner {
        busd = _tokenAddr;
    }

    function setActive(bool _act) public onlyOwner {
        isActive = _act;
    }

    function buyTokens(address _refer, uint256 _busdAmount) public {
        require(isRegistered[_refer], "Invalid referral code.");
        require(_busdAmount >= minBuyAmount, "Have to buy more tokens.");
        require(isActive, "Already sold out!");

        IERC20(busd).transferFrom(
            msg.sender,
            treasuryWallet,
            (_busdAmount * (100 - devFee - communityFee)) / 100
        );
        IERC20(busd).transferFrom(
            msg.sender,
            devWallet,
            (_busdAmount * devFee) / 100
        );
        IERC20(busd).transferFrom(
            msg.sender,
            _refer,
            (_busdAmount * communityFee) / 100
        );

        uint256 propAmount = (_busdAmount / PRICE) * 10 ** 8;

        totalRaisedAmount += _busdAmount; // Increment raised amount

        lockedAmount[msg.sender] += propAmount;

        uint256 tokenID = IPropNFT(propNFT).totalSupply() + 1;

        NFTInfo memory nftInfo = NFTInfo(tokenID, _refer, propAmount, false);
        nftDetails[tokenID] = nftInfo;
        communityRaisedAmount[_refer] += _busdAmount;

        if (!isCommunityMember[msg.sender][_refer]) {
            isCommunityMember[msg.sender][_refer] = true;
            communityNumber[_refer]++;
        }

        IPropNFT(propNFT).mint(msg.sender, tokenID);

        emit BoughtTokens(msg.sender, _refer, propAmount, tokenID); // log event onto the blockchain
    }

    function claimReward(uint256 _tokenId) external {
        require(unlockPercent == 100, "Can't claim reward for now!");
        require(
            IPropNFT(propNFT).ownerOf(_tokenId) == msg.sender,
            "You are not the token owner!"
        );
        require(!nftDetails[_tokenId].isClaimed, "Already claimed!");
        require(
            nftDetails[_tokenId].community == winCommunity,
            "Not win community!"
        );

        require(
            block.timestamp <= prizeDeadline,
            "Can't claim reward any more."
        );

        IERC20(propToken).transfer(msg.sender, nftDetails[_tokenId].amount);

        nftDetails[_tokenId].isClaimed = true;

        emit ClaimedReward(_tokenId);
    }

    function initNFTInfo(address _presale) private {

        uint256 totalAmount = IPropNFT(propNFT).totalSupply();

        for (uint256 i = 1; i <= totalAmount; i++) {
            NFTInfo memory nftInfo = IPresale(_presale).nftDetails(i);
            nftDetails[i] = nftInfo;
            uint256 busdAmount = (nftInfo.amount * PRICE) / 10 ** 8;
            communityRaisedAmount[nftInfo.community] += busdAmount;
            
            totalRaisedAmount += busdAmount;
            
            address holder = IPropNFT(propNFT).ownerOf(nftInfo.tokenID);

            lockedAmount[holder] += nftInfo.amount;

            if (!isRegistered[nftInfo.community]) {
                isRegistered[nftInfo.community] = true;
            }

            if (!isCommunityMember[holder][nftInfo.community]) {
                isCommunityMember[holder][nftInfo.community] = true;
                communityNumber[nftInfo.community]++;
            }

            emit BoughtTokens(holder, nftInfo.community, nftInfo.amount, nftInfo.tokenID);
        }
    }

    function setUnlockPercent(uint8 _unlock) external onlyOwner {
        require(_unlock <= 100, "Invalid percent!");
        unlockPercent = _unlock;
    }

    function setReward(address _winner, uint256 _deadline) external onlyOwner {
        winCommunity = _winner;
        prizeDeadline = _deadline;
    }

    function claimPROPs(uint256 _amount) external {
        require(
            _amount <= getClaimableAmount(msg.sender),
            "Can't unlock that much amount!"
        );
        withdrawAmount[msg.sender] += _amount;
        IERC20(propToken).transfer(msg.sender, _amount);
    }

    function getClaimableAmount(address _holder) public view returns (uint256) {
        return
            (lockedAmount[_holder] * unlockPercent) /
            100 -
            withdrawAmount[_holder];
    }

    function resetDevWallet(address _newDev) external {
        require(msg.sender == devWallet, "Only dev can call this function!");
        devWallet = _newDev;
    }

    function resetTreasury(address _newTreasury) external onlyOwner() {
        treasuryWallet = _newTreasury;
    }

    function withdrawPROPs() external onlyOwner {
        uint256 restBalance = IERC20(propToken).balanceOf(address(this));
        IERC20(propToken).transfer(msg.sender, restBalance);
    }
}

