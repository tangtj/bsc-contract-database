{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/GSN/Context.sol\n// Subject to the MIT license.\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"},"EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/EnumerableSet.sol\r\n// Subject to the MIT license.\r\n\r\npragma solidity \u003e=0.6.0 \u003c0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 =\u003e uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value\u0027s index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as \u0027swap and pop\u0027).\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \u0027if\u0027 statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length \u003e index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}"},"IERC20.sol":{"content":"pragma solidity \u003e=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}"},"Migrations.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity \u003e=0.4.22 \u003c0.8.0;\r\n\r\ncontract Migrations {\r\n  address public owner = msg.sender;\r\n  uint public last_completed_migration;\r\n\r\n  modifier restricted() {\r\n    require(\r\n      msg.sender == owner,\r\n      \"This function is restricted to the contract\u0027s owner\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  function setCompleted(uint completed) public restricted {\r\n    last_completed_migration = completed;\r\n  }\r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\n// Subject to the MIT license.\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\nimport \"./Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"},"Presale01.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n// ALL RIGHTS RESERVED\r\n// Unicrypt reserves all rights on this code. You may NOT copy these contracts.\r\n\r\n// Forked from Ethereum mainnet for Pancakeswap on Binance Smart Chain with no code changes\r\n// WETH = WBNB\r\n// ETH = BNB\r\n\r\n// Presale contract. Version 1\r\n\r\n/**\r\n  Allows a decentralised presale to take place, and on success creates a uniswap pair and locks liquidity on Unicrypt.\r\n  B_TOKEN, or base token, is the token the presale attempts to raise. (Usally ETH).\r\n  S_TOKEN, or sale token, is the token being sold, which investors buy with the base token.\r\n  If the base currency is set to the WETH9 address, the presale is in ETH.\r\n  Otherwise it is for an ERC20 token - such as DAI, USDC, WBTC etc.\r\n  For the Base token - It is advised to only use tokens such as ETH (WETH), DAI, USDC or tokens that have no rebasing, or complex fee on transfers. 1 token should ideally always be 1 token.\r\n  Token withdrawls are done on a percent of total contribution basis (opposed to via a hardcoded \u0027amount\u0027). This allows \r\n  fee on transfer, rebasing, or any magically changing balances to still work for the Sale token.\r\n*/\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"./TransferHelper.sol\";\r\nimport \"./EnumerableSet.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./ReentrancyGuard.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IPresaleLockForwarder {\r\n    function lockLiquidity (IERC20 _baseToken, IERC20 _saleToken, uint256 _baseAmount, uint256 _saleAmount, uint256 _unlock_date, address payable _withdrawer) external;\r\n    function uniswapPairIsInitialised (address _token0, address _token1) external view returns (bool);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface IPresaleSettings {\r\n    function getMaxPresaleLength () external view returns (uint256);\r\n    function getRound1Length () external view returns (uint256);\r\n    function userHoldsSufficientRound1Token (address _user) external view returns (bool);\r\n    function referrerIsValid(address _referrer) external view returns (bool);\r\n    function getBaseFee () external view returns (uint256);\r\n    function getTokenFee () external view returns (uint256);\r\n    function getEthAddress () external view returns (address payable);\r\n    function getTokenAddress () external view returns (address payable);\r\n    function getReferralFee () external view returns (uint256);\r\n    function getEthCreationFee () external view returns (uint256);\r\n}\r\n\r\ncontract Presale01 is ReentrancyGuard {\r\n  using SafeMath for uint256;\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n  \r\n  /// @notice Presale Contract Version, used to choose the correct ABI to decode the contract\r\n  uint256 public CONTRACT_VERSION = 1;\r\n  \r\n  struct PresaleInfo {\r\n    address payable PRESALE_OWNER;\r\n    IERC20 S_TOKEN; // sale token\r\n    IERC20 B_TOKEN; // base token // usually WETH (ETH)\r\n    uint256 TOKEN_PRICE; // 1 base token = ? s_tokens, fixed price\r\n    uint256 MAX_SPEND_PER_BUYER; // maximum base token BUY amount per account\r\n    uint256 AMOUNT; // the amount of presale tokens up for presale\r\n    uint256 HARDCAP;\r\n    uint256 SOFTCAP;\r\n    uint256 LIQUIDITY_PERCENT; // divided by 1000\r\n    uint256 LISTING_RATE; // fixed rate at which the token will list on uniswap\r\n    uint256 START_BLOCK;\r\n    uint256 END_BLOCK;\r\n    uint256 LOCK_PERIOD; // unix timestamp -\u003e e.g. 2 weeks\r\n    bool PRESALE_IN_ETH; // if this flag is true the presale is raising ETH, otherwise an ERC20 token such as DAI\r\n  }\r\n  \r\n  struct PresaleFeeInfo {\r\n    uint256 UNICRYPT_BASE_FEE; // divided by 1000\r\n    uint256 UNICRYPT_TOKEN_FEE; // divided by 1000\r\n    uint256 REFERRAL_FEE; // divided by 1000\r\n    address payable BASE_FEE_ADDRESS;\r\n    address payable TOKEN_FEE_ADDRESS;\r\n    address payable REFERRAL_FEE_ADDRESS; // if this is not address(0), there is a valid referral\r\n  }\r\n  \r\n  struct PresaleStatus {\r\n    bool WHITELIST_ONLY; // if set to true only whitelisted members may participate\r\n    bool LP_GENERATION_COMPLETE; // final flag required to end a presale and enable withdrawls\r\n    bool FORCE_FAILED; // set this flag to force fail the presale\r\n    uint256 TOTAL_BASE_COLLECTED; // total base currency raised (usually ETH)\r\n    uint256 TOTAL_TOKENS_SOLD; // total presale tokens sold\r\n    uint256 TOTAL_TOKENS_WITHDRAWN; // total tokens withdrawn post successful presale\r\n    uint256 TOTAL_BASE_WITHDRAWN; // total base tokens withdrawn on presale failure\r\n    uint256 ROUND1_LENGTH; // in blocks\r\n    uint256 NUM_BUYERS; // number of unique participants\r\n  }\r\n\r\n  struct BuyerInfo {\r\n    uint256 baseDeposited; // total base token (usually ETH) deposited by user, can be withdrawn on presale failure\r\n    uint256 tokensOwed; // num presale tokens a user is owed, can be withdrawn on presale success\r\n  }\r\n  \r\n  PresaleInfo public PRESALE_INFO;\r\n  PresaleFeeInfo public PRESALE_FEE_INFO;\r\n  PresaleStatus public STATUS;\r\n  address public PRESALE_GENERATOR;\r\n  IPresaleLockForwarder public PRESALE_LOCK_FORWARDER;\r\n  IPresaleSettings public PRESALE_SETTINGS;\r\n  address UNICRYPT_DEV_ADDRESS;\r\n  IUniswapV2Factory public UNI_FACTORY;\r\n  IWETH public WETH;\r\n  mapping(address =\u003e BuyerInfo) public BUYERS;\r\n  EnumerableSet.AddressSet private WHITELIST;\r\n\r\n  constructor(address _presaleGenerator) public {\r\n    PRESALE_GENERATOR = _presaleGenerator;\r\n    UNI_FACTORY = IUniswapV2Factory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\r\n    WETH = IWETH(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\r\n    PRESALE_SETTINGS = IPresaleSettings(0x8a5e208C1cA217Db8Ee64e8d390CF1f25De35A4e);\r\n    PRESALE_LOCK_FORWARDER = IPresaleLockForwarder(0x46ae2bE0585e7f03d7A22411a76C0fd5CD24FCc3);\r\n    UNICRYPT_DEV_ADDRESS = 0x60e2E1b2a317EdfC870b6Fc6886F69083FB2099a;\r\n  }\r\n  \r\n  function init1 (\r\n    address payable _presaleOwner, \r\n    uint256 _amount,\r\n    uint256 _tokenPrice, \r\n    uint256 _maxEthPerBuyer, \r\n    uint256 _hardcap, \r\n    uint256 _softcap,\r\n    uint256 _liquidityPercent,\r\n    uint256 _listingRate,\r\n    uint256 _startblock,\r\n    uint256 _endblock,\r\n    uint256 _lockPeriod\r\n    ) external {\r\n          \r\n      require(msg.sender == PRESALE_GENERATOR, \u0027FORBIDDEN\u0027);\r\n      PRESALE_INFO.PRESALE_OWNER = _presaleOwner;\r\n      PRESALE_INFO.AMOUNT = _amount;\r\n      PRESALE_INFO.TOKEN_PRICE = _tokenPrice;\r\n      PRESALE_INFO.MAX_SPEND_PER_BUYER = _maxEthPerBuyer;\r\n      PRESALE_INFO.HARDCAP = _hardcap;\r\n      PRESALE_INFO.SOFTCAP = _softcap;\r\n      PRESALE_INFO.LIQUIDITY_PERCENT = _liquidityPercent;\r\n      PRESALE_INFO.LISTING_RATE = _listingRate;\r\n      PRESALE_INFO.START_BLOCK = _startblock;\r\n      PRESALE_INFO.END_BLOCK = _endblock;\r\n      PRESALE_INFO.LOCK_PERIOD = _lockPeriod;\r\n  }\r\n  \r\n  function init2 (\r\n    IERC20 _baseToken,\r\n    IERC20 _presaleToken,\r\n    uint256 _unicryptBaseFee,\r\n    uint256 _unicryptTokenFee,\r\n    uint256 _referralFee,\r\n    address payable _baseFeeAddress,\r\n    address payable _tokenFeeAddress,\r\n    address payable _referralAddress\r\n    ) external {\r\n          \r\n      require(msg.sender == PRESALE_GENERATOR, \u0027FORBIDDEN\u0027);\r\n      // require(!PRESALE_LOCK_FORWARDER.uniswapPairIsInitialised(address(_presaleToken), address(_baseToken)), \u0027PAIR INITIALISED\u0027);\r\n      \r\n      PRESALE_INFO.PRESALE_IN_ETH = address(_baseToken) == address(WETH);\r\n      PRESALE_INFO.S_TOKEN = _presaleToken;\r\n      PRESALE_INFO.B_TOKEN = _baseToken;\r\n      PRESALE_FEE_INFO.UNICRYPT_BASE_FEE = _unicryptBaseFee;\r\n      PRESALE_FEE_INFO.UNICRYPT_TOKEN_FEE = _unicryptTokenFee;\r\n      PRESALE_FEE_INFO.REFERRAL_FEE = _referralFee;\r\n      \r\n      PRESALE_FEE_INFO.BASE_FEE_ADDRESS = _baseFeeAddress;\r\n      PRESALE_FEE_INFO.TOKEN_FEE_ADDRESS = _tokenFeeAddress;\r\n      PRESALE_FEE_INFO.REFERRAL_FEE_ADDRESS = _referralAddress;\r\n      STATUS.ROUND1_LENGTH = PRESALE_SETTINGS.getRound1Length();\r\n  }\r\n  \r\n  modifier onlyPresaleOwner() {\r\n    require(PRESALE_INFO.PRESALE_OWNER == msg.sender, \"NOT PRESALE OWNER\");\r\n    _;\r\n  }\r\n  \r\n  function presaleStatus () public view returns (uint256) {\r\n    if (STATUS.FORCE_FAILED) {\r\n      return 3; // FAILED - force fail\r\n    }\r\n    if ((block.number \u003e PRESALE_INFO.END_BLOCK) \u0026\u0026 (STATUS.TOTAL_BASE_COLLECTED \u003c PRESALE_INFO.SOFTCAP)) {\r\n      return 3; // FAILED - softcap not met by end block\r\n    }\r\n    if (STATUS.TOTAL_BASE_COLLECTED \u003e= PRESALE_INFO.HARDCAP) {\r\n      return 2; // SUCCESS - hardcap met\r\n    }\r\n    if ((block.number \u003e PRESALE_INFO.END_BLOCK) \u0026\u0026 (STATUS.TOTAL_BASE_COLLECTED \u003e= PRESALE_INFO.SOFTCAP)) {\r\n      return 2; // SUCCESS - endblock and soft cap reached\r\n    }\r\n    if ((block.number \u003e= PRESALE_INFO.START_BLOCK) \u0026\u0026 (block.number \u003c= PRESALE_INFO.END_BLOCK)) {\r\n      return 1; // ACTIVE - deposits enabled\r\n    }\r\n    return 0; // QUED - awaiting start block\r\n  }\r\n  \r\n  // accepts msg.value for eth or _amount for ERC20 tokens\r\n  function userDeposit (uint256 _amount) external payable nonReentrant {\r\n    require(presaleStatus() == 1, \u0027NOT ACTIVE\u0027); // ACTIVE\r\n    if (STATUS.WHITELIST_ONLY) {\r\n      require(WHITELIST.contains(msg.sender), \u0027NOT WHITELISTED\u0027);\r\n    }\r\n    // Presale Round 1 - require participant to hold a certain token and balance\r\n    if (block.number \u003c PRESALE_INFO.START_BLOCK + STATUS.ROUND1_LENGTH) { // 276 blocks = 1 hour\r\n        require(PRESALE_SETTINGS.userHoldsSufficientRound1Token(msg.sender), \u0027INSUFFICENT ROUND 1 TOKEN BALANCE\u0027);\r\n    }\r\n    BuyerInfo storage buyer = BUYERS[msg.sender];\r\n    uint256 amount_in = PRESALE_INFO.PRESALE_IN_ETH ? msg.value : _amount;\r\n    uint256 allowance = PRESALE_INFO.MAX_SPEND_PER_BUYER.sub(buyer.baseDeposited);\r\n    uint256 remaining = PRESALE_INFO.HARDCAP - STATUS.TOTAL_BASE_COLLECTED;\r\n    allowance = allowance \u003e remaining ? remaining : allowance;\r\n    if (amount_in \u003e allowance) {\r\n      amount_in = allowance;\r\n    }\r\n    uint256 tokensSold = amount_in.mul(PRESALE_INFO.TOKEN_PRICE).div(10 ** uint256(PRESALE_INFO.B_TOKEN.decimals()));\r\n    require(tokensSold \u003e 0, \u0027ZERO TOKENS\u0027);\r\n    if (buyer.baseDeposited == 0) {\r\n        STATUS.NUM_BUYERS++;\r\n    }\r\n    buyer.baseDeposited = buyer.baseDeposited.add(amount_in);\r\n    buyer.tokensOwed = buyer.tokensOwed.add(tokensSold);\r\n    STATUS.TOTAL_BASE_COLLECTED = STATUS.TOTAL_BASE_COLLECTED.add(amount_in);\r\n    STATUS.TOTAL_TOKENS_SOLD = STATUS.TOTAL_TOKENS_SOLD.add(tokensSold);\r\n    \r\n    // return unused ETH\r\n    if (PRESALE_INFO.PRESALE_IN_ETH \u0026\u0026 amount_in \u003c msg.value) {\r\n      msg.sender.transfer(msg.value.sub(amount_in));\r\n    }\r\n    // deduct non ETH token from user\r\n    if (!PRESALE_INFO.PRESALE_IN_ETH) {\r\n      TransferHelper.safeTransferFrom(address(PRESALE_INFO.B_TOKEN), msg.sender, address(this), amount_in);\r\n    }\r\n  }\r\n  \r\n  // withdraw presale tokens\r\n  // percentile withdrawls allows fee on transfer or rebasing tokens to still work\r\n  function userWithdrawTokens () external nonReentrant {\r\n    require(STATUS.LP_GENERATION_COMPLETE, \u0027AWAITING LP GENERATION\u0027);\r\n    BuyerInfo storage buyer = BUYERS[msg.sender];\r\n    uint256 tokensRemainingDenominator = STATUS.TOTAL_TOKENS_SOLD.sub(STATUS.TOTAL_TOKENS_WITHDRAWN);\r\n    uint256 tokensOwed = PRESALE_INFO.S_TOKEN.balanceOf(address(this)).mul(buyer.tokensOwed).div(tokensRemainingDenominator);\r\n    require(tokensOwed \u003e 0, \u0027NOTHING TO WITHDRAW\u0027);\r\n    STATUS.TOTAL_TOKENS_WITHDRAWN = STATUS.TOTAL_TOKENS_WITHDRAWN.add(buyer.tokensOwed);\r\n    buyer.tokensOwed = 0;\r\n    TransferHelper.safeTransfer(address(PRESALE_INFO.S_TOKEN), msg.sender, tokensOwed);\r\n  }\r\n  \r\n  // on presale failure\r\n  // percentile withdrawls allows fee on transfer or rebasing tokens to still work\r\n  function userWithdrawBaseTokens () external nonReentrant {\r\n    require(presaleStatus() == 3, \u0027NOT FAILED\u0027); // FAILED\r\n    BuyerInfo storage buyer = BUYERS[msg.sender];\r\n    uint256 baseRemainingDenominator = STATUS.TOTAL_BASE_COLLECTED.sub(STATUS.TOTAL_BASE_WITHDRAWN);\r\n    uint256 remainingBaseBalance = PRESALE_INFO.PRESALE_IN_ETH ? address(this).balance : PRESALE_INFO.B_TOKEN.balanceOf(address(this));\r\n    uint256 tokensOwed = remainingBaseBalance.mul(buyer.baseDeposited).div(baseRemainingDenominator);\r\n    require(tokensOwed \u003e 0, \u0027NOTHING TO WITHDRAW\u0027);\r\n    STATUS.TOTAL_BASE_WITHDRAWN = STATUS.TOTAL_BASE_WITHDRAWN.add(buyer.baseDeposited);\r\n    buyer.baseDeposited = 0;\r\n    TransferHelper.safeTransferBaseToken(address(PRESALE_INFO.B_TOKEN), msg.sender, tokensOwed, !PRESALE_INFO.PRESALE_IN_ETH);\r\n  }\r\n  \r\n  // on presale failure\r\n  // allows the owner to withdraw the tokens they sent for presale \u0026 initial liquidity\r\n  function ownerWithdrawTokens () external onlyPresaleOwner {\r\n    require(presaleStatus() == 3); // FAILED\r\n    TransferHelper.safeTransfer(address(PRESALE_INFO.S_TOKEN), PRESALE_INFO.PRESALE_OWNER, PRESALE_INFO.S_TOKEN.balanceOf(address(this)));\r\n  }\r\n  \r\n\r\n  // Can be called at any stage before or during the presale to cancel it before it ends.\r\n  // If the pair already exists on uniswap and it contains the presale token as liquidity \r\n  // the final stage of the presale \u0027addLiquidity()\u0027 will fail. This function \r\n  // allows anyone to end the presale prematurely to release funds in such a case.\r\n  function forceFailIfPairExists () external {\r\n    require(!STATUS.LP_GENERATION_COMPLETE \u0026\u0026 !STATUS.FORCE_FAILED);\r\n    if (PRESALE_LOCK_FORWARDER.uniswapPairIsInitialised(address(PRESALE_INFO.S_TOKEN), address(PRESALE_INFO.B_TOKEN))) {\r\n        STATUS.FORCE_FAILED = true;\r\n    }\r\n  }\r\n  \r\n  // if something goes wrong in LP generation\r\n  function forceFailByUnicrypt () external {\r\n      require(msg.sender == UNICRYPT_DEV_ADDRESS);\r\n      STATUS.FORCE_FAILED = true;\r\n  }\r\n  \r\n  // on presale success, this is the final step to end the presale, lock liquidity and enable withdrawls of the sale token.\r\n  // This function does not use percentile distribution. Rebasing mechanisms, fee on transfers, or any deflationary logic\r\n  // are not taken into account at this stage to ensure stated liquidity is locked and the pool is initialised according to \r\n  // the presale parameters and fixed prices.\r\n  function addLiquidity() external nonReentrant {\r\n    require(!STATUS.LP_GENERATION_COMPLETE, \u0027GENERATION COMPLETE\u0027);\r\n    require(presaleStatus() == 2, \u0027NOT SUCCESS\u0027); // SUCCESS\r\n    // Fail the presale if the pair exists and contains presale token liquidity\r\n    if (PRESALE_LOCK_FORWARDER.uniswapPairIsInitialised(address(PRESALE_INFO.S_TOKEN), address(PRESALE_INFO.B_TOKEN))) {\r\n        STATUS.FORCE_FAILED = true;\r\n        return;\r\n    }\r\n    \r\n    uint256 unicryptBaseFee = STATUS.TOTAL_BASE_COLLECTED.mul(PRESALE_FEE_INFO.UNICRYPT_BASE_FEE).div(1000);\r\n    \r\n    // base token liquidity\r\n    uint256 baseLiquidity = STATUS.TOTAL_BASE_COLLECTED.sub(unicryptBaseFee).mul(PRESALE_INFO.LIQUIDITY_PERCENT).div(1000);\r\n    if (PRESALE_INFO.PRESALE_IN_ETH) {\r\n        WETH.deposit{value : baseLiquidity}();\r\n    }\r\n    TransferHelper.safeApprove(address(PRESALE_INFO.B_TOKEN), address(PRESALE_LOCK_FORWARDER), baseLiquidity);\r\n    \r\n    // sale token liquidity\r\n    uint256 tokenLiquidity = baseLiquidity.mul(PRESALE_INFO.LISTING_RATE).div(10 ** uint256(PRESALE_INFO.B_TOKEN.decimals()));\r\n    TransferHelper.safeApprove(address(PRESALE_INFO.S_TOKEN), address(PRESALE_LOCK_FORWARDER), tokenLiquidity);\r\n    \r\n    PRESALE_LOCK_FORWARDER.lockLiquidity(PRESALE_INFO.B_TOKEN, PRESALE_INFO.S_TOKEN, baseLiquidity, tokenLiquidity, block.timestamp + PRESALE_INFO.LOCK_PERIOD, PRESALE_INFO.PRESALE_OWNER);\r\n    \r\n    // transfer fees\r\n    uint256 unicryptTokenFee = STATUS.TOTAL_TOKENS_SOLD.mul(PRESALE_FEE_INFO.UNICRYPT_TOKEN_FEE).div(1000);\r\n    // referrals are checked for validity in the presale generator\r\n    if (PRESALE_FEE_INFO.REFERRAL_FEE_ADDRESS != address(0)) {\r\n        // Base token fee\r\n        uint256 referralBaseFee = unicryptBaseFee.mul(PRESALE_FEE_INFO.REFERRAL_FEE).div(1000);\r\n        TransferHelper.safeTransferBaseToken(address(PRESALE_INFO.B_TOKEN), PRESALE_FEE_INFO.REFERRAL_FEE_ADDRESS, referralBaseFee, !PRESALE_INFO.PRESALE_IN_ETH);\r\n        unicryptBaseFee = unicryptBaseFee.sub(referralBaseFee);\r\n        // Token fee\r\n        uint256 referralTokenFee = unicryptTokenFee.mul(PRESALE_FEE_INFO.REFERRAL_FEE).div(1000);\r\n        TransferHelper.safeTransfer(address(PRESALE_INFO.S_TOKEN), PRESALE_FEE_INFO.REFERRAL_FEE_ADDRESS, referralTokenFee);\r\n        unicryptTokenFee = unicryptTokenFee.sub(referralTokenFee);\r\n    }\r\n    TransferHelper.safeTransferBaseToken(address(PRESALE_INFO.B_TOKEN), PRESALE_FEE_INFO.BASE_FEE_ADDRESS, unicryptBaseFee, !PRESALE_INFO.PRESALE_IN_ETH);\r\n    TransferHelper.safeTransfer(address(PRESALE_INFO.S_TOKEN), PRESALE_FEE_INFO.TOKEN_FEE_ADDRESS, unicryptTokenFee);\r\n    \r\n    // burn unsold tokens\r\n    uint256 remainingSBalance = PRESALE_INFO.S_TOKEN.balanceOf(address(this));\r\n    if (remainingSBalance \u003e STATUS.TOTAL_TOKENS_SOLD) {\r\n        uint256 burnAmount = remainingSBalance.sub(STATUS.TOTAL_TOKENS_SOLD);\r\n        TransferHelper.safeTransfer(address(PRESALE_INFO.S_TOKEN), 0x000000000000000000000000000000000000dEaD, burnAmount);\r\n    }\r\n    \r\n    // send remaining base tokens to presale owner\r\n    uint256 remainingBaseBalance = PRESALE_INFO.PRESALE_IN_ETH ? address(this).balance : PRESALE_INFO.B_TOKEN.balanceOf(address(this));\r\n    TransferHelper.safeTransferBaseToken(address(PRESALE_INFO.B_TOKEN), PRESALE_INFO.PRESALE_OWNER, remainingBaseBalance, !PRESALE_INFO.PRESALE_IN_ETH);\r\n    \r\n    STATUS.LP_GENERATION_COMPLETE = true;\r\n  }\r\n  \r\n  function updateMaxSpendLimit(uint256 _maxSpend) external onlyPresaleOwner {\r\n    PRESALE_INFO.MAX_SPEND_PER_BUYER = _maxSpend;\r\n  }\r\n  \r\n  // postpone or bring a presale forward, this will only work when a presale is inactive.\r\n  // i.e. current start block \u003e block.number\r\n  function updateBlocks(uint256 _startBlock, uint256 _endBlock) external onlyPresaleOwner {\r\n    require(PRESALE_INFO.START_BLOCK \u003e block.number);\r\n    require(_endBlock.sub(_startBlock) \u003c= PRESALE_SETTINGS.getMaxPresaleLength());\r\n    PRESALE_INFO.START_BLOCK = _startBlock;\r\n    PRESALE_INFO.END_BLOCK = _endBlock;\r\n  }\r\n\r\n  // editable at any stage of the presale\r\n  function setWhitelistFlag(bool _flag) external onlyPresaleOwner {\r\n    STATUS.WHITELIST_ONLY = _flag;\r\n  }\r\n\r\n  // editable at any stage of the presale\r\n  function editWhitelist(address[] memory _users, bool _add) external onlyPresaleOwner {\r\n    if (_add) {\r\n        for (uint i = 0; i \u003c _users.length; i++) {\r\n          WHITELIST.add(_users[i]);\r\n        }\r\n    } else {\r\n        for (uint i = 0; i \u003c _users.length; i++) {\r\n          WHITELIST.remove(_users[i]);\r\n        }\r\n    }\r\n  }\r\n\r\n  // whitelist getters\r\n  function getWhitelistedUsersLength () external view returns (uint256) {\r\n    return WHITELIST.length();\r\n  }\r\n  \r\n  function getWhitelistedUserAtIndex (uint256 _index) external view returns (address) {\r\n    return WHITELIST.at(_index);\r\n  }\r\n  \r\n  function getUserWhitelistStatus (address _user) external view returns (bool) {\r\n    return WHITELIST.contains(_user);\r\n  }\r\n}"},"PresaleFactory.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n// ALL RIGHTS RESERVED\r\n// Unicrypt reserves all rights on this code. You may NOT copy these contracts.\r\n\r\n// Forked from Ethereum mainnet for Pancakeswap on Binance Smart Chain with no code changes\r\n// WETH = WBNB\r\n// ETH = BNB\r\n\r\n// This contract logs all presales on the platform\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./EnumerableSet.sol\";\r\n\r\ncontract PresaleFactory is Ownable {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    \r\n    EnumerableSet.AddressSet private presales;\r\n    EnumerableSet.AddressSet private presaleGenerators;\r\n    \r\n    mapping(address =\u003e EnumerableSet.AddressSet) private presaleOwners;\r\n    \r\n    event presaleRegistered(address presaleContract);\r\n    \r\n    function adminAllowPresaleGenerator (address _address, bool _allow) public onlyOwner {\r\n        if (_allow) {\r\n            presaleGenerators.add(_address);\r\n        } else {\r\n            presaleGenerators.remove(_address);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @notice called by a registered PresaleGenerator upon Presale creation\r\n     */\r\n    function registerPresale (address _presaleAddress) public {\r\n        require(presaleGenerators.contains(msg.sender), \u0027FORBIDDEN\u0027);\r\n        presales.add(_presaleAddress);\r\n        emit presaleRegistered(_presaleAddress);\r\n    }\r\n    \r\n    /**\r\n     * @notice Number of allowed PresaleGenerators\r\n     */\r\n    function presaleGeneratorsLength() external view returns (uint256) {\r\n        return presaleGenerators.length();\r\n    }\r\n    \r\n    /**\r\n     * @notice Gets the address of a registered PresaleGenerator at specified index\r\n     */\r\n    function presaleGeneratorAtIndex(uint256 _index) external view returns (address) {\r\n        return presaleGenerators.at(_index);\r\n    }\r\n    \r\n    /**\r\n     * @notice returns true if the presale address was generated by the Unicrypt presale platform\r\n     */\r\n    function presaleIsRegistered(address _presaleAddress) external view returns (bool) {\r\n        return presales.contains(_presaleAddress);\r\n    }\r\n    \r\n    /**\r\n     * @notice The length of all presales on the platform\r\n     */\r\n    function presalesLength() external view returns (uint256) {\r\n        return presales.length();\r\n    }\r\n    \r\n    /**\r\n     * @notice gets a presale at a specific index. Although using Enumerable Set, since presales are only added and not removed, indexes will never change\r\n     * @return the address of the Presale contract at index\r\n     */\r\n    function presaleAtIndex(uint256 _index) external view returns (address) {\r\n        return presales.at(_index);\r\n    }\r\n    \r\n}"},"PresaleGenerator01.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n// ALL RIGHTS RESERVED\r\n// Unicrypt reserves all rights on this code. You may NOT copy these contracts.\r\n\r\n// Forked from Ethereum mainnet for Pancakeswap on Binance Smart Chain with no code changes\r\n// WETH = WBNB\r\n// ETH = BNB\r\n\r\n// This contract generates Presale01 contracts and registers them in the PresaleFactory.\r\n// Ideally you should not interact with this contract directly, and use the Unicrypt presale app instead so warnings can be shown where necessary.\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"./Presale01.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./TransferHelper.sol\";\r\nimport \"./PresaleHelper.sol\";\r\n\r\ninterface IPresaleFactory {\r\n    function registerPresale (address _presaleAddress) external;\r\n    function presaleIsRegistered(address _presaleAddress) external view returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Locker {\r\n    function lockLPToken (address _lpToken, uint256 _amount, uint256 _unlock_date, address payable _referral, bool _fee_in_eth, address payable _withdrawer) external payable;\r\n}\r\n\r\ncontract PresaleGenerator01 is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    IPresaleFactory public PRESALE_FACTORY;\r\n    IPresaleSettings public PRESALE_SETTINGS;\r\n    \r\n    struct PresaleParams {\r\n        uint256 amount;\r\n        uint256 tokenPrice;\r\n        uint256 maxSpendPerBuyer;\r\n        uint256 hardcap;\r\n        uint256 softcap;\r\n        uint256 liquidityPercent;\r\n        uint256 listingRate; // sale token listing price on uniswap\r\n        uint256 startblock;\r\n        uint256 endblock;\r\n        uint256 lockPeriod;\r\n    }\r\n    \r\n    constructor() public {\r\n        PRESALE_FACTORY = IPresaleFactory(0x206EC1d1C0147f5B2b8D302901Bfb6b7CBFAcb09);\r\n        PRESALE_SETTINGS = IPresaleSettings(0x8a5e208C1cA217Db8Ee64e8d390CF1f25De35A4e);\r\n    }\r\n    \r\n    /**\r\n     * @notice Creates a new Presale contract and registers it in the PresaleFactory.sol.\r\n     */\r\n    function createPresale (\r\n      address payable _presaleOwner,\r\n      IERC20 _presaleToken,\r\n      IERC20 _baseToken,\r\n      address payable _referralAddress,\r\n      uint256[10] memory uint_params\r\n      ) public payable {\r\n        \r\n        PresaleParams memory params;\r\n        params.amount = uint_params[0];\r\n        params.tokenPrice = uint_params[1];\r\n        params.maxSpendPerBuyer = uint_params[2];\r\n        params.hardcap = uint_params[3];\r\n        params.softcap = uint_params[4];\r\n        params.liquidityPercent = uint_params[5];\r\n        params.listingRate = uint_params[6];\r\n        params.startblock = uint_params[7];\r\n        params.endblock = uint_params[8];\r\n        params.lockPeriod = uint_params[9];\r\n        \r\n        if (params.lockPeriod \u003c 4 weeks) {\r\n            params.lockPeriod = 4 weeks;\r\n        }\r\n        \r\n        // Charge ETH fee for contract creation\r\n        require(msg.value == PRESALE_SETTINGS.getEthCreationFee(), \u0027FEE NOT MET\u0027);\r\n        PRESALE_SETTINGS.getEthAddress().transfer(PRESALE_SETTINGS.getEthCreationFee());\r\n        \r\n        if (_referralAddress != address(0)) {\r\n            require(PRESALE_SETTINGS.referrerIsValid(_referralAddress), \u0027INVALID REFERRAL\u0027);\r\n        }\r\n        \r\n        require(params.amount \u003e= 10000, \u0027MIN DIVIS\u0027); // minimum divisibility\r\n        require(params.endblock.sub(params.startblock) \u003c= PRESALE_SETTINGS.getMaxPresaleLength());\r\n        require(params.tokenPrice.mul(params.hardcap) \u003e 0, \u0027INVALID PARAMS\u0027); // ensure no overflow for future calculations\r\n        require(params.liquidityPercent \u003e= 300 \u0026\u0026 params.liquidityPercent \u003c= 1000, \u0027MIN LIQUIDITY\u0027); // 30% minimum liquidity lock\r\n        \r\n        uint256 tokensRequiredForPresale = PresaleHelper.calculateAmountRequired(params.amount, params.tokenPrice, params.listingRate, params.liquidityPercent, PRESALE_SETTINGS.getTokenFee());\r\n      \r\n        Presale01 newPresale = new Presale01(address(this));\r\n        TransferHelper.safeTransferFrom(address(_presaleToken), address(msg.sender), address(newPresale), tokensRequiredForPresale);\r\n        newPresale.init1(_presaleOwner, params.amount, params.tokenPrice, params.maxSpendPerBuyer, params.hardcap, params.softcap, \r\n        params.liquidityPercent, params.listingRate, params.startblock, params.endblock, params.lockPeriod);\r\n        newPresale.init2(_baseToken, _presaleToken, PRESALE_SETTINGS.getBaseFee(), PRESALE_SETTINGS.getTokenFee(), PRESALE_SETTINGS.getReferralFee(), PRESALE_SETTINGS.getEthAddress(), PRESALE_SETTINGS.getTokenAddress(), _referralAddress);\r\n        PRESALE_FACTORY.registerPresale(address(newPresale));\r\n    }\r\n    \r\n}"},"PresaleHelper.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.6.12;\r\n\r\n// A simple library for initial presale parameter calculations\r\nimport \"./SafeMath.sol\";\r\n\r\nlibrary PresaleHelper {\r\n    using SafeMath for uint256;\r\n    \r\n    function calculateAmountRequired (uint256 _amount, uint256 _tokenPrice, uint256 _listingRate, uint256 _liquidityPercent, uint256 _tokenFee) public pure returns (uint256) {\r\n        uint256 listingRatePercent = _listingRate.mul(1000).div(_tokenPrice);\r\n        uint256 unicryptTokenFee = _amount.mul(_tokenFee).div(1000);\r\n        uint256 amountMinusFee = _amount.sub(unicryptTokenFee);\r\n        uint256 liquidityRequired = amountMinusFee.mul(_liquidityPercent).mul(listingRatePercent).div(1000000);\r\n        uint256 tokensRequiredForPresale = _amount.add(liquidityRequired).add(unicryptTokenFee);\r\n        return tokensRequiredForPresale;\r\n    }\r\n}"},"PresaleLockForwarder.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n// ALL RIGHTS RESERVED\r\n// Unicrypt reserves all rights on this code. You may NOT copy these contracts.\r\n\r\n// Forked from Ethereum mainnet for Pancakeswap on Binance Smart Chain with no code changes\r\n// WETH = WBNB\r\n// ETH = BNB\r\n\r\n/**\r\n    This contract creates the lock on behalf of each presale. This contract will be whitelisted to bypass the flat rate \r\n    ETH fee. Please do not use the below locking code in your own contracts as the lock will fail without the ETH fee\r\n*/\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./TransferHelper.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\ninterface IPresaleFactory {\r\n    function registerPresale (address _presaleAddress) external;\r\n    function presaleIsRegistered(address _presaleAddress) external view returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Locker {\r\n    function lockLPToken (address _lpToken, uint256 _amount, uint256 _unlock_date, address payable _referral, bool _fee_in_eth, address payable _withdrawer) external payable;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ncontract PresaleLockForwarder is Ownable {\r\n    \r\n    IPresaleFactory public PRESALE_FACTORY;\r\n    IUniswapV2Locker public UNICRYPT_LOCKER;\r\n    IUniswapV2Factory public UNI_FACTORY;\r\n    \r\n    constructor() public {\r\n        PRESALE_FACTORY = IPresaleFactory(0x206EC1d1C0147f5B2b8D302901Bfb6b7CBFAcb09);\r\n        UNICRYPT_LOCKER = IUniswapV2Locker(0xC765bddB93b0D1c1A88282BA0fa6B2d00E3e0c83);\r\n        UNI_FACTORY = IUniswapV2Factory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\r\n    }\r\n\r\n    /**\r\n        Send in _token0 as the PRESALE token, _token1 as the BASE token (usually WETH) for the check to work. As anyone can create a pair,\r\n        and send WETH to it while a presale is running, but no one should have access to the presale token. If they do and they send it to \r\n        the pair, scewing the initial liquidity, this function will return true\r\n    */\r\n    function uniswapPairIsInitialised (address _token0, address _token1) public view returns (bool) {\r\n        address pairAddress = UNI_FACTORY.getPair(_token0, _token1);\r\n        if (pairAddress == address(0)) {\r\n            return false;\r\n        }\r\n        uint256 balance = IERC20(_token0).balanceOf(pairAddress);\r\n        if (balance \u003e 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function lockLiquidity (IERC20 _baseToken, IERC20 _saleToken, uint256 _baseAmount, uint256 _saleAmount, uint256 _unlock_date, address payable _withdrawer) external {\r\n        require(PRESALE_FACTORY.presaleIsRegistered(msg.sender), \u0027PRESALE NOT REGISTERED\u0027);\r\n        address pair = UNI_FACTORY.getPair(address(_baseToken), address(_saleToken));\r\n        if (pair == address(0)) {\r\n            UNI_FACTORY.createPair(address(_baseToken), address(_saleToken));\r\n            pair = UNI_FACTORY.getPair(address(_baseToken), address(_saleToken));\r\n        }\r\n        \r\n        TransferHelper.safeTransferFrom(address(_baseToken), msg.sender, address(pair), _baseAmount);\r\n        TransferHelper.safeTransferFrom(address(_saleToken), msg.sender, address(pair), _saleAmount);\r\n        IUniswapV2Pair(pair).mint(address(this));\r\n        uint256 totalLPTokensMinted = IUniswapV2Pair(pair).balanceOf(address(this));\r\n        require(totalLPTokensMinted != 0 , \"LP creation failed\");\r\n    \r\n        TransferHelper.safeApprove(pair, address(UNICRYPT_LOCKER), totalLPTokensMinted);\r\n        uint256 unlock_date = _unlock_date \u003e 9999999999 ? 9999999999 : _unlock_date;\r\n        UNICRYPT_LOCKER.lockLPToken(pair, totalLPTokensMinted, unlock_date, address(0), true, _withdrawer);\r\n    }\r\n    \r\n}"},"PresaleSettings.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n// ALL RIGHTS RESERVED\r\n// Unicrypt reserves all rights on this code. You may NOT copy these contracts.\r\n\r\n// Forked from Ethereum mainnet for Pancakeswap on Binance Smart Chain with no code changes\r\n// WETH = WBNB\r\n// ETH = BNB\r\n\r\n// Settings to initialize presale contracts and edit fees.\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./EnumerableSet.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\ncontract PresaleSettings is Ownable {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    \r\n    EnumerableSet.AddressSet private EARLY_ACCESS_TOKENS;\r\n    mapping(address =\u003e uint256) public EARLY_ACCESS_MAP;\r\n    \r\n    EnumerableSet.AddressSet private ALLOWED_REFERRERS;\r\n    \r\n    struct Settings {\r\n        uint256 BASE_FEE; // base fee divided by 1000\r\n        uint256 TOKEN_FEE; // token fee divided by 1000\r\n        uint256 REFERRAL_FEE; // a referrals percentage of the presale profits divided by 1000\r\n        address payable ETH_FEE_ADDRESS;\r\n        address payable TOKEN_FEE_ADDRESS;\r\n        uint256 ETH_CREATION_FEE; // fee to generate a presale contract on the platform\r\n        uint256 ROUND1_LENGTH; // length of round 1 in blocks\r\n        uint256 MAX_PRESALE_LENGTH; // maximum difference between start and endblock\r\n    }\r\n    \r\n    Settings public SETTINGS;\r\n    \r\n    constructor() public {\r\n        SETTINGS.BASE_FEE = 18; // 1.8%\r\n        SETTINGS.TOKEN_FEE = 18; // 1.8%\r\n        SETTINGS.REFERRAL_FEE = 200; // 20%\r\n        SETTINGS.ETH_CREATION_FEE = 1e18;\r\n        SETTINGS.ETH_FEE_ADDRESS = msg.sender;\r\n        SETTINGS.TOKEN_FEE_ADDRESS = msg.sender;\r\n        SETTINGS.ROUND1_LENGTH = 533; // 553 blocks = 2 hours\r\n        SETTINGS.MAX_PRESALE_LENGTH = 93046; // 2 weeks\r\n    }\r\n    \r\n    function getRound1Length () external view returns (uint256) {\r\n        return SETTINGS.ROUND1_LENGTH;\r\n    }\r\n\r\n    function getMaxPresaleLength () external view returns (uint256) {\r\n        return SETTINGS.MAX_PRESALE_LENGTH;\r\n    }\r\n    \r\n    function getBaseFee () external view returns (uint256) {\r\n        return SETTINGS.BASE_FEE;\r\n    }\r\n    \r\n    function getTokenFee () external view returns (uint256) {\r\n        return SETTINGS.TOKEN_FEE;\r\n    }\r\n    \r\n    function getReferralFee () external view returns (uint256) {\r\n        return SETTINGS.REFERRAL_FEE;\r\n    }\r\n    \r\n    function getEthCreationFee () external view returns (uint256) {\r\n        return SETTINGS.ETH_CREATION_FEE;\r\n    }\r\n    \r\n    function getEthAddress () external view returns (address payable) {\r\n        return SETTINGS.ETH_FEE_ADDRESS;\r\n    }\r\n    \r\n    function getTokenAddress () external view returns (address payable) {\r\n        return SETTINGS.TOKEN_FEE_ADDRESS;\r\n    }\r\n    \r\n    function setFeeAddresses(address payable _ethAddress, address payable _tokenFeeAddress) external onlyOwner {\r\n        SETTINGS.ETH_FEE_ADDRESS = _ethAddress;\r\n        SETTINGS.TOKEN_FEE_ADDRESS = _tokenFeeAddress;\r\n    }\r\n    \r\n    function setFees(uint256 _baseFee, uint256 _tokenFee, uint256 _ethCreationFee, uint256 _referralFee) external onlyOwner {\r\n        SETTINGS.BASE_FEE = _baseFee;\r\n        SETTINGS.TOKEN_FEE = _tokenFee;\r\n        SETTINGS.REFERRAL_FEE = _referralFee;\r\n        SETTINGS.ETH_CREATION_FEE = _ethCreationFee;\r\n    }\r\n    \r\n    function setRound1Length(uint256 _round1Length) external onlyOwner {\r\n        SETTINGS.ROUND1_LENGTH = _round1Length;\r\n    }\r\n\r\n    function setMaxPresaleLength(uint256 _maxLength) external onlyOwner {\r\n        SETTINGS.MAX_PRESALE_LENGTH = _maxLength;\r\n    }\r\n    \r\n    function editAllowedReferrers(address payable _referrer, bool _allow) external onlyOwner {\r\n        if (_allow) {\r\n            ALLOWED_REFERRERS.add(_referrer);\r\n        } else {\r\n            ALLOWED_REFERRERS.remove(_referrer);\r\n        }\r\n    }\r\n    \r\n    function editEarlyAccessTokens(address _token, uint256 _holdAmount, bool _allow) external onlyOwner {\r\n        if (_allow) {\r\n            EARLY_ACCESS_TOKENS.add(_token);\r\n        } else {\r\n            EARLY_ACCESS_TOKENS.remove(_token);\r\n        }\r\n        EARLY_ACCESS_MAP[_token] = _holdAmount;\r\n    }\r\n    \r\n    // there will never be more than 10 items in this array. Care for gas limits will be taken.\r\n    // We are aware too many tokens in this unbounded array results in out of gas errors.\r\n    function userHoldsSufficientRound1Token (address _user) external view returns (bool) {\r\n        if (earlyAccessTokensLength() == 0) {\r\n            return true;\r\n        }\r\n        for (uint i = 0; i \u003c earlyAccessTokensLength(); i++) {\r\n          (address token, uint256 amountHold) = getEarlyAccessTokenAtIndex(i);\r\n          if (IERC20(token).balanceOf(_user) \u003e= amountHold) {\r\n              return true;\r\n          }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function getEarlyAccessTokenAtIndex(uint256 _index) public view returns (address, uint256) {\r\n        address tokenAddress = EARLY_ACCESS_TOKENS.at(_index);\r\n        return (tokenAddress, EARLY_ACCESS_MAP[tokenAddress]);\r\n    }\r\n    \r\n    function earlyAccessTokensLength() public view returns (uint256) {\r\n        return EARLY_ACCESS_TOKENS.length();\r\n    }\r\n    \r\n    // Referrers\r\n    function allowedReferrersLength() external view returns (uint256) {\r\n        return ALLOWED_REFERRERS.length();\r\n    }\r\n    \r\n    function getReferrerAtIndex(uint256 _index) external view returns (address) {\r\n        return ALLOWED_REFERRERS.at(_index);\r\n    }\r\n    \r\n    function referrerIsValid(address _referrer) external view returns (bool) {\r\n        return ALLOWED_REFERRERS.contains(_referrer);\r\n    }\r\n    \r\n}"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\r\n// Subject to the MIT license.\r\n\r\npragma solidity \u003e=0.6.0 \u003c0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler\u0027s defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\r\n// Subject to the MIT license.\r\n\r\npragma solidity \u003e=0.6.0 \u003c0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"},"TransferHelper.sol":{"content":"pragma solidity 0.6.12;\r\n\r\n/**\r\n    helper methods for interacting with ERC20 tokens that do not consistently return true/false\r\n    with the addition of a transfer function to send eth or an erc20 token\r\n*/\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: APPROVE_FAILED\u0027);\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: TRANSFER_FAILED\u0027);\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: TRANSFER_FROM_FAILED\u0027);\r\n    }\r\n    \r\n    // sends ETH or an erc20 token\r\n    function safeTransferBaseToken(address token, address payable to, uint value, bool isERC20) internal {\r\n        if (!isERC20) {\r\n            to.transfer(value);\r\n        } else {\r\n            (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n            require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: TRANSFER_FAILED\u0027);\r\n        }\r\n    }\r\n}"}}