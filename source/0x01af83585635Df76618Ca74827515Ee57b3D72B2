{"Address.sol":{"content":"/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance \u003e= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance \u003e= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) =\r\n            target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}"},"BabyShibaRocket.sol":{"content":"import \"./Context.sol\";\r\nimport \"./Interfaces.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Address.sol\";\r\n\r\n/**\r\n */\r\n\r\npragma solidity ^0.8.5;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\n ________  ________  ________      ___    ___      ________  ___  ___  ___  ________  ________          ________  ________  ________  ___  __    _______  _________   \r\n|\\   __  \\|\\   __  \\|\\   __  \\    |\\  \\  /  /|    |\\   ____\\|\\  \\|\\  \\|\\  \\|\\   __  \\|\\   __  \\        |\\   __  \\|\\   __  \\|\\   ____\\|\\  \\|\\  \\ |\\  ___ \\|\\___   ___\\ \r\n\\ \\  \\|\\ /\\ \\  \\|\\  \\ \\  \\|\\ /_   \\ \\  \\/  / /    \\ \\  \\___|\\ \\  \\\\\\  \\ \\  \\ \\  \\|\\ /\\ \\  \\|\\  \\       \\ \\  \\|\\  \\ \\  \\|\\  \\ \\  \\___|\\ \\  \\/  /|\\ \\   __/\\|___ \\  \\_| \r\n \\ \\   __  \\ \\   __  \\ \\   __  \\   \\ \\    / /      \\ \\_____  \\ \\   __  \\ \\  \\ \\   __  \\ \\   __  \\       \\ \\   _  _\\ \\  \\\\\\  \\ \\  \\    \\ \\   ___  \\ \\  \\_|/__  \\ \\  \\  \r\n  \\ \\  \\|\\  \\ \\  \\ \\  \\ \\  \\|\\  \\   \\/  /  /        \\|____|\\  \\ \\  \\ \\  \\ \\  \\ \\  \\|\\  \\ \\  \\ \\  \\       \\ \\  \\\\  \\\\ \\  \\\\\\  \\ \\  \\____\\ \\  \\\\ \\  \\ \\  \\_|\\ \\  \\ \\  \\ \r\n   \\ \\_______\\ \\__\\ \\__\\ \\_______\\__/  / /            ____\\_\\  \\ \\__\\ \\__\\ \\__\\ \\_______\\ \\__\\ \\__\\       \\ \\__\\\\ _\\\\ \\_______\\ \\_______\\ \\__\\\\ \\__\\ \\_______\\  \\ \\__\\\r\n    \\|_______|\\|__|\\|__|\\|_______|\\___/ /            |\\_________\\|__|\\|__|\\|__|\\|_______|\\|__|\\|__|        \\|__|\\|__|\\|_______|\\|_______|\\|__| \\|__|\\|_______|   \\|__|\r\n                                 \\|___|/             \\|_________|                                                                                                     \r\n                                                                                                                                                                     \r\n    Check the website : https://babyshibarocket.finance\r\n    Check the telegram : https://t.me/babyshibarocket_official\r\n*/\r\n\r\n/**\r\n * Clarifications\r\n * \r\n *  - every transfer is taxed 10% -\u003e 1% to holders, 1% to LP, 4% to the BNB printer and 4% to manual buyback\r\n *  - the LP tax is accumulated in the contract, when it reaches a threshold half of those rewards are sold \r\n *      in V2 and the resulting BNB + remainder of rewards is added to V2 LP (the LP tokens are held by the owner,\r\n *      which is the dead address if ownership is renounced). that way LP grows and price is less volatile.\r\n *  - the supply is 1 quadrillion \r\n *  - there is only an owner. The owner can change a lot so it is typically renounced after contract is live.\r\n * \r\n */\r\ncontract BabyShibaRocket is Context, IERC20, Ownable {\r\n    \r\n    // Settings for the contract (supply, taxes, ...)\r\n    address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address public _buyBackAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address public _claimerAddress = 0x000000000000000000000000000000000000dEaD;\r\n    IClaimer public claimer;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 1000000000 * 10**6 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name = \"BabyShibaRocket\";\r\n    string private _symbol = \"BSR\";\r\n    uint8 private _decimals = 9;\r\n\r\n    uint256 public _taxFee = 10; \r\n    uint256 private _previousTaxFee = _taxFee;\r\n\r\n    uint256 public _liquidityFee = 10;\r\n    uint256 private _previousLiquidityFee = _liquidityFee;\r\n    \r\n    uint256 public _rewardFee = 40;\r\n    uint256 private _previousRewardFee = _rewardFee;\r\n\r\n    uint256 public _buyBackFee = 40;\r\n    uint256 private _previousBuybackFee = _buyBackFee;\r\n    uint256 private minForGas = 4 * 10**15;\r\n\r\n    uint256 public _maxTxAmount = 3 * 10**13 * 10**9; // can\u0027t buy more than this at a time\r\n    uint256 public _minimumTokensBeforeSwapAndLiquify = 5 * 10**11 * 10**9;\r\n    uint256 private buyBackUpperLimit = 1 * 10**18; // buyback in wei\r\n    uint256 private buyBackDivisor = 10;\r\n    \r\n    uint256 private _BNBRewards = 0;\r\n    \r\n    // \r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address =\u003e uint256) private _rOwned;\r\n    mapping(address =\u003e uint256) private _tOwned;\r\n    mapping(address =\u003e uint256) private _claimed;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    mapping(address =\u003e bool) private _isExcludedFromFee;\r\n\r\n    mapping(address =\u003e bool) private _isExcluded;\r\n    address[] private _excluded;\r\n    \r\n    mapping(address =\u003e bool) private _isRemoved;\r\n\r\n    IUniswapV2Router02 public pancakeswapV2Router; // Formerly immutable\r\n    address public pancakeswapV2Pair; // Formerly immutable\r\n    // Testnet (not working) : 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\r\n    // Testnet (working) : 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\r\n    // V1 : 0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F\r\n    // V2 : 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n    address public _routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E; \r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true; // Toggle swap \u0026 liquify on and off\r\n    bool public buyBackEnabled = false;\r\n    bool public tradingEnabled = false; // To avoid snipers\r\n    bool public whaleProtectionEnabled = false; // To avoid whales\r\n    bool public transferClaimedEnabled = true; // To transfer claim rights back and forth\r\n    bool public progressiveFeeEnabled = false; // The default is a fixed tax scheme\r\n    bool public doSwapForRouter = false; // Toggle swap \u0026 liquify on and off for transactions to / from the router\r\n\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event BuyBackEnabledUpdated(bool enabled);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(uint256 tokens,uint256 bnb);\r\n    event BuyBackFeeSent(address to, uint256 bnbSent);\r\n    event ClaimFeeSent(address to, uint256 bnbSent);\r\n    event BuyBackAddressSet(address buybackAddress);\r\n    event ClaimAddressSet(address claimAddress);\r\n    event SwapETHForTokens(uint256 amountIn,address[] path);\r\n    event AddedBNBReward(uint256 bnb);\r\n    event ProgressiveFeeEnabled(bool enabled);\r\n    event DoSwapForRouterEnabled(bool enabled);\r\n    event TradingEnabled(bool enabled);\r\n    event WhaleProtectionEnabled(bool enabled);\r\n    event TransferClaimedEnabled(bool enabled);\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor() {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        // IUniswapV2Router02 _pancakeswapV2Router = IUniswapV2Router02(_routerAddress); // Initialize router\r\n        // pancakeswapV2Pair = IUniswapV2Factory(_pancakeswapV2Router.factory()).createPair(address(this), _pancakeswapV2Router.WETH());\r\n        // pancakeswapV2Router = _pancakeswapV2Router;\r\n        _isExcludedFromFee[owner()] = true; // Owner doesn\u0027t pay fees (e.g. when adding liquidity)\r\n        _isExcludedFromFee[address(this)] = true; // Contract address doesn\u0027t pay fees\r\n        //claimer = IClaimer(_claimerAddress);\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n    \r\n    function isRemoved(address account) public view returns (bool) {\r\n        return _isRemoved[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function buyBackUpperLimitAmount() public view returns (uint256) {\r\n        return buyBackUpperLimit;\r\n    }\r\n\r\n    function buyBackDivisorAmount() public view returns (uint256) {\r\n        return buyBackDivisor;\r\n    }\r\n\r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(\r\n            !_isExcluded[sender],\r\n            \"Excluded addresses cannot call this function\"\r\n        );\r\n        (uint256 rAmount, , , , , ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns (uint256) {\r\n        require(tAmount \u003c= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount, , , , , ) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (, uint256 rTransferAmount, , , , ) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\r\n        require(\r\n            rAmount \u003c= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner() {\r\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, \u0027We can not exclude Uniswap router.\u0027);\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if (_rOwned[account] \u003e 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n    \r\n    function removeAccount(address account) public onlyOwner() {\r\n        require(!_isRemoved[account], \"Account is already removed\");\r\n        _isRemoved[account] = true;\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function setTaxFeePromille(uint256 taxFee) external onlyOwner() {\r\n        _taxFee = taxFee;\r\n    }\r\n\r\n    function setLiquidityFeePromille(uint256 liquidityFee) external onlyOwner() {\r\n        _liquidityFee = liquidityFee;\r\n    }\r\n    \r\n    function setRewardFeePromille(uint256 rewardFee) external onlyOwner() {\r\n        _rewardFee = rewardFee;\r\n    }\r\n\r\n    function setClaimerAddress(address claimerAddress) external onlyOwner() {\r\n        _claimerAddress = claimerAddress;\r\n        claimer = IClaimer(_claimerAddress);\r\n        emit ClaimAddressSet(_claimerAddress);\r\n    }\r\n\r\n    function setBuybackAddress(address buybackAddress) external onlyOwner() {\r\n        _buyBackAddress = buybackAddress;\r\n        emit BuyBackAddressSet(_buyBackAddress);\r\n    }\r\n\r\n    function setBuyBackFeePromille(uint256 buyBackFee) external onlyOwner() {\r\n        _buyBackFee = buyBackFee;\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);\r\n    }\r\n    \r\n    function setMinimumTokensBeforeSwapAndLiquify(uint256 minimumTokensBeforeSwapAndLiquify) external onlyOwner() {\r\n        _minimumTokensBeforeSwapAndLiquify = minimumTokensBeforeSwapAndLiquify;\r\n    }\r\n\r\n    function setBuybackUpperLimit(uint256 buyBackLimit) external onlyOwner() {\r\n        buyBackUpperLimit = buyBackLimit * 10**18;\r\n    }\r\n\r\n    function setBuybackDivisor(uint256 divisor) external onlyOwner() {\r\n        buyBackDivisor = divisor;\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function setBuyBackEnabled(bool _enabled) public onlyOwner {\r\n        buyBackEnabled = _enabled;\r\n        emit BuyBackEnabledUpdated(_enabled);\r\n    }\r\n    \r\n    function setProgressiveFeeEnabled(bool _enabled) public onlyOwner {\r\n        progressiveFeeEnabled = _enabled;\r\n        emit ProgressiveFeeEnabled(_enabled);\r\n    }\r\n    \r\n    function setTradingEnabled(bool _enabled) public onlyOwner {\r\n        tradingEnabled = _enabled;\r\n        emit TradingEnabled(_enabled);\r\n    }\r\n    \r\n    function setWhaleProtectionEnabled(bool _enabled) public onlyOwner {\r\n        whaleProtectionEnabled = _enabled;\r\n        emit WhaleProtectionEnabled(_enabled);\r\n    }\r\n    \r\n    function isTansferClaimedEnabled() public view returns (bool) {\r\n        return transferClaimedEnabled;\r\n    }\r\n    \r\n    function setTransferClaimedEnabled(bool _enabled) public onlyOwner {\r\n        transferClaimedEnabled = _enabled;\r\n        emit TransferClaimedEnabled(_enabled);\r\n    }\r\n    \r\n    function enableTrading() public onlyOwner {\r\n        tradingEnabled = true;\r\n        emit TradingEnabled(true);\r\n    }\r\n    \r\n    function setDoSwapForRouter(bool _enabled) public onlyOwner {\r\n        doSwapForRouter = _enabled;\r\n        emit DoSwapForRouterEnabled(_enabled);\r\n    }\r\n\r\n    function setRouterAddress(address routerAddress) public onlyOwner() {\r\n        _routerAddress = routerAddress;\r\n    }\r\n    \r\n    function setPairAddress(address pairAddress) public onlyOwner() {\r\n        pancakeswapV2Pair = pairAddress;\r\n    }\r\n    \r\n    function migrateRouter(address routerAddress) external onlyOwner() {\r\n        setRouterAddress(routerAddress);\r\n        IUniswapV2Router02 _pancakeswapV2Router = IUniswapV2Router02(_routerAddress); // Initialize router\r\n        pancakeswapV2Pair = IUniswapV2Factory(_pancakeswapV2Router.factory()).getPair(address(this), _pancakeswapV2Router.WETH());\r\n        if (pancakeswapV2Pair == address(0))\r\n            pancakeswapV2Pair = IUniswapV2Factory(_pancakeswapV2Router.factory()).createPair(address(this), _pancakeswapV2Router.WETH());\r\n        pancakeswapV2Router = _pancakeswapV2Router;\r\n    }\r\n\r\n    // To recieve BNB from pancakeswapV2Router when swapping\r\n    receive() external payable {}\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\r\n        return (\r\n            rAmount,\r\n            rTransferAmount,\r\n            rFee,\r\n            tTransferAmount,\r\n            tFee,\r\n            tLiquidity\r\n        );\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256){\r\n        uint256 tFee = calculateTaxFee(tAmount);\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount) + calculateRewardFee(tAmount); // messy, out of convenience\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\n        return (tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\r\n            if (\r\n                _rOwned[_excluded[i]] \u003e rSupply ||\r\n                _tOwned[_excluded[i]] \u003e tSupply\r\n            ) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply \u003c _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n        if (_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n    }\r\n\r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_taxFee).div(10**3);\r\n    }\r\n\r\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_liquidityFee).div(10**3);\r\n    }\r\n    \r\n    function calculateRewardFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_rewardFee).div(10**3);\r\n    }\r\n\r\n    function calculateProgressiveFee(uint256 amount) private view returns (uint256) { // Punish whales\r\n        uint256 currentSupply = _tTotal.sub(balanceOf(0x000000000000000000000000000000000000dEaD));\r\n        uint256 fee;\r\n        uint256 txSize = amount.mul(10**6).div(currentSupply);\r\n        if (txSize \u003c= 100) {\r\n            fee = 2;\r\n        } else if (txSize \u003c= 250) {\r\n            fee = 4;\r\n        } else if (txSize \u003c= 500) {\r\n            fee = 6;\r\n        } else if (txSize \u003c= 1000) {\r\n            fee = 8;\r\n        } else if (txSize \u003c= 2500) {\r\n            fee = 10;\r\n        } else if (txSize \u003c= 5000) {\r\n            fee = 12;\r\n        } else if (txSize \u003c= 10000) {\r\n            fee = 16;\r\n        } else {\r\n            fee = 20;\r\n        }\r\n        return fee.div(2).mul(10);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (_taxFee == 0 \u0026\u0026 _liquidityFee == 0) \r\n            return;\r\n        _previousTaxFee = _taxFee;\r\n        _previousLiquidityFee = _liquidityFee;\r\n        _previousRewardFee = _rewardFee;\r\n        _taxFee = 0;\r\n        _liquidityFee = 0;\r\n        _rewardFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _taxFee = _previousTaxFee;\r\n        _liquidityFee = _previousLiquidityFee;\r\n        _rewardFee = _previousRewardFee;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(!_isRemoved[from] \u0026\u0026 !_isRemoved[to], \"Account removed!\");\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n        if (from == pancakeswapV2Pair \u0026\u0026 whaleProtectionEnabled)\r\n            require(balanceOf(to) + amount \u003c= _maxTxAmount, \"No whales please\");\r\n        if (from != owner() \u0026\u0026 to != owner()) {\r\n            require(tradingEnabled, \"Trading is not enabled\");\r\n            require(\r\n                amount \u003c= _maxTxAmount,\r\n                \"Transfer amount exceeds the maxTxAmount.\"\r\n            );\r\n        }\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don\u0027t get caught in a circular liquidity event.\r\n        // also, don\u0027t swap \u0026 liquify if sender is pancakeswap pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        if (contractTokenBalance \u003e= _maxTxAmount) {\r\n            contractTokenBalance = _maxTxAmount;\r\n        }\r\n        bool overMinTokenBalance = (contractTokenBalance \u003e= _minimumTokensBeforeSwapAndLiquify);\r\n        if (!inSwapAndLiquify \u0026\u0026\r\n            from != pancakeswapV2Pair \u0026\u0026\r\n            swapAndLiquifyEnabled) {\r\n            if(overMinTokenBalance) {\r\n                // contractTokenBalance = numTokensSellToAddToLiquidity;\r\n                swapAndLiquify(contractTokenBalance); // add liquidity\r\n            }\r\n            buyBackTokens();\r\n        }\r\n        // Indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n        // If any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n        // Transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        uint256 totalFee = _liquidityFee.add(_rewardFee).add(_buyBackFee);\r\n        uint256 forLiquidity = _liquidityFee.mul(contractTokenBalance).div(totalFee).div(2);\r\n        uint256 remnant = contractTokenBalance.sub(forLiquidity);\r\n        // Capture the contract\u0027s current BNB balance.\r\n        // This is so that we can capture exactly the amount of BNB that the\r\n        //  swap creates, and not make the liquidity event include any BNB that\r\n        //  has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n        // Swap tokens for BNB\r\n        swapTokensForBNB(remnant);\r\n        // How much BNB did we just swap into?\r\n        uint256 acquiredBNB = address(this).balance.sub(initialBalance);\r\n        // Add liquidity to pancakeswap\r\n        uint256 liquidityBNB = acquiredBNB.mul(forLiquidity).div(remnant);\r\n        uint256 rewardBNB = acquiredBNB.sub(liquidityBNB).div(2);\r\n        uint256 buyBackBNB = rewardBNB;\r\n        _BNBRewards = _BNBRewards.add(rewardBNB);\r\n        sendToClaimer(rewardBNB);\r\n        sendToBuyBack(buyBackBNB);\r\n        addLiquidity(forLiquidity, liquidityBNB);\r\n        emit SwapAndLiquify(forLiquidity, liquidityBNB);\r\n    }\r\n\r\n    function swapTokensForBNB(uint256 tokenAmount) private { // Generate the pancakeswap pair path of token -\u003e BNB\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeswapV2Router.WETH();\r\n        _approve(address(this), address(pancakeswapV2Router), tokenAmount);\r\n        pancakeswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( // Make the swap\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private { // Approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(pancakeswapV2Router), tokenAmount);\r\n        pancakeswapV2Router.addLiquidityETH{value: bnbAmount} ( // Add liqudity\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            deadAddress, //hardcoded to deadAddress\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function buyBackTokens() private lockTheSwap {\r\n        uint256 contractBalance = address(this).balance;\r\n        if (buyBackEnabled \u0026\u0026 contractBalance \u003e uint256(1 * 10**18)) {\r\n            uint256 buyBackBalance = contractBalance;\r\n            if (buyBackBalance \u003e buyBackUpperLimit)\r\n                buyBackBalance = buyBackUpperLimit;\r\n            uint256 finalBuyback = buyBackBalance.div(buyBackDivisor);\r\n            if(finalBuyback \u003e 0)\r\n                swapETHForTokens(finalBuyback);\r\n        }\r\n    }\r\n\r\n    function swapETHForTokens(uint256 amount) private {\r\n        // generate the uniswap pair path of token -\u003e weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = pancakeswapV2Router.WETH();\r\n        path[1] = address(this);\r\n\r\n      // make the swap\r\n        pancakeswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            0, // accept any amount of Tokens\r\n            path,\r\n            deadAddress, // Burn the tokens\r\n            block.timestamp.add(300)\r\n        );\r\n        \r\n        emit SwapETHForTokens(amount, path);\r\n    }\r\n\r\n    function sendToClaimer(uint256 amount) private {\r\n        if(amount \u003e 0) {\r\n            payable(_claimerAddress).transfer(amount);\r\n            emit ClaimFeeSent(_claimerAddress, amount);\r\n        }\r\n    }\r\n\r\n    function sendToBuyBack(uint256 amount) private {\r\n        if(amount \u003e 0) {\r\n            payable(_buyBackAddress).transfer(amount);\r\n            emit BuyBackFeeSent(_buyBackAddress, amount);\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee ) private {\r\n        uint256 oldTaxFee = _taxFee;\r\n        uint256 oldLiquidityFee = _liquidityFee;\r\n        if (!takeFee) {\r\n            removeAllFee();\r\n        } else {\r\n            if (progressiveFeeEnabled) {\r\n                _taxFee = calculateProgressiveFee(amount);\r\n                _liquidityFee = _taxFee;\r\n            }\r\n        }\r\n        if (_isExcluded[sender] \u0026\u0026 !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] \u0026\u0026 _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] \u0026\u0026 !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] \u0026\u0026 _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n        if (!takeFee) \r\n            restoreAllFee();\r\n        _taxFee = oldTaxFee;\r\n        _liquidityFee = oldLiquidityFee;\r\n    }\r\n    \r\n    function _transferClaimed(address sender, address recipient, uint256 tAmount) private {\r\n        if (transferClaimedEnabled) {\r\n            require(balanceOf(sender) \u003e 0, \"brainlet requirement\");\r\n            uint256 pClaimed = _claimed[sender].mul(tAmount).div(balanceOf(sender));\r\n            if (_claimed[sender] \u003e pClaimed)\r\n                _claimed[sender] = _claimed[sender].sub(pClaimed);\r\n            else\r\n                _claimed[sender] = 0;\r\n            _claimed[recipient] = _claimed[recipient].add(pClaimed);\r\n        }\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity\r\n        ) = _getValues(tAmount);\r\n        _transferClaimed(sender, recipient, tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity\r\n        ) = _getValues(tAmount);\r\n        _transferClaimed(sender, recipient, tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity\r\n        ) = _getValues(tAmount);\r\n        _transferClaimed(sender, recipient, tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity\r\n        ) = _getValues(tAmount);\r\n        _transferClaimed(sender, recipient, tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    function totalRewards() public view returns (uint256) {\r\n        return _BNBRewards;\r\n    }\r\n    \r\n    function rewards(address recipient) public view returns (uint256) {\r\n        uint256 total = _tTotal.sub(balanceOf(0x000000000000000000000000000000000000dEaD));\r\n        uint256 brut = _BNBRewards.mul(balanceOf(recipient)).div(total);\r\n        if (brut \u003e _claimed[recipient])\r\n            return brut.sub(_claimed[recipient]);\r\n        return 0;\r\n    }\r\n    \r\n    function claimed(address recipient) public view returns (uint256) {\r\n        return _claimed[recipient];\r\n    }\r\n    \r\n    function claimBNB(address payable recipient) public {\r\n        uint256 toClaim = getToClaim(recipient);\r\n        _claimed[recipient] = _claimed[recipient].add(toClaim);\r\n        bool success = claimer.claimBNB(recipient, toClaim);\r\n        require(success, \"Claim failed.\");\r\n    }\r\n\r\n    function claimBUSD(address payable recipient) public {\r\n        uint256 toClaim = getToClaim(recipient);\r\n        _claimed[recipient] = _claimed[recipient].add(toClaim);\r\n        bool success = claimer.claimBUSD(recipient, toClaim);\r\n        require(success, \"Claim failed.\");\r\n    }\r\n\r\n    function getToClaim(address payable recipient) private view returns (uint256) {\r\n        uint256 total = _tTotal.sub(balanceOf(deadAddress));\r\n        uint256 brut = _BNBRewards.mul(balanceOf(recipient)).div(total);\r\n        uint256 toClaim = brut.sub(_claimed[recipient]);\r\n        return toClaim;\r\n    }\r\n    \r\n    function clean(address payable recipient) public onlyOwner() {\r\n        (bool success, ) = recipient.call{value:address(this).balance}(\"\");\r\n        require(success, \"Clean failed.\");\r\n        _BNBRewards = 0;\r\n    }\r\n}"},"Context.sol":{"content":"abstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n}"},"Interfaces.sol":{"content":"interface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n}\r\n\r\n// pragma solidity \u003e=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n}\r\n\r\n// pragma solidity \u003e=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n\r\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\r\n\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n\r\n}\r\n\r\n// pragma solidity \u003e=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n}\r\n\r\n// pragma solidity \u003e=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n}\r\n\r\ninterface IClaimer {\r\n    function addAmount() external payable;\r\n    function setClaimAmount(address account, uint256 amount) external;\r\n    function claimBNB(address payable recipient, uint256 toClaim) external returns (bool success);\r\n    function claimBUSD(address payable recipient, uint256 toClaim) external returns (bool success);\r\n}"},"Ownable.sol":{"content":"import \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function getUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    function lock(uint256 time) public virtual onlyOwner { // Locks the contract for owner for the amount of time provided\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    function unlock() public virtual { // Unlocks the contract for owner when _lockTime is exceeds\r\n        require(\r\n            _previousOwner == msg.sender,\r\n            \"You don\u0027t have permission to unlock\"\r\n        );\r\n        require(block.timestamp \u003e _lockTime, \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}"},"SafeMath.sol":{"content":"/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n}"}}