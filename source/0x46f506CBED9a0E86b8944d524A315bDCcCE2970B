{"contract.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\nimport \"./interface.sol\";\n\ncontract ERC721A is IERC721A {\n    // Mask of an entry in packed address data.\n    uint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 \u003c\u003c 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant BITPOS_NUMBER_MINTED = 64;\n\n    // The bit position of `numberBurned` in packed address data.\n    uint256 private constant BITPOS_NUMBER_BURNED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant BITMASK_AUX_COMPLEMENT = (1 \u003c\u003c 192) - 1;\n\n    // The bit position of `startTimestamp` in packed ownership.\n    uint256 private constant BITPOS_START_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant BITMASK_BURNED = 1 \u003c\u003c 224;\n    \n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant BITMASK_NEXT_INITIALIZED = 1 \u003c\u003c 225;\n\n    // The tokenId of the next token to be minted.\n    uint256 private _currentIndex;\n\n    // The number of tokens burned.\n    uint256 private _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See `_packedOwnershipOf` implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `startTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    mapping(uint256 =\u003e uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberBurned`\n    // - [192..255] `aux`\n    mapping(address =\u003e uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 =\u003e address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address =\u003e mapping(address =\u003e bool)) private _operatorApprovals;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();}\n\n    //Returns the starting token ID\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;}\n\n    //Returns the next token ID to be minted\n    function _nextTokenId() internal view returns (uint256) {\n        return _currentIndex;}\n\n    //Returns the total number of tokens in existence\n    function totalSupply() public view override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {return _currentIndex - _burnCounter - _startTokenId();}}\n\n    //Returns the total amount of tokens minted in the contract\n    function _totalMinted() internal view returns (uint256) {\n        // Counter underflow is impossible as _currentIndex does not decrement,\n        // and it is initialized to `_startTokenId()`\n        unchecked {\n            return _currentIndex - _startTokenId();}}\n\n    //Returns the total number of tokens burned\n    function _totalBurned() internal view returns (uint256) {\n        return _burnCounter;}\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes of the XOR of\n        // all function selectors in the interface. See: https://eips.ethereum.org/EIPS/eip-165\n        // e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`\n        return\n            interfaceId == 0x01ffc9a7 || interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f;}\n\n    function balanceOf(address owner) public view override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _packedAddressData[owner] \u0026 BITMASK_ADDRESS_DATA_ENTRY;}\n\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] \u003e\u003e BITPOS_NUMBER_MINTED) \u0026 BITMASK_ADDRESS_DATA_ENTRY;}\n\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] \u003e\u003e BITPOS_NUMBER_BURNED) \u0026 BITMASK_ADDRESS_DATA_ENTRY;}\n\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] \u003e\u003e BITPOS_AUX);}\n\n    function _setAux(address owner, uint64 aux) internal {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        assembly { // Cast aux without masking.\n            auxCasted := aux}\n        packed = (packed \u0026 BITMASK_AUX_COMPLEMENT) | (auxCasted \u003c\u003c BITPOS_AUX);\n        _packedAddressData[owner] = packed;}\n\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\n        uint256 curr = tokenId;\n        unchecked {\n            if (_startTokenId() \u003c= curr)\n                if (curr \u003c _currentIndex) {\n                    uint256 packed = _packedOwnerships[curr];\n                    // If not burned.\n                    if (packed \u0026 BITMASK_BURNED == 0) {\n                        // Invariant:\n                        // There will always be an ownership that has an address and is not burned\n                        // before an ownership that does not have an address and is not burned.\n                        // Hence, curr will not underflow.\n                        //\n                        // We can directly compare the packed value.\n                        // If the address is zero, packed is zero.\n                        while (packed == 0) {\n                            packed = _packedOwnerships[--curr];}\n                        return packed;}}}\n        revert OwnerQueryForNonexistentToken();}\n\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n        ownership.addr = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed \u003e\u003e BITPOS_START_TIMESTAMP);\n        ownership.burned = packed \u0026 BITMASK_BURNED != 0;}\n\n    function _ownershipAt(uint256 index) internal view returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnerships[index]);}\n\n    function _initializeOwnershipAt(uint256 index) internal {\n        if (_packedOwnerships[index] == 0) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);}}\n\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));}\n\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));}\n\n    function name() public view virtual override returns (string memory) {\n        return _name;}\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;}\n\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : \u0027\u0027;}\n\n    //Base URI for computing {tokenURI}. \n    function _baseURI() internal view virtual returns (string memory) {\n        return \u0027\u0027;}\n\n    function _addressToUint256(address value) private pure returns (uint256 result) {\n        assembly {\n            result := value}}\n\n    function _boolToUint256(bool value) private pure returns (uint256 result) {\n        assembly {\n            result := value}}\n\n    function approve(address to, uint256 tokenId) public override {\n        address owner = address(uint160(_packedOwnershipOf(tokenId)));\n        if (to == owner) revert ApprovalToCurrentOwner();\n        if (_msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                revert ApprovalCallerNotOwnerNorApproved();}\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);}\n\n    function getApproved(uint256 tokenId) public view override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n        return _tokenApprovals[tokenId];}\n\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);}\n\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];}\n\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        _transfer(from, to, tokenId);}\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \u0027\u0027);}\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        _transfer(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();}}\n\n    //Returns whether `tokenId` exists\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return _startTokenId() \u003c= tokenId \u0026\u0026 tokenId \u003c _currentIndex \u0026\u0026 _packedOwnerships[tokenId] \u0026 BITMASK_BURNED == 0;}\n\n    //Equivalent to `_safeMint(to, quantity, \u0027\u0027)`\n    function _safeMint(address to, uint256 quantity) internal {\n        _safeMint(to, quantity, \u0027\u0027);}\n\n    //Safely mints `quantity` tokens and transfers them to `to`\n    function _safeMint(address to, uint256 quantity, bytes memory _data) internal {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n        // Overflows are incredibly unrealistic.\n        // balance or numberMinted overflow if current value of either + quantity \u003e 1.8e19 (2**64) - 1\n        // updatedIndex overflows if _currentIndex + quantity \u003e 1.2e77 (2**256) - 1\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the balance and number minted.\n            _packedAddressData[to] += quantity * ((1 \u003c\u003c BITPOS_NUMBER_MINTED) | 1);\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] =\n                _addressToUint256(to) |\n                (block.timestamp \u003c\u003c BITPOS_START_TIMESTAMP) |\n                (_boolToUint256(quantity == 1) \u003c\u003c BITPOS_NEXT_INITIALIZED);\n            uint256 updatedIndex = startTokenId;\n            uint256 end = updatedIndex + quantity;\n            if (to.code.length != 0) {\n                do {\n                    emit Transfer(address(0), to, updatedIndex);\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();}} \n                while (updatedIndex \u003c end);\n                // Reentrancy protection\n                if (_currentIndex != startTokenId) revert();} \n                else {\n                do {emit Transfer(address(0), to, updatedIndex++);} while (updatedIndex \u003c end);}\n            _currentIndex = updatedIndex;}\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);}\n\n    //Mints `quantity` tokens and transfers them to `to`\n    function _mint(address to, uint256 quantity) internal {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n        // Overflows are incredibly unrealistic.\n        // balance or numberMinted overflow if current value of either + quantity \u003e 1.8e19 (2**64) - 1\n        // updatedIndex overflows if _currentIndex + quantity \u003e 1.2e77 (2**256) - 1\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the balance and number minted.\n            _packedAddressData[to] += quantity * ((1 \u003c\u003c BITPOS_NUMBER_MINTED) | 1);\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] =\n                _addressToUint256(to) |\n                (block.timestamp \u003c\u003c BITPOS_START_TIMESTAMP) |\n                (_boolToUint256(quantity == 1) \u003c\u003c BITPOS_NEXT_INITIALIZED);\n            uint256 updatedIndex = startTokenId;\n            uint256 end = updatedIndex + quantity;\n            do {emit Transfer(address(0), to, updatedIndex++);} while (updatedIndex \u003c end);\n            _currentIndex = updatedIndex;}\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);}\n\n    //Transfers `tokenId` from `from` to `to`\n    function _transfer(address from, address to, uint256 tokenId) private {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\n        bool isApprovedOrOwner = (_msgSenderERC721A() == from ||\n            isApprovedForAll(from, _msgSenderERC721A()) ||\n            getApproved(tokenId) == _msgSenderERC721A());\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        if (to == address(0)) revert TransferToZeroAddress();\n        _beforeTokenTransfers(from, to, tokenId, 1);\n        // Clear approvals from the previous owner.\n        delete _tokenApprovals[tokenId];\n        // Underflow of the sender\u0027s balance is impossible because we check for\n        // ownership above and the recipient\u0027s balance can\u0027t realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] =\n                _addressToUint256(to) |\n                (block.timestamp \u003c\u003c BITPOS_START_TIMESTAMP) |\n                BITMASK_NEXT_INITIALIZED;\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked \u0026 BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot\u0027s address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;}}}}\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);}\n\n    //Equivalent to `_burn(tokenId, false)`\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);}\n\n    //Destroys `tokenId`\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n        address from = address(uint160(prevOwnershipPacked));\n        if (approvalCheck) {\n            bool isApprovedOrOwner = (_msgSenderERC721A() == from || isApprovedForAll(from, _msgSenderERC721A()) || getApproved(tokenId) == _msgSenderERC721A());\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();}\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n        // Clear approvals from the previous owner.\n        delete _tokenApprovals[tokenId];\n        // Underflow of the sender\u0027s balance is impossible because we check for\n        // ownership above and the recipient\u0027s balance can\u0027t realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `balance -= 1`.\n            // - `numberBurned += 1`.\n            //\n            // We can directly decrement the balance, and increment the number burned.\n            // This is equivalent to `packed -= 1; packed += 1 \u003c\u003c BITPOS_NUMBER_BURNED;`.\n            _packedAddressData[from] += (1 \u003c\u003c BITPOS_NUMBER_BURNED) - 1;\n            // Updates:\n            // - `address` to the last owner.\n            // - `startTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] =\n                _addressToUint256(from) |\n                (block.timestamp \u003c\u003c BITPOS_START_TIMESTAMP) |\n                BITMASK_BURNED | \n                BITMASK_NEXT_INITIALIZED;\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked \u0026 BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot\u0027s address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;}}}}\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {_burnCounter++;}}\n\n    //Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract\n    function _checkContractOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (bytes4 retval) {\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;} \n            catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();} \n            else {\n                assembly {revert(add(32, reason), mload(reason))}}}}\n\n    //Hook that is called before a set of serially-ordered token ids are about to be transferred\n    function _beforeTokenTransfers(address from, address to, uint256 startTokenId, uint256 quantity) internal virtual {}\n\n    //Hook that is called after a set of serially-ordered token ids have been transferred\n    function _afterTokenTransfers(address from, address to, uint256 startTokenId, uint256 quantity) internal virtual {}\n\n    //Returns the message sender (defaults to `msg.sender`)\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;}\n\n    //Converts a `uint256` to its ASCII `string` decimal representation\n    function _toString(uint256 value) internal pure returns (string memory ptr) {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), \n            // but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\n            // We will need 1 32-byte word to store the length, \n            // and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\n            ptr := add(mload(0x40), 128)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, ptr)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := ptr\n\n            // We write the string from the rightmost digit to the leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // Costs a bit more than early returning for the zero case,\n            // but cheaper in terms of deployment and overall runtime costs.\n            for { \n                // Initialize and perform the first pass without check.\n                let temp := value\n                // Move the pointer 1 byte leftwards to point to an empty character slot.\n                ptr := sub(ptr, 1)\n                // Write the character to the pointer. 48 is the ASCII index of \u00270\u0027.\n                mstore8(ptr, add(48, mod(temp, 10)))\n                temp := div(temp, 10)} \n            temp { \n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)} { // Body of the for loop.\n                ptr := sub(ptr, 1)\n                mstore8(ptr, add(48, mod(temp, 10)))}\n            let length := sub(end, ptr)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            ptr := sub(ptr, 32)\n            // Store the length.\n            mstore(ptr, length)}}}\n\nabstract contract ReentrancyGuard {\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;}\n\n    //Prevents a contract from calling itself, directly or indirectly.\n    //Calling a `nonReentrant` function from another `nonReentrant`function is not supported. \n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n        _;\n        _status = _NOT_ENTERED;}}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;}\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;}}\n\nabstract contract Ownable is Context {\n\n    address private _owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        //dev Initializes the contract setting the deployer as the initial owner\n        _transferOwnership(_msgSender());}\n\n    function owner() public view virtual returns (address) {\n        //Returns the address of the current owner\n        return _owner;}\n\n    modifier onlyOwner() {\n        //Throws if called by any account other than the owner\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;}\n\n    function renounceOwnership() public virtual onlyOwner {\n        //Leaves the contract without owner\n        _transferOwnership(address(0));}\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        //Transfers ownership of the contract to a new account (`newOwner`)\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);}\n\n    function _transferOwnership(address newOwner) internal virtual {\n        //Transfers ownership of the contract to a new account (`newOwner`)\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);}}\n\n"},"interface.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n                                  \ninterface IERC721A {\n\n    // The caller must own the token or be an approved operator\n    error ApprovalCallerNotOwnerNorApproved();\n\n    //The token does not exist\n    error ApprovalQueryForNonexistentToken();\n\n    //The caller cannot approve to their own address\n    error ApproveToCaller();\n\n    //The caller cannot approve to the current owner\n    error ApprovalToCurrentOwner();\n\n    //Cannot query the balance for the zero address\n    error BalanceQueryForZeroAddress();\n\n    //Cannot mint to the zero address\n    error MintToZeroAddress();\n\n    //The quantity of tokens minted must be more than zero\n    error MintZeroQuantity();\n\n    //The token does not exist\n    error OwnerQueryForNonexistentToken();\n\n    //The caller must own the token or be an approved operator.\n    error TransferCallerNotOwnerNorApproved();\n\n    ///The token must be owned by `from`\n    error TransferFromIncorrectOwner();\n\n    //Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\n    error TransferToNonERC721ReceiverImplementer();\n\n    //Cannot transfer to the zero address\n    error TransferToZeroAddress();\n\n    //The token does not exist\n    error URIQueryForNonexistentToken();\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;}\n\n    //Returns the total amount of tokens stored by the contract\n    //Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens\n    function totalSupply() external view returns (uint256);\n\n    //Returns true if this contract implements the interface defined by `interfaceId`\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    //Emitted when `tokenId` token is transferred from `from` to `to`\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    //Emitted when `owner` enables `approved` to manage the `tokenId` token\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    //Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    //Returns the number of tokens in `owner` account\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    //Returns the owner of the `tokenId` token\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    //Safely transfers `tokenId` token from `from` to `to`\n    //Requirements: `from` cannot be the zero address\n    //              `to` cannot be the zero address\n    //              `tokenId` token must exist and be owned by `from`\n    //              If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}\n    //              If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    //Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked.\n    //Requirements: `from` cannot be the zero address.\n    //              `to` cannot be the zero address.\n    //              `tokenId` token must exist and be owned by `from`\n    //              If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}\n    //              If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    //Transfers `tokenId` token from `from` to `to`\n    //Requirements: `from` cannot be the zero address\n    //              `to` cannot be the zero address\n    //              `tokenId` token must be owned by `from`\n    //              If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    //Gives permission to `to` to transfer `tokenId` token to another account\n    function approve(address to, uint256 tokenId) external;\n\n    //Approve or remove `operator` as an operator for the caller\n    //Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller\n    //Requirements: The `operator` cannot be the caller.\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    //Returns the account approved for `tokenId` token.\n    //Requirements: `tokenId` must exist\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    //Returns if the `operator` is allowed to manage all of the assets of `owner`\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    //Returns the token collection name\n    function name() external view returns (string memory);\n\n    //Returns the token collection symbol\n    function symbol() external view returns (string memory);\n\n    //Returns the Uniform Resource Identifier (URI) for `tokenId` token\n    function tokenURI(uint256 tokenId) external view returns (string memory);}\n\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);}\n"},"library.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    function toString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0\";}\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;}\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;}\n        return string(buffer);}\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";}\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;}\n        return toHexString(value, length);}\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;}\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);}\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);}}\n\nlibrary SafeMath {\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b \u003e 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n    return a / b;\n  }\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b \u003c= a);\n    return a - b;\n  }\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c \u003e= a);\n    return c;\n  }\n}\n"},"membership.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\nimport \"./contract.sol\";\nimport \"./library.sol\";\n\ncontract membership is ERC721A, Ownable, ReentrancyGuard {\n    using Strings for uint256;\n    using SafeMath for uint256;\n\n    IERC20 public paymentToken;\n\n    address public treasuryWallet;\n    string public uriPrefix = \"\";\n    string public uriSuffix = \".json\";\n\n    bool public revealed = false;\n    bool public paused = true;\n    \n    mapping (address =\u003e uint) public minted;\n\n    uint256 public mintedNFT;\n    uint256 public lastMintedTokenId;\n    uint256 public maxSupply = 10000;\n\n    uint256 public decimals = 18;\n    uint256 public nominalPriceNFT = 99*(10**decimals);\n    uint256 public priceNFT = 99*(10**decimals);\n    string public hiddenMetadataUri = \"ipfs://---/hidden.json\";\n\n    string public _tokenName = \"Membership VIP NFT\";\n    string public _tokenSymbol = \"MVNFT\";\n    address private token_;\n\n    constructor() ERC721A(_tokenName, _tokenSymbol) {}\n\n    //Moderator\n\n    address public moderator;\n\n    modifier onlyModerator() {\n        require(msg.sender == owner() || msg.sender == moderator, \"Not owner or moderator!\");\n        _;}\n\n    function setModerator(address _moderator) external onlyOwner {\n        moderator = _moderator;}\n\n    function setPrice(uint256 _price, uint256 _decimals) external onlyModerator {\n        priceNFT = _price;\n        decimals = _decimals;}\n\n    function getPrice() external view returns(uint256, uint256) {\n        return (nominalPriceNFT, priceNFT);\n    }\n    \n    function setPaymentToken(address _token) external onlyModerator {\n        paymentToken = IERC20(_token);}\n\n    function setTreasury(address _to) external onlyModerator {\n        treasuryWallet = _to;}\n\n    modifier mintCompliance(uint256 _mintAmount) {\n        require(!paused, \"Contract is paused!\");\n        require(_mintAmount \u003e 0, \"Invalid mint amount!\");\n        require(totalSupply() + _mintAmount \u003c= maxSupply, \"Max supply exceeded\");\n        _;}\n\n    modifier mintPriceCompliance(uint256 _mintAmount) {\n        require(paymentToken.balanceOf(msg.sender) \u003e= priceNFT.mul(_mintAmount), \"Insufficient token balance\");\n        uint256 _amount = priceNFT.mul(_mintAmount);\n        require(paymentToken.transferFrom(msg.sender, treasuryWallet, _amount), \"Token transfer failed\");\n        _;}\n\n    function mint(uint256 _mintAmount) public mintCompliance(_mintAmount) mintPriceCompliance(_mintAmount) nonReentrant {\n        minted[_msgSender()] = minted[_msgSender()] + _mintAmount;\n        mintedNFT += _mintAmount;\n        _safeMint(_msgSender(), _mintAmount);}\n\n    function burn(uint256 _tokenId) external {\n        _burn(_tokenId, true); }\n\n    function _startTokenId() internal view virtual override returns (uint256) {\n        return 1;}\n\n    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\n        require(_exists(_tokenId), \u0027ERC721Metadata: URI query for nonexistent token\u0027);\n        if (revealed == false) {\n            return hiddenMetadataUri;}\n        string memory currentBaseURI = _baseURI();\n        return bytes(currentBaseURI).length \u003e 0 ? string(abi.encodePacked(currentBaseURI, _tokenId.toString(), uriSuffix)): \u0027\u0027;}\n    \n    function setRevealed(bool _state) external onlyOwner {\n        //Reveal the token URI of the NFTs\n        revealed = _state;}\n\n    function setPaused(bool _state) external onlyOwner {\n        //Unlock the contract\n        paused = _state;}\n\n    function setHiddenMetadataUri(string memory _hiddenMetadataUri) public onlyModerator {\n        hiddenMetadataUri = _hiddenMetadataUri;}\n\n    function setUriPrefix(string memory _uriPrefix) public onlyOwner {\n        uriPrefix = _uriPrefix;}\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return uriPrefix;}\n\n    function setUriSuffix(string memory _uriSuffix) public onlyModerator {\n        uriSuffix = _uriSuffix;}\n\n    function getMinted() public view returns (uint256, uint256) {\n        uint256 _mintedNFT = mintedNFT;\n        uint256 _totalSupply = maxSupply;\n        return (_mintedNFT, _totalSupply);}\n\n    receive() external payable {}\n\n    fallback() external payable {}}\n"}}