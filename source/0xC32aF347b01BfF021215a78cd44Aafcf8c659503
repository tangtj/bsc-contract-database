
// File: contracts/LpFix.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.12;

interface IPancakeRouter {
    function WETH() external pure returns (address); // This will return the WBNB address on BSC.

    function factory() external pure returns (address);
}

interface IPancakeFactory {
    function getPair(
        address tokenA,
        address tokenB
    ) external view returns (address pair);
}

interface IERC20 {
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    function transfer(
        address recipient,
        uint256 amount
    ) external returns (bool);
}

interface IWBNB {
    function deposit() external payable;
}

interface ILpPair {
    function mint(address to) external returns (uint256 liquidity);
}

contract FixLP {
    address public constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    constructor() {}

    function fixLP(address _tokenA, uint256 _amountTokenA) external payable {
        require(msg.value >= 0, "Insufficient BNB For liquidty");

        IWBNB wbnb = IWBNB(IPancakeRouter(ROUTER).WETH());
        wbnb.deposit{value: msg.value}();

        ILpPair pair = ILpPair(
            IPancakeFactory(IPancakeRouter(ROUTER).factory()).getPair(
                _tokenA,
                address(wbnb)
            )
        );

        // Ensure approval is done
        IERC20(_tokenA).transferFrom(msg.sender, address(pair), _amountTokenA);
        IERC20(address(wbnb)).transfer(address(pair), msg.value);

        pair.mint(msg.sender);
    }
}

