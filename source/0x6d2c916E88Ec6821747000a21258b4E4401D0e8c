{"CryptoHoldersClubKG — копия.sol":{"content":"pragma solidity ^0.8.0;\r\n//SPDX-License-Identifier:SPDX-License\r\n\r\n// Объявляем интерфейс токена\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Создаем контракт токена\r\ncontract CryptoHoldersClubKG is IBEP20 {\r\n    string public name = \"Crypto Holders Club KG\";\r\n    string public symbol = \"CHCKG\";\r\n    uint8 public decimals = 18;\r\n    uint256 public override totalSupply = 100000000; // 100 миллионов\r\n    mapping (address =\u003e uint256) public override balanceOf;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) public override allowance;\r\n\r\n    // Конструктор\r\n    constructor() {\r\n        balanceOf[msg.sender] = totalSupply; // отправляем все токены на баланс создателя контракта на момент его создания\r\n        emit Transfer(address(0), msg.sender, totalSupply); // уведомляем всех о создании и начальном балансе\r\n    }\r\n\r\n    // Функция передачи токенов\r\n    function transfer(address _to, uint256 _value) public override returns (bool success) {\r\n        require(_to != address(0), \"Invalid address\"); // проверяем на пустой адрес получателя\r\n        require(balanceOf[msg.sender] \u003e= _value, \"Insufficient balance\"); // проверяем достаточно ли у отправителя токенов для выполнения транзакции\r\n\r\n        balanceOf[msg.sender] -= _value; // списываем токены у отправителя\r\n        balanceOf[_to] += _value; // зачисляем токены получателю\r\n        emit Transfer(msg.sender, _to, _value); // уведомляем об успешной транзакции\r\n        return true;\r\n    }\r\n\r\n    // Функция проверки разрешенных на делегирование токенов\r\n    function approve(address _spender, uint256 _value) public override returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value; // устанавливаем количество токенов, которые _spender может использовать от имени владельцa\r\n        emit Approval(msg.sender, _spender, _value); // уведомляем об успешной операции с разрешением\r\n        return true;\r\n    }\r\n\r\n    // Функция перевода токенов заблокированных на делегирование\r\n    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool success) {\r\n        require(_to != address(0), \"Invalid address\"); // проверяем на пустой адрес получателя\r\n        require(balanceOf[_from] \u003e= _value, \"Insufficient balance\"); // проверяем достаточно ли у отправителя токенов для выполнения транзакции\r\n        require(_value \u003c= allowance[_from][msg.sender], \"Allowance exceeded\"); // проверяем достаточно ли заблокированных для делегирования токенов у владельцa для выполнения транзакции\r\n\r\n        balanceOf[_from] -= _value; // списываем токены у отправителя\r\n        balanceOf[_to] += _value; // зачисляем токены получателю\r\n        allowance[_from][msg.sender] -= _value; // уменьшаем доступное для делегирования количество токенов\r\n        emit Transfer(_from, _to, _value); // уведомляем об успешной транзакции\r\n        return true;\r\n    }\r\n}"},"CryptoHoldersClubKG.sol":{"content":"pragma solidity ^0.8.0;\r\n//SPDX-License-Identifier:SPDX-License\r\n\r\n// Объявляем интерфейс токена\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Создаем контракт токена\r\ncontract CryptoHoldersClubKG is IBEP20 {\r\n    string public name = \"Crypto Holders Club KG\";\r\n    string public symbol = \"CHCKG\";\r\n    uint8 public decimals = 18;\r\n    uint256 public override totalSupply = 100000000; // 100 миллионов\r\n    mapping (address =\u003e uint256) public override balanceOf;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) public override allowance;\r\n\r\n    // Конструктор\r\n    constructor() {\r\n        balanceOf[msg.sender] = totalSupply; // отправляем все токены на баланс создателя контракта на момент его создания\r\n        emit Transfer(address(0), msg.sender, totalSupply); // уведомляем всех о создании и начальном балансе\r\n    }\r\n\r\n    // Функция передачи токенов\r\n    function transfer(address _to, uint256 _value) public override returns (bool success) {\r\n        require(_to != address(0), \"Invalid address\"); // проверяем на пустой адрес получателя\r\n        require(balanceOf[msg.sender] \u003e= _value, \"Insufficient balance\"); // проверяем достаточно ли у отправителя токенов для выполнения транзакции\r\n\r\n        balanceOf[msg.sender] -= _value; // списываем токены у отправителя\r\n        balanceOf[_to] += _value; // зачисляем токены получателю\r\n        emit Transfer(msg.sender, _to, _value); // уведомляем об успешной транзакции\r\n        return true;\r\n    }\r\n\r\n    // Функция проверки разрешенных на делегирование токенов\r\n    function approve(address _spender, uint256 _value) public override returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value; // устанавливаем количество токенов, которые _spender может использовать от имени владельцa\r\n        emit Approval(msg.sender, _spender, _value); // уведомляем об успешной операции с разрешением\r\n        return true;\r\n    }\r\n\r\n    // Функция перевода токенов заблокированных на делегирование\r\n    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool success) {\r\n        require(_to != address(0), \"Invalid address\"); // проверяем на пустой адрес получателя\r\n        require(balanceOf[_from] \u003e= _value, \"Insufficient balance\"); // проверяем достаточно ли у отправителя токенов для выполнения транзакции\r\n        require(_value \u003c= allowance[_from][msg.sender], \"Allowance exceeded\"); // проверяем достаточно ли заблокированных для делегирования токенов у владельцa для выполнения транзакции\r\n\r\n        balanceOf[_from] -= _value; // списываем токены у отправителя\r\n        balanceOf[_to] += _value; // зачисляем токены получателю\r\n        allowance[_from][msg.sender] -= _value; // уменьшаем доступное для делегирования количество токенов\r\n        emit Transfer(_from, _to, _value); // уведомляем об успешной транзакции\r\n        return true;\r\n    }\r\n}"}}