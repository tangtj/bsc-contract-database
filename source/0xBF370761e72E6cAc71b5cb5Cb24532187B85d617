
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/interfaces/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)

pragma solidity ^0.8.0;

import "../token/ERC20/IERC20.sol";


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/DripPotluck.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/interfaces/IERC20.sol";

contract DripPotluck is Ownable {
	struct Room {
		address[] players;
		uint256 entryFee;
		uint256 numberOfPlayers;
		address winner;
		bool gameStarted;
		uint256 roomBalance; // Balance for this room
	}

	Room[] public rooms;
	event Winner(address indexed winner, uint256 indexed amount);
	uint256 public constant PRECISION = 1e18; // 18 decimal places
	uint256 public constant PERCENTAGE_BASE = 100; // 100% as base
	uint256 public constant GAME_FEE = 15; // 15% game fee
	address public devWallet;
	uint256 public totalFees;
	uint256 public totalGames;

	constructor(address _devWallet) {
		// Initialize rooms with different entry fees and capacities
		rooms.push(
			Room({
				players: new address[](0),
				entryFee: 0.02 ether,
				numberOfPlayers: 2,
				winner: address(0),
				gameStarted: false,
				roomBalance: 0
			})
		);
		rooms.push(
			Room({
				players: new address[](0),
				entryFee: 0.01 ether,
				numberOfPlayers: 5,
				winner: address(0),
				gameStarted: false,
				roomBalance: 0
			})
		);
		rooms.push(
			Room({
				players: new address[](0),
				entryFee: 0.01 ether,
				numberOfPlayers: 10,
				winner: address(0),
				gameStarted: false,
				roomBalance: 0
			})
		);
		devWallet = _devWallet;
	}

	// **** EXTERNAL FUNCTIONS ****

	// If the numberOfEntries is too high, user may get TransactionExecutionError: Transaction ran out of gas
	// If this happens, user can register multiple times with lesser amount of numberOfEntries
	function register(uint256 roomId, uint256 numberOfEntries) external payable {
		require(roomId < rooms.length, "Invalid room ID");
		require(numberOfEntries > 0, "Number of entries must be greater than 0");
		Room storage room = rooms[roomId];
		require(!room.gameStarted, "Game has already started");
		uint256 requiredAmount = room.entryFee * numberOfEntries;
		require(msg.value == requiredAmount, "Incorrect entry fee");
		require(room.players.length + numberOfEntries <= room.numberOfPlayers, "Room is full");

		for (uint256 i = 0; i < numberOfEntries; i++) {
			room.players.push(msg.sender);
		}
		room.roomBalance += requiredAmount;

		if (room.numberOfPlayers == room.players.length) {
			startGame(roomId);
		}
	}

	function exitRoom(uint256 roomId) external {
		require(roomId < rooms.length, "Invalid room ID");
		require(amountRegistered(roomId) > 0, "No amount to refund");
		Room storage room = rooms[roomId];
		require(!room.gameStarted, "Game has already started");

		uint256 refundValue = 0;
		// Solidity How to Loop Through Array and Remove Items Without Breaking the For Loop
		for (int256 i = int256(room.players.length) - 1; i >= 0; i--) {
			if (room.players[uint256(i)] == msg.sender) {
				refundValue += room.entryFee;
				// Move the last element to the current position
				room.players[uint256(i)] = room.players[room.players.length - 1];
				// Remove the last element
				room.players.pop();
			}
		}
		// Update room balance
		room.roomBalance -= refundValue;
		payable(msg.sender).transfer(refundValue);
	}

	function createRoom(uint256 _entryFee, uint256 _numberOfPlayers) external onlyOwner {
		require(_entryFee > 0, "Entry Fee is required");
		require(_numberOfPlayers > 1, "Number of Players must be greater than 1");
		rooms.push(
			Room({
				players: new address[](0),
				entryFee: _entryFee,
				numberOfPlayers: _numberOfPlayers,
				winner: address(0),
				gameStarted: false,
				roomBalance: 0
			})
		);
	}

	function removeRoom(uint256 roomId) external onlyOwner {
		require(roomId < rooms.length, "Invalid room ID");
		Room storage room = rooms[roomId];
		require(!room.gameStarted, "Game has already started");
		require(room.roomBalance == 0, "Room balance is not Zero");
		rooms[roomId] = rooms[rooms.length - 1];
		rooms.pop();
	}

	function forceRoomGame(uint256 roomId) external onlyOwner {
		require(roomId < rooms.length, "Invalid room ID");
		Room storage room = rooms[roomId];
		require(!room.gameStarted, "Game has already started");
		require(room.roomBalance > 0, "Room balance is Zero");
		require(room.players.length > 1, "There is only 1 player in the room");
		startGame(roomId);
	}

	function sweepTokens(address tokenAddress) external onlyOwner {
		IERC20 token = IERC20(tokenAddress);
		uint256 balance = token.balanceOf(address(this));
		require(balance > 0, "No tokens to sweep");
		token.transfer(owner(), balance);
	}

	function updateDevWallet(address _devWallet) external onlyOwner {
		devWallet = _devWallet;
	}

	// **** INTERNAL FUNCTIONS ****

	function distributeFunds(uint256 roomId) internal {
		Room storage room = rooms[roomId];
		uint256 roomBalance = room.roomBalance;
		address roomWinner = room.winner;

		uint256 fee = ((roomBalance * GAME_FEE * PRECISION) / PERCENTAGE_BASE) / PRECISION;
		uint256 amountToDistribute = roomBalance - fee;

		// Reset the room state after funds have been distributed
		delete room.players;
		room.winner = address(0);
		room.gameStarted = false;
		room.roomBalance = 0;

		totalFees += fee;
		totalGames += 1;

		(bool sent1, ) = payable(roomWinner).call{ value: amountToDistribute }("");
		(bool sent2, ) = payable(devWallet).call{ value: fee }("");
		require(sent1, "Failed to send Ether to winner");
		require(sent2, "Failed to send Ether to dev wallet");

		if (sent1 && sent2) {
			emit Winner(roomWinner, amountToDistribute);
		}
	}

	function amountRegistered(uint256 roomId) internal view returns (uint256) {
		require(roomId < rooms.length, "Invalid room ID");
		Room storage room = rooms[roomId];
		uint256 amount = 0;
		for (uint256 i = 0; i < room.players.length; i++) {
			if (room.players[i] == msg.sender) {
				amount += room.entryFee;
			}
		}
		return amount;
	}

	function startGame(uint256 roomId) internal {
		Room storage room = rooms[roomId];
		room.gameStarted = true;
		uint256 randomSeed = uint256(keccak256(abi.encodePacked(block.timestamp, block.number, roomId))) %
			room.players.length;
		room.winner = room.players[randomSeed];
		distributeFunds(roomId);
	}

	// **** VIEW FUNCTIONS ****

	function getContractBalance() external view returns (uint256) {
		return address(this).balance;
	}

	function getTotalRooms() external view returns (uint256) {
		return rooms.length;
	}

	function getRoomInfo(
		uint256 roomId
	)
		external
		view
		returns (
			address[] memory players,
			uint256 entryFee,
			uint256 numberOfPlayers,
			bool gameStarted,
			address winner,
			uint256 roomBalance
		)
	{
		require(roomId < rooms.length, "Invalid room ID");
		Room memory room = rooms[roomId];
		players = room.players;
		entryFee = room.entryFee;
		numberOfPlayers = room.numberOfPlayers;
		gameStarted = room.gameStarted;
		winner = room.winner;
		roomBalance = room.roomBalance;
	}

	// working with dynamic array, prone to out of gas exception
	// owners must be mindful of the number of rooms they create
	function getRooms() external view returns (Room[] memory) {
		return rooms;
	}

	function amountRegistered(uint256 roomId, address _address) external view returns (uint256) {
		require(roomId < rooms.length, "Invalid room ID");
		Room storage room = rooms[roomId];
		uint256 amount = 0;
		for (uint256 i = 0; i < room.players.length; i++) {
			if (room.players[i] == _address) {
				amount += room.entryFee;
			}
		}
		return amount;
	}
}

