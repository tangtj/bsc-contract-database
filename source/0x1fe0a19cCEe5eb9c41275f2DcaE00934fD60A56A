
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/GalaRaceMembership.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@openzeppelin/contracts/access/Ownable.sol";

error Membership_PriceNotMatched(uint256 price);
error Membership_InvalidOption(string _err);
error Membership__TransferFailed();
error Membership_SimilarToCurrentPrice(uint256 currentPrice);

interface IERC20 {
  function balanceOf(address account) external view returns (uint256);

  function transfer(address recipient, uint256 amount) external returns (bool);

  function transferFrom(
    address sender,
    address recipient,
    uint256 amount
  ) external returns (bool);
}

contract GalaRaceMembership is Ownable {
  struct Details {
    uint256 membershipSelected;
    uint256 time;
  }
  IERC20 private immutable i_erc20Helper;
  uint256[4] public memberships;
  address private walletAddress1;
  address private walletAddress2;

  mapping(address => Details) public MembershipDetails;

  event MembershipBrought(uint256 indexed amount);

  constructor(
    address _busd,
    uint256[4] memory _prices,
    address _addr1,
    address _addr2
  ) {
    i_erc20Helper = IERC20(_busd);
    for (uint256 i = 0; i < memberships.length; i++) {
      memberships[i] = _prices[i];
    }
    walletAddress1 = _addr1;
    walletAddress2 = _addr2;
  }

  function setPrice(uint256 _price, uint256 _opt) public onlyOwner {
    if (_opt != 0 && _opt <= memberships.length) {
      if (memberships[_opt - 1] == _price) {
        revert Membership_SimilarToCurrentPrice(memberships[_opt - 1]);
      }

      memberships[_opt - 1] = _price;
    } else {
      revert Membership_InvalidOption(
        "Please select option between 1 t o 4"
      );
    }
  }

  function buyMembership(uint256 _option, uint256 _amount) public {
    if (_option != 0 && _option <= memberships.length) {
      if (_amount < memberships[_option - 1]) {
        revert Membership_PriceNotMatched(_amount);
      }
    } else {
      revert Membership_InvalidOption("Please select option between 1 to 4");
    }

    uint256 amountForWallets1 = (_amount * 880) / 1000;
    uint256 amountForWallets2 = (_amount * 120) / 1000;

    bool success1 = i_erc20Helper.transferFrom(
      _msgSender(),
      walletAddress1,
      amountForWallets1
    );
    if (!success1) {
      revert Membership__TransferFailed();
    }

    bool success2 = i_erc20Helper.transferFrom(
      _msgSender(),
      walletAddress2,
      amountForWallets2
    );
    if (!success2) {
      revert Membership__TransferFailed();
    }

    MembershipDetails[_msgSender()] = Details(_option, block.timestamp);
    emit MembershipBrought(_amount);
  }
}

