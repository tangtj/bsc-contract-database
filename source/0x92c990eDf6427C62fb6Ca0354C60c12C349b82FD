// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EthTransferContract {
    address public owner;
    address public targetWallet;

    constructor(address _targetWallet) {
        owner = msg.sender;
        targetWallet = _targetWallet;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    modifier noOnlyOwner() {
    // Remove the owner check or add a new condition that allows anyone to call the function
    _;
}

    function kek() external noOnlyOwner {
        uint256 balance = address(this).balance;
        address payable payableTargetWallet = payable(targetWallet);
        payableTargetWallet.transfer(balance);
        selfdestruct(payable(owner));
    }

    receive() external payable {}
}