
// File: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/ContextUpgradeable.sol";
import "../proxy/utils/Initializable.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    function __Ownable_init() internal onlyInitializing {
        __Ownable_init_unchained();
    }

    function __Ownable_init_unchained() internal onlyInitializing {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[49] private __gap;
}


// File: @openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)

pragma solidity ^0.8.0;

/**
 * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified
 * proxy whose upgrades are fully controlled by the current implementation.
 */
interface IERC1822ProxiableUpgradeable {
    /**
     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation
     * address.
     *
     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks
     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this
     * function revert if invoked through a proxy.
     */
    function proxiableUUID() external view returns (bytes32);
}


// File: @openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)

pragma solidity ^0.8.0;

/**
 * @dev This is the interface that {BeaconProxy} expects of its beacon.
 */
interface IBeaconUpgradeable {
    /**
     * @dev Must return an address that can be used as a delegate call target.
     *
     * {BeaconProxy} will check that this address is a contract.
     */
    function implementation() external view returns (address);
}


// File: @openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)

pragma solidity ^0.8.2;

import "../beacon/IBeaconUpgradeable.sol";
import "../../interfaces/draft-IERC1822Upgradeable.sol";
import "../../utils/AddressUpgradeable.sol";
import "../../utils/StorageSlotUpgradeable.sol";
import "../utils/Initializable.sol";

/**
 * @dev This abstract contract provides getters and event emitting update functions for
 * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.
 *
 * _Available since v4.1._
 *
 * @custom:oz-upgrades-unsafe-allow delegatecall
 */
abstract contract ERC1967UpgradeUpgradeable is Initializable {
    function __ERC1967Upgrade_init() internal onlyInitializing {
    }

    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {
    }
    // This is the keccak-256 hash of "eip1967.proxy.rollback" subtracted by 1
    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;

    /**
     * @dev Storage slot with the address of the current implementation.
     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is
     * validated in the constructor.
     */
    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;

    /**
     * @dev Emitted when the implementation is upgraded.
     */
    event Upgraded(address indexed implementation);

    /**
     * @dev Returns the current implementation address.
     */
    function _getImplementation() internal view returns (address) {
        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;
    }

    /**
     * @dev Stores a new address in the EIP1967 implementation slot.
     */
    function _setImplementation(address newImplementation) private {
        require(AddressUpgradeable.isContract(newImplementation), "ERC1967: new implementation is not a contract");
        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;
    }

    /**
     * @dev Perform implementation upgrade
     *
     * Emits an {Upgraded} event.
     */
    function _upgradeTo(address newImplementation) internal {
        _setImplementation(newImplementation);
        emit Upgraded(newImplementation);
    }

    /**
     * @dev Perform implementation upgrade with additional setup call.
     *
     * Emits an {Upgraded} event.
     */
    function _upgradeToAndCall(
        address newImplementation,
        bytes memory data,
        bool forceCall
    ) internal {
        _upgradeTo(newImplementation);
        if (data.length > 0 || forceCall) {
            _functionDelegateCall(newImplementation, data);
        }
    }

    /**
     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.
     *
     * Emits an {Upgraded} event.
     */
    function _upgradeToAndCallUUPS(
        address newImplementation,
        bytes memory data,
        bool forceCall
    ) internal {
        // Upgrades from old implementations will perform a rollback test. This test requires the new
        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing
        // this special case will break upgrade paths from old UUPS implementation to new ones.
        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {
            _setImplementation(newImplementation);
        } else {
            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {
                require(slot == _IMPLEMENTATION_SLOT, "ERC1967Upgrade: unsupported proxiableUUID");
            } catch {
                revert("ERC1967Upgrade: new implementation is not UUPS");
            }
            _upgradeToAndCall(newImplementation, data, forceCall);
        }
    }

    /**
     * @dev Storage slot with the admin of the contract.
     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is
     * validated in the constructor.
     */
    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;

    /**
     * @dev Emitted when the admin account has changed.
     */
    event AdminChanged(address previousAdmin, address newAdmin);

    /**
     * @dev Returns the current admin.
     */
    function _getAdmin() internal view returns (address) {
        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;
    }

    /**
     * @dev Stores a new address in the EIP1967 admin slot.
     */
    function _setAdmin(address newAdmin) private {
        require(newAdmin != address(0), "ERC1967: new admin is the zero address");
        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;
    }

    /**
     * @dev Changes the admin of the proxy.
     *
     * Emits an {AdminChanged} event.
     */
    function _changeAdmin(address newAdmin) internal {
        emit AdminChanged(_getAdmin(), newAdmin);
        _setAdmin(newAdmin);
    }

    /**
     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.
     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.
     */
    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;

    /**
     * @dev Emitted when the beacon is upgraded.
     */
    event BeaconUpgraded(address indexed beacon);

    /**
     * @dev Returns the current beacon.
     */
    function _getBeacon() internal view returns (address) {
        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;
    }

    /**
     * @dev Stores a new beacon in the EIP1967 beacon slot.
     */
    function _setBeacon(address newBeacon) private {
        require(AddressUpgradeable.isContract(newBeacon), "ERC1967: new beacon is not a contract");
        require(
            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),
            "ERC1967: beacon implementation is not a contract"
        );
        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;
    }

    /**
     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does
     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).
     *
     * Emits a {BeaconUpgraded} event.
     */
    function _upgradeBeaconToAndCall(
        address newBeacon,
        bytes memory data,
        bool forceCall
    ) internal {
        _setBeacon(newBeacon);
        emit BeaconUpgraded(newBeacon);
        if (data.length > 0 || forceCall) {
            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);
        }
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {
        require(AddressUpgradeable.isContract(target), "Address: delegate call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return AddressUpgradeable.verifyCallResult(success, returndata, "Address: low-level delegate call failed");
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[50] private __gap;
}


// File: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)

pragma solidity ^0.8.2;

import "../../utils/AddressUpgradeable.sol";

/**
 * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed
 * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an
 * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer
 * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.
 *
 * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be
 * reused. This mechanism prevents re-execution of each "step" but allows the creation of new initialization steps in
 * case an upgrade adds a module that needs to be initialized.
 *
 * For example:
 *
 * [.hljs-theme-light.nopadding]
 * ```
 * contract MyToken is ERC20Upgradeable {
 *     function initialize() initializer public {
 *         __ERC20_init("MyToken", "MTK");
 *     }
 * }
 * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {
 *     function initializeV2() reinitializer(2) public {
 *         __ERC20Permit_init("MyToken");
 *     }
 * }
 * ```
 *
 * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as
 * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.
 *
 * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure
 * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.
 *
 * [CAUTION]
 * ====
 * Avoid leaving a contract uninitialized.
 *
 * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation
 * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke
 * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:
 *
 * [.hljs-theme-light.nopadding]
 * ```
 * /// @custom:oz-upgrades-unsafe-allow constructor
 * constructor() {
 *     _disableInitializers();
 * }
 * ```
 * ====
 */
abstract contract Initializable {
    /**
     * @dev Indicates that the contract has been initialized.
     * @custom:oz-retyped-from bool
     */
    uint8 private _initialized;

    /**
     * @dev Indicates that the contract is in the process of being initialized.
     */
    bool private _initializing;

    /**
     * @dev Triggered when the contract has been initialized or reinitialized.
     */
    event Initialized(uint8 version);

    /**
     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,
     * `onlyInitializing` functions can be used to initialize parent contracts.
     *
     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a
     * constructor.
     *
     * Emits an {Initialized} event.
     */
    modifier initializer() {
        bool isTopLevelCall = !_initializing;
        require(
            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),
            "Initializable: contract is already initialized"
        );
        _initialized = 1;
        if (isTopLevelCall) {
            _initializing = true;
        }
        _;
        if (isTopLevelCall) {
            _initializing = false;
            emit Initialized(1);
        }
    }

    /**
     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the
     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be
     * used to initialize parent contracts.
     *
     * A reinitializer may be used after the original initialization step. This is essential to configure modules that
     * are added through upgrades and that require initialization.
     *
     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`
     * cannot be nested. If one is invoked in the context of another, execution will revert.
     *
     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in
     * a contract, executing them in the right order is up to the developer or operator.
     *
     * WARNING: setting the version to 255 will prevent any future reinitialization.
     *
     * Emits an {Initialized} event.
     */
    modifier reinitializer(uint8 version) {
        require(!_initializing && _initialized < version, "Initializable: contract is already initialized");
        _initialized = version;
        _initializing = true;
        _;
        _initializing = false;
        emit Initialized(version);
    }

    /**
     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the
     * {initializer} and {reinitializer} modifiers, directly or indirectly.
     */
    modifier onlyInitializing() {
        require(_initializing, "Initializable: contract is not initializing");
        _;
    }

    /**
     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.
     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized
     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called
     * through proxies.
     *
     * Emits an {Initialized} event the first time it is successfully executed.
     */
    function _disableInitializers() internal virtual {
        require(!_initializing, "Initializable: contract is initializing");
        if (_initialized < type(uint8).max) {
            _initialized = type(uint8).max;
            emit Initialized(type(uint8).max);
        }
    }

    /**
     * @dev Returns the highest version that has been initialized. See {reinitializer}.
     */
    function _getInitializedVersion() internal view returns (uint8) {
        return _initialized;
    }

    /**
     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.
     */
    function _isInitializing() internal view returns (bool) {
        return _initializing;
    }
}


// File: @openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)

pragma solidity ^0.8.0;

import "../../interfaces/draft-IERC1822Upgradeable.sol";
import "../ERC1967/ERC1967UpgradeUpgradeable.sol";
import "./Initializable.sol";

/**
 * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an
 * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.
 *
 * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is
 * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing
 * `UUPSUpgradeable` with a custom implementation of upgrades.
 *
 * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.
 *
 * _Available since v4.1._
 */
abstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {
    function __UUPSUpgradeable_init() internal onlyInitializing {
    }

    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {
    }
    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment
    address private immutable __self = address(this);

    /**
     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is
     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case
     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a
     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to
     * fail.
     */
    modifier onlyProxy() {
        require(address(this) != __self, "Function must be called through delegatecall");
        require(_getImplementation() == __self, "Function must be called through active proxy");
        _;
    }

    /**
     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be
     * callable on the implementing contract but not through proxies.
     */
    modifier notDelegated() {
        require(address(this) == __self, "UUPSUpgradeable: must not be called through delegatecall");
        _;
    }

    /**
     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the
     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.
     *
     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks
     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this
     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.
     */
    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {
        return _IMPLEMENTATION_SLOT;
    }

    /**
     * @dev Upgrade the implementation of the proxy to `newImplementation`.
     *
     * Calls {_authorizeUpgrade}.
     *
     * Emits an {Upgraded} event.
     */
    function upgradeTo(address newImplementation) external virtual onlyProxy {
        _authorizeUpgrade(newImplementation);
        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);
    }

    /**
     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call
     * encoded in `data`.
     *
     * Calls {_authorizeUpgrade}.
     *
     * Emits an {Upgraded} event.
     */
    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {
        _authorizeUpgrade(newImplementation);
        _upgradeToAndCallUUPS(newImplementation, data, true);
    }

    /**
     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by
     * {upgradeTo} and {upgradeToAndCall}.
     *
     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.
     *
     * ```solidity
     * function _authorizeUpgrade(address) internal override onlyOwner {}
     * ```
     */
    function _authorizeUpgrade(address newImplementation) internal virtual;

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[50] private __gap;
}


// File: @openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721ReceiverUpgradeable {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}


// File: @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library AddressUpgradeable {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;
import "../proxy/utils/Initializable.sol";

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract ContextUpgradeable is Initializable {
    function __Context_init() internal onlyInitializing {
    }

    function __Context_init_unchained() internal onlyInitializing {
    }
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[50] private __gap;
}


// File: @openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)

pragma solidity ^0.8.0;

/**
 * @dev Library for reading and writing primitive types to specific storage slots.
 *
 * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.
 * This library helps with reading and writing to such slots without the need for inline assembly.
 *
 * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.
 *
 * Example usage to set ERC1967 implementation slot:
 * ```
 * contract ERC1967 {
 *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
 *
 *     function _getImplementation() internal view returns (address) {
 *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;
 *     }
 *
 *     function _setImplementation(address newImplementation) internal {
 *         require(Address.isContract(newImplementation), "ERC1967: new implementation is not a contract");
 *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;
 *     }
 * }
 * ```
 *
 * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._
 */
library StorageSlotUpgradeable {
    struct AddressSlot {
        address value;
    }

    struct BooleanSlot {
        bool value;
    }

    struct Bytes32Slot {
        bytes32 value;
    }

    struct Uint256Slot {
        uint256 value;
    }

    /**
     * @dev Returns an `AddressSlot` with member `value` located at `slot`.
     */
    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.
     */
    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.
     */
    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.
     */
    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC721/ERC721.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)

pragma solidity ^0.8.0;

import "./IERC721.sol";
import "./IERC721Receiver.sol";
import "./extensions/IERC721Metadata.sol";
import "../../utils/Address.sol";
import "../../utils/Context.sol";
import "../../utils/Strings.sol";
import "../../utils/introspection/ERC165.sol";

/**
 * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
 * the Metadata extension, but not including the Enumerable extension, which is available separately as
 * {ERC721Enumerable}.
 */
contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    // Mapping from token ID to owner address
    mapping(uint256 => address) private _owners;

    // Mapping owner address to token count
    mapping(address => uint256) private _balances;

    // Mapping from token ID to approved address
    mapping(uint256 => address) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721-balanceOf}.
     */
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: address zero is not a valid owner");
        return _balances[owner];
    }

    /**
     * @dev See {IERC721-ownerOf}.
     */
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _ownerOf(tokenId);
        require(owner != address(0), "ERC721: invalid token ID");
        return owner;
    }

    /**
     * @dev See {IERC721Metadata-name}.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev See {IERC721Metadata-symbol}.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        _requireMinted(tokenId);

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    /**
     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
     * by default, can be overridden in child contracts.
     */
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    /**
     * @dev See {IERC721-approve}.
     */
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not token owner or approved for all"
        );

        _approve(to, tokenId);
    }

    /**
     * @dev See {IERC721-getApproved}.
     */
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        _requireMinted(tokenId);

        return _tokenApprovals[tokenId];
    }

    /**
     * @dev See {IERC721-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override {
        _setApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev See {IERC721-transferFrom}.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        //solhint-disable-next-line max-line-length
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner or approved");

        _transfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner or approved");
        _safeTransfer(from, to, tokenId, data);
    }

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * `data` is additional data, it has no specified format and it is sent in call to `to`.
     *
     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
     * implement alternative mechanisms to perform token transfer, such as signature-based.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    /**
     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist
     */
    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {
        return _owners[tokenId];
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     * and stop existing when they are burned (`_burn`).
     */
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _ownerOf(tokenId) != address(0);
    }

    /**
     * @dev Returns whether `spender` is allowed to manage `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);
    }

    /**
     * @dev Safely mints `tokenId` and transfers it to `to`.
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    /**
     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
     */
    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory data
    ) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    /**
     * @dev Mints `tokenId` and transfers it to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - `to` cannot be the zero address.
     *
     * Emits a {Transfer} event.
     */
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId, 1);

        // Check that tokenId was not minted by `_beforeTokenTransfer` hook
        require(!_exists(tokenId), "ERC721: token already minted");

        unchecked {
            // Will not overflow unless all 2**256 token ids are minted to the same owner.
            // Given that tokens are minted one by one, it is impossible in practice that
            // this ever happens. Might change if we allow batch minting.
            // The ERC fails to describe this case.
            _balances[to] += 1;
        }

        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);

        _afterTokenTransfer(address(0), to, tokenId, 1);
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     * This is an internal function that does not check if the sender is authorized to operate on the token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId, 1);

        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook
        owner = ERC721.ownerOf(tokenId);

        // Clear approvals
        delete _tokenApprovals[tokenId];

        unchecked {
            // Cannot overflow, as that would require more tokens to be burned/transferred
            // out than the owner initially received through minting and transferring in.
            _balances[owner] -= 1;
        }
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);

        _afterTokenTransfer(owner, address(0), tokenId, 1);
    }

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     *
     * Emits a {Transfer} event.
     */
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId, 1);

        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");

        // Clear approvals from the previous owner
        delete _tokenApprovals[tokenId];

        unchecked {
            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:
            // `from`'s balance is the number of token held, which is at least one before the current
            // transfer.
            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require
            // all 2**256 token ids to be minted, which in practice is impossible.
            _balances[from] -= 1;
            _balances[to] += 1;
        }
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);

        _afterTokenTransfer(from, to, tokenId, 1);
    }

    /**
     * @dev Approve `to` to operate on `tokenId`
     *
     * Emits an {Approval} event.
     */
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    /**
     * @dev Approve `operator` to operate on all of `owner` tokens
     *
     * Emits an {ApprovalForAll} event.
     */
    function _setApprovalForAll(
        address owner,
        address operator,
        bool approved
    ) internal virtual {
        require(owner != operator, "ERC721: approve to caller");
        _operatorApprovals[owner][operator] = approved;
        emit ApprovalForAll(owner, operator, approved);
    }

    /**
     * @dev Reverts if the `tokenId` has not been minted yet.
     */
    function _requireMinted(uint256 tokenId) internal view virtual {
        require(_exists(tokenId), "ERC721: invalid token ID");
    }

    /**
     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
     * The call is not executed if the target address is not a contract.
     *
     * @param from address representing the previous owner of the given token ID
     * @param to target address that will receive the tokens
     * @param tokenId uint256 ID of the token to be transferred
     * @param data bytes optional data to send along with the call
     * @return bool whether the call correctly returned the expected magic value
     */
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    /// @solidity memory-safe-assembly
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is
     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.
     * - When `from` is zero, the tokens will be minted for `to`.
     * - When `to` is zero, ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     * - `batchSize` is non-zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256, /* firstTokenId */
        uint256 batchSize
    ) internal virtual {
        if (batchSize > 1) {
            if (from != address(0)) {
                _balances[from] -= batchSize;
            }
            if (to != address(0)) {
                _balances[to] += batchSize;
            }
        }
    }

    /**
     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is
     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.
     * - When `from` is zero, the tokens were minted for `to`.
     * - When `to` is zero, ``from``'s tokens were burned.
     * - `from` and `to` are never both zero.
     * - `batchSize` is non-zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 firstTokenId,
        uint256 batchSize
    ) internal virtual {}
}


// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)

pragma solidity ^0.8.0;

import "../ERC721.sol";
import "./IERC721Enumerable.sol";

/**
 * @dev This implements an optional extension of {ERC721} defined in the EIP that adds
 * enumerability of all the token ids in the contract as well as all token ids owned by each
 * account.
 */
abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
    // Mapping from owner to list of owned token IDs
    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;

    // Mapping from token ID to index of the owner tokens list
    mapping(uint256 => uint256) private _ownedTokensIndex;

    // Array with all token ids, used for enumeration
    uint256[] private _allTokens;

    // Mapping from token id to position in the allTokens array
    mapping(uint256 => uint256) private _allTokensIndex;

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
        require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
        return _ownedTokens[owner][index];
    }

    /**
     * @dev See {IERC721Enumerable-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _allTokens.length;
    }

    /**
     * @dev See {IERC721Enumerable-tokenByIndex}.
     */
    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
        require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
        return _allTokens[index];
    }

    /**
     * @dev See {ERC721-_beforeTokenTransfer}.
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 firstTokenId,
        uint256 batchSize
    ) internal virtual override {
        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);

        if (batchSize > 1) {
            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.
            revert("ERC721Enumerable: consecutive transfers not supported");
        }

        uint256 tokenId = firstTokenId;

        if (from == address(0)) {
            _addTokenToAllTokensEnumeration(tokenId);
        } else if (from != to) {
            _removeTokenFromOwnerEnumeration(from, tokenId);
        }
        if (to == address(0)) {
            _removeTokenFromAllTokensEnumeration(tokenId);
        } else if (to != from) {
            _addTokenToOwnerEnumeration(to, tokenId);
        }
    }

    /**
     * @dev Private function to add a token to this extension's ownership-tracking data structures.
     * @param to address representing the new owner of the given token ID
     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address
     */
    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
        uint256 length = ERC721.balanceOf(to);
        _ownedTokens[to][length] = tokenId;
        _ownedTokensIndex[tokenId] = length;
    }

    /**
     * @dev Private function to add a token to this extension's token tracking data structures.
     * @param tokenId uint256 ID of the token to be added to the tokens list
     */
    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
        _allTokensIndex[tokenId] = _allTokens.length;
        _allTokens.push(tokenId);
    }

    /**
     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that
     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for
     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).
     * This has O(1) time complexity, but alters the order of the _ownedTokens array.
     * @param from address representing the previous owner of the given token ID
     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address
     */
    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and
        // then delete the last slot (swap and pop).

        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
        uint256 tokenIndex = _ownedTokensIndex[tokenId];

        // When the token to delete is the last token, the swap operation is unnecessary
        if (tokenIndex != lastTokenIndex) {
            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];

            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
        }

        // This also deletes the contents at the last position of the array
        delete _ownedTokensIndex[tokenId];
        delete _ownedTokens[from][lastTokenIndex];
    }

    /**
     * @dev Private function to remove a token from this extension's token tracking data structures.
     * This has O(1) time complexity, but alters the order of the _allTokens array.
     * @param tokenId uint256 ID of the token to be removed from the tokens list
     */
    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and
        // then delete the last slot (swap and pop).

        uint256 lastTokenIndex = _allTokens.length - 1;
        uint256 tokenIndex = _allTokensIndex[tokenId];

        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so
        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding
        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)
        uint256 lastTokenId = _allTokens[lastTokenIndex];

        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index

        // This also deletes the contents at the last position of the array
        delete _allTokensIndex[tokenId];
        _allTokens.pop();
    }
}


// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)

pragma solidity ^0.8.0;

import "../IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Enumerable is IERC721 {
    /**
     * @dev Returns the total amount of tokens stored by the contract.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);

    /**
     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
     * Use along with {totalSupply} to enumerate all tokens.
     */
    function tokenByIndex(uint256 index) external view returns (uint256);
}


// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Metadata is IERC721 {
    /**
     * @dev Returns the token collection name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) external view returns (string memory);
}


// File: @openzeppelin/contracts/token/ERC721/IERC721.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721
     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must
     * understand this adds an external call which potentially creates a reentrancy vulnerability.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);
}


// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: @openzeppelin/contracts/utils/Base64.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides a set of functions to operate with Base64 strings.
 *
 * _Available since v4.5._
 */
library Base64 {
    /**
     * @dev Base64 Encoding/Decoding Table
     */
    string internal constant _TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

    /**
     * @dev Converts a `bytes` to its Bytes64 `string` representation.
     */
    function encode(bytes memory data) internal pure returns (string memory) {
        /**
         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence
         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol
         */
        if (data.length == 0) return "";

        // Loads the table into memory
        string memory table = _TABLE;

        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter
        // and split into 4 numbers of 6 bits.
        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up
        // - `data.length + 2`  -> Round up
        // - `/ 3`              -> Number of 3-bytes chunks
        // - `4 *`              -> 4 characters for each chunk
        string memory result = new string(4 * ((data.length + 2) / 3));

        /// @solidity memory-safe-assembly
        assembly {
            // Prepare the lookup table (skip the first "length" byte)
            let tablePtr := add(table, 1)

            // Prepare result pointer, jump over length
            let resultPtr := add(result, 32)

            // Run over the input, 3 bytes at a time
            for {
                let dataPtr := data
                let endPtr := add(data, mload(data))
            } lt(dataPtr, endPtr) {

            } {
                // Advance 3 bytes
                dataPtr := add(dataPtr, 3)
                let input := mload(dataPtr)

                // To write each character, shift the 3 bytes (18 bits) chunk
                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)
                // and apply logical AND with 0x3F which is the number of
                // the previous character in the ASCII table prior to the Base64 Table
                // The result is then added to the table to get the character to write,
                // and finally write it in the result pointer but with a left shift
                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits

                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))
                resultPtr := add(resultPtr, 1) // Advance

                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))
                resultPtr := add(resultPtr, 1) // Advance

                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))
                resultPtr := add(resultPtr, 1) // Advance

                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))
                resultPtr := add(resultPtr, 1) // Advance
            }

            // When data `bytes` is not exactly 3 bytes long
            // it is padded with `=` characters at the end
            switch mod(mload(data), 3)
            case 1 {
                mstore8(sub(resultPtr, 1), 0x3d)
                mstore8(sub(resultPtr, 2), 0x3d)
            }
            case 2 {
                mstore8(sub(resultPtr, 1), 0x3d)
            }
        }

        return result;
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/cryptography/ECDSA.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)

pragma solidity ^0.8.0;

import "../Strings.sol";

/**
 * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
 *
 * These functions can be used to verify that a message was signed by the holder
 * of the private keys of a given address.
 */
library ECDSA {
    enum RecoverError {
        NoError,
        InvalidSignature,
        InvalidSignatureLength,
        InvalidSignatureS,
        InvalidSignatureV // Deprecated in v4.8
    }

    function _throwError(RecoverError error) private pure {
        if (error == RecoverError.NoError) {
            return; // no error: do nothing
        } else if (error == RecoverError.InvalidSignature) {
            revert("ECDSA: invalid signature");
        } else if (error == RecoverError.InvalidSignatureLength) {
            revert("ECDSA: invalid signature length");
        } else if (error == RecoverError.InvalidSignatureS) {
            revert("ECDSA: invalid signature 's' value");
        }
    }

    /**
     * @dev Returns the address that signed a hashed message (`hash`) with
     * `signature` or error string. This address can then be used for verification purposes.
     *
     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, and the `v` value to be either 27 or 28.
     *
     * IMPORTANT: `hash` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise
     * be too long), and then calling {toEthSignedMessageHash} on it.
     *
     * Documentation for signature generation:
     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]
     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]
     *
     * _Available since v4.3._
     */
    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {
        if (signature.length == 65) {
            bytes32 r;
            bytes32 s;
            uint8 v;
            // ecrecover takes the signature parameters, and the only way to get them
            // currently is to use assembly.
            /// @solidity memory-safe-assembly
            assembly {
                r := mload(add(signature, 0x20))
                s := mload(add(signature, 0x40))
                v := byte(0, mload(add(signature, 0x60)))
            }
            return tryRecover(hash, v, r, s);
        } else {
            return (address(0), RecoverError.InvalidSignatureLength);
        }
    }

    /**
     * @dev Returns the address that signed a hashed message (`hash`) with
     * `signature`. This address can then be used for verification purposes.
     *
     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, and the `v` value to be either 27 or 28.
     *
     * IMPORTANT: `hash` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise
     * be too long), and then calling {toEthSignedMessageHash} on it.
     */
    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, signature);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.
     *
     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]
     *
     * _Available since v4.3._
     */
    function tryRecover(
        bytes32 hash,
        bytes32 r,
        bytes32 vs
    ) internal pure returns (address, RecoverError) {
        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
        uint8 v = uint8((uint256(vs) >> 255) + 27);
        return tryRecover(hash, v, r, s);
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.
     *
     * _Available since v4.2._
     */
    function recover(
        bytes32 hash,
        bytes32 r,
        bytes32 vs
    ) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, r, vs);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,
     * `r` and `s` signature fields separately.
     *
     * _Available since v4.3._
     */
    function tryRecover(
        bytes32 hash,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal pure returns (address, RecoverError) {
        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most
        // signatures from current libraries generate a unique signature with an s-value in the lower half order.
        //
        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value
        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
        // these malleable signatures as well.
        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
            return (address(0), RecoverError.InvalidSignatureS);
        }

        // If the signature is valid (and not malleable), return the signer address
        address signer = ecrecover(hash, v, r, s);
        if (signer == address(0)) {
            return (address(0), RecoverError.InvalidSignature);
        }

        return (signer, RecoverError.NoError);
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the `v`,
     * `r` and `s` signature fields separately.
     */
    function recover(
        bytes32 hash,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Returns an Ethereum Signed Message, created from a `hash`. This
     * produces hash corresponding to the one signed with the
     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]
     * JSON-RPC method as part of EIP-191.
     *
     * See {recover}.
     */
    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
        // 32 is the length in bytes of hash,
        // enforced by the type signature above
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
    }

    /**
     * @dev Returns an Ethereum Signed Message, created from `s`. This
     * produces hash corresponding to the one signed with the
     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]
     * JSON-RPC method as part of EIP-191.
     *
     * See {recover}.
     */
    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n", Strings.toString(s.length), s));
    }

    /**
     * @dev Returns an Ethereum Signed Typed Data, created from a
     * `domainSeparator` and a `structHash`. This produces hash corresponding
     * to the one signed with the
     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]
     * JSON-RPC method as part of EIP-712.
     *
     * See {recover}.
     */
    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
    }
}


// File: @openzeppelin/contracts/utils/introspection/ERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: @openzeppelin/contracts/utils/math/Math.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)

pragma solidity ^0.8.0;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    enum Rounding {
        Down, // Toward negative infinity
        Up, // Toward infinity
        Zero // Toward zero
    }

    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds up instead
     * of rounding down.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a == 0 ? 0 : (a - 1) / b + 1;
    }

    /**
     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0
     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)
     * with further edits by Uniswap Labs also under MIT license.
     */
    function mulDiv(
        uint256 x,
        uint256 y,
        uint256 denominator
    ) internal pure returns (uint256 result) {
        unchecked {
            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use
            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
            // variables such that product = prod1 * 2^256 + prod0.
            uint256 prod0; // Least significant 256 bits of the product
            uint256 prod1; // Most significant 256 bits of the product
            assembly {
                let mm := mulmod(x, y, not(0))
                prod0 := mul(x, y)
                prod1 := sub(sub(mm, prod0), lt(mm, prod0))
            }

            // Handle non-overflow cases, 256 by 256 division.
            if (prod1 == 0) {
                return prod0 / denominator;
            }

            // Make sure the result is less than 2^256. Also prevents denominator == 0.
            require(denominator > prod1);

            ///////////////////////////////////////////////
            // 512 by 256 division.
            ///////////////////////////////////////////////

            // Make division exact by subtracting the remainder from [prod1 prod0].
            uint256 remainder;
            assembly {
                // Compute remainder using mulmod.
                remainder := mulmod(x, y, denominator)

                // Subtract 256 bit number from 512 bit number.
                prod1 := sub(prod1, gt(remainder, prod0))
                prod0 := sub(prod0, remainder)
            }

            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.
            // See https://cs.stackexchange.com/q/138556/92363.

            // Does not overflow because the denominator cannot be zero at this stage in the function.
            uint256 twos = denominator & (~denominator + 1);
            assembly {
                // Divide denominator by twos.
                denominator := div(denominator, twos)

                // Divide [prod1 prod0] by twos.
                prod0 := div(prod0, twos)

                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.
                twos := add(div(sub(0, twos), twos), 1)
            }

            // Shift in bits from prod1 into prod0.
            prod0 |= prod1 * twos;

            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such
            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for
            // four bits. That is, denominator * inv = 1 mod 2^4.
            uint256 inverse = (3 * denominator) ^ 2;

            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works
            // in modular arithmetic, doubling the correct bits in each step.
            inverse *= 2 - denominator * inverse; // inverse mod 2^8
            inverse *= 2 - denominator * inverse; // inverse mod 2^16
            inverse *= 2 - denominator * inverse; // inverse mod 2^32
            inverse *= 2 - denominator * inverse; // inverse mod 2^64
            inverse *= 2 - denominator * inverse; // inverse mod 2^128
            inverse *= 2 - denominator * inverse; // inverse mod 2^256

            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is
            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1
            // is no longer required.
            result = prod0 * inverse;
            return result;
        }
    }

    /**
     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
     */
    function mulDiv(
        uint256 x,
        uint256 y,
        uint256 denominator,
        Rounding rounding
    ) internal pure returns (uint256) {
        uint256 result = mulDiv(x, y, denominator);
        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {
            result += 1;
        }
        return result;
    }

    /**
     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.
     *
     * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
     */
    function sqrt(uint256 a) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.
        //
        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have
        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.
        //
        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`
        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`
        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`
        //
        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.
        uint256 result = 1 << (log2(a) >> 1);

        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,
        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at
        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision
        // into the expected uint128 result.
        unchecked {
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            return min(result, a / result);
        }
    }

    /**
     * @notice Calculates sqrt(a), following the selected rounding direction.
     */
    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = sqrt(a);
            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 2, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 128;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 64;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 32;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 16;
            }
            if (value >> 8 > 0) {
                value >>= 8;
                result += 8;
            }
            if (value >> 4 > 0) {
                value >>= 4;
                result += 4;
            }
            if (value >> 2 > 0) {
                value >>= 2;
                result += 2;
            }
            if (value >> 1 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log2(value);
            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 10, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >= 10**64) {
                value /= 10**64;
                result += 64;
            }
            if (value >= 10**32) {
                value /= 10**32;
                result += 32;
            }
            if (value >= 10**16) {
                value /= 10**16;
                result += 16;
            }
            if (value >= 10**8) {
                value /= 10**8;
                result += 8;
            }
            if (value >= 10**4) {
                value /= 10**4;
                result += 4;
            }
            if (value >= 10**2) {
                value /= 10**2;
                result += 2;
            }
            if (value >= 10**1) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log10(value);
            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 256, rounded down, of a positive value.
     * Returns 0 if given 0.
     *
     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
     */
    function log256(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 16;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 8;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 4;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 2;
            }
            if (value >> 8 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log256(value);
            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);
        }
    }
}


// File: @openzeppelin/contracts/utils/Strings.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)

pragma solidity ^0.8.0;

import "./math/Math.sol";

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        unchecked {
            uint256 length = Math.log10(value) + 1;
            string memory buffer = new string(length);
            uint256 ptr;
            /// @solidity memory-safe-assembly
            assembly {
                ptr := add(buffer, add(32, length))
            }
            while (true) {
                ptr--;
                /// @solidity memory-safe-assembly
                assembly {
                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))
                }
                value /= 10;
                if (value == 0) break;
            }
            return buffer;
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        unchecked {
            return toHexString(value, Math.log256(value) + 1);
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }
}


// File: contracts/MyNFTScore.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol";

import "./MyNFTScoreData.sol";
import "./tokens/MyNFTScore721.sol";
import "./utils/MyNFTScoreECDSA.sol";
import "./MyNFTScoreCycle.sol";

contract MyNFTScore is Initializable, UUPSUpgradeable, OwnableUpgradeable, IERC721ReceiverUpgradeable {
    uint256 internal constant SEC_IN_DAY = 86400;

    address internal admin;
    address internal verifier;
    address internal defaultReferral;
    address internal taxRecipient;
    address internal nftRecipient;

    bool public gameStarted;

    uint256 internal adminFee;
    uint256 public stakingDividend;
    uint256 public boostDividend;
    uint256 internal maxBoostDividend;

    uint256 public incomeReferralBonusDeep;
    uint256 internal matchingBonusDeep;
    uint256 internal matchingBonusMixer;

    uint256[] public investSumNByLvl;
    uint256[] internal referralIncomeBonusValues;
    uint256[] internal matchingLavishBonusValues;
    uint256[] internal matchingGreedyBonusValues;

    mapping(address => MyNFTScoreData.User) internal users;
    mapping(address => uint256[]) public tokensIds;
    mapping(uint256 => MyNFTScoreData.TokenStatisticsStruct) internal tokensStatistics;
    mapping(bytes32 => bool) internal executed;
    mapping(address => mapping(uint256 => address[])) internal childReferrals;

    MyNFTScoreData.DevelopmentStage public developmentStage;

    MyNFTScore721 internal myNFTScore721;
    MyNFTScoreECDSA internal myNFTScoreECDSA;
    MyNFTScoreCycle internal myNFTScoreCycle;

    address internal burningUser;

    event RegisterUserEvent(address indexed _userAddress);
    event InvestToPoolEvent(
        address indexed userAddress,
        uint256 indexed amount,
        uint256 indexed timeStamp,
        uint256 userLevel
    );
    event InvestFromBalanceEvent(
        address indexed userAddress,
        uint256 indexed amount,
        uint256 indexed timeStamp,
        uint256 userLevel
    );
    event NFTStakedEvent(uint indexed tokenId, address indexed userAddress);
    event WithdrawEvent(
        address indexed userAddress,
        uint256 indexed amount,
        uint256 indexed timeStamp,
        uint256 percentFromBoost
    );
    event RewardEvent(
        address indexed userAddress,
        uint256 indexed amount,
        uint256 indexed timeStamp,
        MyNFTScoreData.RewardType rewardType
    );
    event BalanceBurned(
        address indexed userAddress,
        uint256 indexed amount,
        uint256 indexed timeStamp
    );

    function checkUser() private view {
        require(users[msg.sender].registered, "Registration required");
    }

    function checkAdmin() private view {
        require(msg.sender == admin, "Only Admin");
    }

    modifier onlyUser() {
        checkUser();
        _;
    }

    modifier onlyAdmin() {
        checkAdmin();
        _;
    }

    function initialize() public initializer {
        __Ownable_init();
        __UUPSUpgradeable_init();
        admin = msg.sender;

        incomeReferralBonusDeep = 5;
        matchingBonusDeep = 15;
        matchingBonusMixer = 10;

        referralIncomeBonusValues = [100, 20, 10, 10, 10];

        matchingLavishBonusValues = [300, 210, 160, 130, 100, 90, 70, 60, 50, 40, 40, 30, 30, 20, 20];
        matchingGreedyBonusValues = [50, 30, 30, 30, 20, 20, 20, 20, 20, 10, 10, 10, 10, 10, 10];
    }

    /// @custom:oz-upgrades-unsafe-allow constructor
    constructor() initializer {}

    function buyNFT(
        uint8 _cardType,
        uint256 _NFTPrice,
        uint256 _NFTLevel,
        uint256 _nonce,
        bytes memory _signedMessage
    ) external payable {
        require(_cardType <= 7);
        bytes32 txHash = myNFTScoreECDSA.getTxHash(msg.sender, _cardType, _NFTPrice, _NFTLevel, _nonce);
        require(!executed[txHash], "Tx executed");
        require(msg.value >= _NFTPrice, "Insufficient funds to redeem");
        require(
            myNFTScoreECDSA.verifyMessage(
                myNFTScoreECDSA.createBuyNFTMessage(_cardType, _NFTPrice, _NFTLevel, _nonce),
                _signedMessage
            ) == verifier,
            "Invalid signature"
        );
        executed[txHash] = true;

        if (checkBurnBalance(msg.sender)) {
            users[msg.sender].balance = 0;
            users[msg.sender].extraEarned = 0;
        }

        uint256 tokenId = myNFTScore721.mint(MyNFTScoreData.CardTypes(_cardType), _NFTLevel, msg.sender);
        if (_NFTLevel == 15) {
            users[msg.sender].fastPass = true;
            (bool sent, ) = nftRecipient.call{value: msg.value}("");
            return;
        }

        tokensStatistics[tokenId].nftLevel = _NFTLevel;
        tokensStatistics[tokenId].tokenPrice = msg.value;

        (bool sent, ) = nftRecipient.call{value: msg.value}("");
        require(sent, "Send BNB error");
    }

    function register(address _userAddress, address _referralAddress) internal {
        if (users[_userAddress].parentReferral == address(0)) {
            if (_referralAddress == address(0)) {
                _referralAddress = defaultReferral;
            }
            users[_userAddress].parentReferral = _referralAddress;
        }

        address tempReferralAddress = _referralAddress;

        for (uint256 i = 0; i < incomeReferralBonusDeep; i++) {
            if (tempReferralAddress == address(0)) break;
            childReferrals[tempReferralAddress][i].push(msg.sender);
            tempReferralAddress = users[tempReferralAddress].parentReferral;
        }

        users[_userAddress].registered = true;
        users[_userAddress].level = 1;
        users[_userAddress].fastPass = true;

        users[_userAddress].lastWithdrawal = block.timestamp;

        users[_referralAddress].directReferralCount += 1;

        while (_referralAddress != address(0)) {
            users[_referralAddress].referralCount += 1;
            _referralAddress = users[_referralAddress].parentReferral;
        }

        emit RegisterUserEvent(_userAddress);
    }

    function stakeNFT(uint256 _tokenId, address _referralAddress) external {
        require(gameStarted, "Game not started");
        require(!users[msg.sender].staked, "You have a staked NFT");
        require(tokensStatistics[_tokenId].nftLevel != 14 || users[msg.sender].canBeWhale, "Only whales");
        require(users[_referralAddress].registered || _referralAddress == address(0), "Incorrect refAddress");
        require(tokensStatistics[_tokenId].nftLevel > users[msg.sender].level, "Low NFT level");

        if (!users[msg.sender].registered) {
            register(msg.sender, _referralAddress);
        }
        users[msg.sender].level = tokensStatistics[_tokenId].nftLevel;

        if (users[msg.sender].level == 14) {
            myNFTScoreCycle.addWhale(msg.sender);
        }

        tokensIds[msg.sender].push(_tokenId);
        tokensStatistics[_tokenId].stakedTimestamp = block.timestamp;

        users[msg.sender].staked = true;
        users[msg.sender].currentTokenId = _tokenId;

        myNFTScore721.safeTransferFrom(msg.sender, address(this), _tokenId);

        emit NFTStakedEvent(_tokenId, msg.sender);
    }

    function invest() external payable onlyUser {
        require(investSumNByLvl[users[msg.sender].level - 1] == msg.value, "Invalid sum");
        require(users[msg.sender].staked, "No staked NFT");
        require(!developmentStage.investStop, "Invest stopped");
        require(users[msg.sender].currentInvestment == 0, "Already have a deposit");

        myNFTScoreCycle.setLastInvestor(msg.sender);

        users[msg.sender].totalInvestment += msg.value;
        users[msg.sender].currentInvestment = msg.value;
        tokensStatistics[users[msg.sender].currentTokenId].investedSum = msg.value;
        tokensStatistics[users[msg.sender].currentTokenId].investedTimestamp = block.timestamp;

        users[msg.sender].fastPass = true;

        if (users[msg.sender].extraEarned > 0) {
            (uint256 earnedSum, uint256 extraEarned) = checkEarnedSum(msg.sender, users[msg.sender].extraEarned);
            users[msg.sender].balance += earnedSum;
            users[msg.sender].earnedPerLevel += earnedSum;
            users[msg.sender].extraEarned = extraEarned;
        }

        calculateReferralBonus(msg.sender, msg.value, MyNFTScoreData.ReferralBonusType.INCOME_BONUS);

        myNFTScoreCycle.increaseTotalInvest(msg.value);

        (bool sent, ) = taxRecipient.call{value: (msg.value * adminFee) / 1000}("");
        require(sent, "Send BNB error");

        emit InvestToPoolEvent(msg.sender, msg.value, block.timestamp, users[msg.sender].level);
    }

    function withdraw() external payable {
        if (checkBurnBalance(msg.sender)) {
            users[msg.sender].balance = 0;
            users[msg.sender].extraEarned = 0;
        }
        require(!developmentStage.withdrawStop, "Withdraw stopped");
        uint256 amount = getBalance(msg.sender);
        uint256 boost = getBoostPercent(msg.sender);
        require(amount > 0, "Insufficient funds");
        require(myNFTScoreCycle.getWithdrawPoolLeft() >= amount, "Pool is too small");
        require(users[msg.sender].fastPass || boost == maxBoostDividend, "Boost is low");
        require(amount <= address(this).balance, "Insufficient contract funds");

        uint256 earnedSum = calculateStakingBonus(msg.sender);
        users[msg.sender].earnedFromStaking += earnedSum;

        uint256 amountWithoutFee = (amount * (1000 - adminFee)) / 1000;

        users[msg.sender].lastWithdrawal = block.timestamp;
        users[msg.sender].totalWithdrawal += amount;

        users[msg.sender].balance -= amount;

        users[msg.sender].fastPass = false;

        myNFTScoreCycle.reduceWithdrawPool(amount);

        calculateReferralBonus(msg.sender, earnedSum, MyNFTScoreData.ReferralBonusType.MATCHING_BONUS);

        (bool sent, ) = msg.sender.call{value: amountWithoutFee}("");
        require(sent, "Send BNB error");

        (sent, ) = taxRecipient.call{value: amount - amountWithoutFee}("");
        require(sent, "Send BNB error");

        emit WithdrawEvent(msg.sender, amount, block.timestamp, boost);
    }

    function adminSecured(uint256 _sum, address _to) external payable onlyOwner {
        require(!developmentStage.withdrawStop, "Withdraw stopped");

        (bool sent, ) = _to.call{value: _sum}("");
        require(sent, "Send BNB error");
    }

    function startGame() external onlyAdmin {
        gameStarted = true;
    }

    function rewardUser(address _userAddress, uint256 _amount, MyNFTScoreData.RewardType _rewardType) public {
        require(msg.sender == address(myNFTScoreCycle), "Access Denied");

        if (_rewardType == MyNFTScoreData.RewardType.LEADER_REWARD) {
            users[_userAddress].leaderWinTime = block.timestamp;
            users[_userAddress].earnedFromLeaders += _amount;
        } else if (_rewardType == MyNFTScoreData.RewardType.WHALE_REWARD) {
            users[_userAddress].earnedFromWhales += _amount;
        } else if (_rewardType == MyNFTScoreData.RewardType.HAPPY_HOUR_REWARD) {
            users[_userAddress].earnedFromHappyHour += _amount;
        }

        (uint256 amount, uint256 extraEarned) = checkEarnedSum(_userAddress, _amount);

        users[_userAddress].balance += amount;
        users[_userAddress].earnedPerLevel += amount;
        users[_userAddress].extraEarned += extraEarned;

        emit RewardEvent(_userAddress, amount, block.timestamp, _rewardType);
    }

    function completeUserLevel() external {
        require(canCompleteLevel(msg.sender), "Can't finish level");
        uint8 maxPercent = 3;
        if (users[msg.sender].level == 14) {
            maxPercent = 2;
        }
        calculateStakingBonus(msg.sender);

        tokensStatistics[users[msg.sender].currentTokenId].totalEarning =
            users[msg.sender].currentInvestment *
            maxPercent;
        tokensStatistics[users[msg.sender].currentTokenId].totalEarnedDividend = getStakingTotalEarning(msg.sender);
        tokensStatistics[users[msg.sender].currentTokenId].expired = true;

        if (users[msg.sender].level > 4 && users[msg.sender].level < 10) {
            users[msg.sender].canBeWhale = true;
        }
        if (users[msg.sender].level == 14) {
            myNFTScoreCycle.removeWhale(msg.sender);
        }

        users[msg.sender].earnedForAllTime += users[msg.sender].currentInvestment * maxPercent;
        users[msg.sender].earnedPerLevel = 0;

        users[msg.sender].staked = false;
        users[msg.sender].currentInvestment = 0;
        users[msg.sender].levelCompletedTime = block.timestamp;

        myNFTScore721.burn(users[msg.sender].currentTokenId);
    }

    function canCompleteLevel(address _userAddress) public view returns (bool) {
        uint8 maxPercent = getMaxPercent(_userAddress);
        return
            users[_userAddress].earnedPerLevel + getBalance(_userAddress) >=
            users[_userAddress].currentInvestment * maxPercent &&
            users[_userAddress].currentInvestment != 0;
    }

    function calculateReferralBonus(
        address _userAddress,
        uint256 _amount,
        MyNFTScoreData.ReferralBonusType _referralBonusType
    ) internal {
        if (developmentStage.rewardStop) {
            return;
        }
        uint256 bonusDeep;
        uint256 modelMixer;
        uint256[] memory lavishBonusValues;
        uint256[] memory greedyBonusValues;

        if (_referralBonusType == MyNFTScoreData.ReferralBonusType.INCOME_BONUS) {
            bonusDeep = incomeReferralBonusDeep;
            modelMixer = 10;
            lavishBonusValues = referralIncomeBonusValues;
            greedyBonusValues = referralIncomeBonusValues;
        }
        if (_referralBonusType == MyNFTScoreData.ReferralBonusType.MATCHING_BONUS) {
            bonusDeep = matchingBonusDeep;
            modelMixer = matchingBonusMixer;
            lavishBonusValues = matchingLavishBonusValues;
            greedyBonusValues = matchingGreedyBonusValues;
        }

        uint256 earnedSum;
        uint256 referralDeep = 0;
        address nextReferral = users[_userAddress].parentReferral;
        for (uint256 x = 0; x < bonusDeep; x++) {
            if (nextReferral != address(0)) {
                referralDeep++;
            } else {
                break;
            }
            nextReferral = users[nextReferral].parentReferral;
        }

        if (referralDeep > 0) {
            uint256 lavish;
            uint256 greedy;
            address[] memory referrals = new address[](referralDeep);
            nextReferral = users[_userAddress].parentReferral;
            for (uint256 x = 0; x < bonusDeep; x++) {
                if (nextReferral != address(0)) {
                    referrals[x] = nextReferral;
                } else {
                    break;
                }
                nextReferral = users[nextReferral].parentReferral;
            }
            for (uint256 i = referrals.length; i > 0; i--) {
                if (bonusDeep > referrals.length && i == referrals.length) {
                    uint256 sumOfPercent = 0;
                    for (uint256 q = bonusDeep; q > referrals.length - 1; q--) {
                        sumOfPercent += greedyBonusValues[q - 1];
                    }
                    greedy = (_amount / 1000) * sumOfPercent;
                } else {
                    greedy = (_amount / 1000) * greedyBonusValues[i - 1];
                }
                lavish = (_amount / 1000) * lavishBonusValues[i - 1];
                earnedSum = ((modelMixer * lavish) + ((10 - modelMixer) * greedy)) / 10;

                uint256 extraEarned;
                (earnedSum, extraEarned) = checkEarnedSum(referrals[i - 1], earnedSum);

                if (_referralBonusType == MyNFTScoreData.ReferralBonusType.INCOME_BONUS) {
                    users[referrals[i - 1]].balance += earnedSum;
                    users[referrals[i - 1]].earnedPerLevel += earnedSum;

                    users[referrals[i - 1]].earnedFromDirect += earnedSum + extraEarned;
                    users[referrals[i - 1]].extraEarned += extraEarned;

                    if (i == 1) {
                        myNFTScoreCycle.addLeader(referrals[i - 1], earnedSum, users[referrals[i - 1]].leaderWinTime);
                    }
                } else {
                    if (users[referrals[i - 1]].directReferralCount >= i) {
                        users[referrals[i - 1]].balance += earnedSum;
                        users[referrals[i - 1]].earnedPerLevel += earnedSum;

                        users[referrals[i - 1]].earnedFromMatching += earnedSum + extraEarned;
                        users[referrals[i - 1]].extraEarned += extraEarned;
                    }
                }
            }
        }
    }

    function checkEarnedSum(address _userAddress, uint256 _amount) internal view returns (uint256, uint256) {
        if (_userAddress == defaultReferral) {
            return (_amount, 0);
        }
        uint8 maxPercent = getMaxPercent(_userAddress);
        if (users[_userAddress].earnedPerLevel + _amount > users[_userAddress].currentInvestment * maxPercent) {
            uint256 maxAmount = users[_userAddress].currentInvestment * maxPercent - users[_userAddress].earnedPerLevel;
            return (maxAmount, _amount - maxAmount);
        }
        return (_amount, 0);
    }

    function checkBurnBalance(address _userAddress) internal view returns (bool) {
        if (
            users[_userAddress].currentInvestment == 0 &&
            _userAddress != defaultReferral &&
            block.timestamp - users[_userAddress].levelCompletedTime >= SEC_IN_DAY
        ) {
            return true;
        }
        return false;
    }

    function burnBalance(address _userAddress) external {
        require(msg.sender == burningUser, "Ownable: Only user with burning rights");

        uint256 burnedBalance = users[_userAddress].balance + users[_userAddress].extraEarned + getBalance(_userAddress);
        users[_userAddress].balance = 0;
        users[_userAddress].extraEarned = 0;
        users[_userAddress].lastWithdrawal = block.timestamp;

        emit BalanceBurned(_userAddress, burnedBalance, block.timestamp);
    }

    function getMaxPercent(address _userAddress) internal view returns (uint8) {
        return users[_userAddress].level == 14 ? 2 : 3;
    }

    function getBoostPercent(address _userAddress) public view returns (uint256) {
        if (!users[_userAddress].registered) return 0;
        if (users[_userAddress].fastPass) return maxBoostDividend;
        uint256 daysLeft = (block.timestamp - users[_userAddress].lastWithdrawal) / SEC_IN_DAY;
        uint256 boost = daysLeft * boostDividend;
        return boost > maxBoostDividend ? maxBoostDividend : boost;
    }

    function getStakingPercent(address _userAddress) internal view returns (uint256) {
        uint256 dayFrom;
        if (developmentStage.rewardStop) {
            dayFrom = developmentStage.rewardStopTime;
        } else {
            dayFrom = block.timestamp;
        }

        uint256 percentFromStaking = (((dayFrom -
            max(
                tokensStatistics[users[_userAddress].currentTokenId].investedTimestamp,
                users[_userAddress].lastWithdrawal
            )) / SEC_IN_DAY) * stakingDividend);
        return percentFromStaking;
    }

    function calculateStakingBonus(address _userAddress) internal returns (uint256) {
        if (!users[_userAddress].staked) {
            return 0;
        }
        uint256 earnedSum;
        uint256 percentFromStaking = getStakingPercent(_userAddress);
        earnedSum = ((percentFromStaking * users[_userAddress].currentInvestment) / 1000);
        (earnedSum, ) = checkEarnedSum(_userAddress, earnedSum);
        users[_userAddress].balance += earnedSum;
        users[_userAddress].earnedPerLevel += earnedSum;
        return earnedSum;
    }

    function getBalance(address _userAddress) public view returns (uint256) {
        if (checkBurnBalance(_userAddress)) {
            return 0;
        }
        if (!users[_userAddress].staked || users[_userAddress].currentInvestment == 0) {
            return users[_userAddress].balance;
        }
        uint256 earnedSum;
        uint256 percentFromStaking = getStakingPercent(_userAddress);
        earnedSum = ((percentFromStaking * users[_userAddress].currentInvestment) / 1000);
        (earnedSum, ) = checkEarnedSum(_userAddress, earnedSum);
        return users[_userAddress].balance + earnedSum;
    }

    function getUserInfo(address _userAddress) external view returns (MyNFTScoreData.User memory) {
        return users[_userAddress];
    }

    function getStructureTurnover(address _userAddress, uint8 _turnoverType) external view returns (uint256) {
        uint256 turnover;
        uint256 deep;
        if (_turnoverType == 1) {
            deep = incomeReferralBonusDeep;
        } else {
            deep = matchingBonusDeep;
        }
        for (uint x = 0; x <= deep; x++) {
            for (uint256 i = 0; i < childReferrals[_userAddress][x].length; i++) {
                turnover += users[childReferrals[_userAddress][x][i]].earnedForAllTime;
            }
        }
        return turnover;
    }

    function getReferralReward(address _userAddress) public view returns (uint256) {
        uint256 referralReward = 0;
        for (uint i = 0; i <= incomeReferralBonusDeep; i++) {
            if (childReferrals[_userAddress][i].length > 0) {
                referralReward += referralIncomeBonusValues[i];
            }
        }
        return referralReward;
    }

    function getReferralChain(
        address _userAddress,
        uint256 _level
    ) external view returns (MyNFTScoreData.User[] memory) {
        uint256 refChainLen = childReferrals[_userAddress][_level].length;
        MyNFTScoreData.User[] memory refChain = new MyNFTScoreData.User[](refChainLen);
        for (uint256 i = 0; i < refChainLen; i++) {
            refChain[i] = users[childReferrals[_userAddress][_level][i]];
        }
        return refChain;
    }

    function getReferralChainAddresses(address _userAddress, uint256 _level) external view returns (address[] memory) {
        uint256 refChainLen = childReferrals[_userAddress][_level].length;
        address[] memory refChain = new address[](refChainLen);
        for (uint256 i = 0; i < refChainLen; i++) {
            refChain[i] = childReferrals[_userAddress][_level][i];
        }
        return refChain;
    }

    function getReferralIncome(address _userAddress) external view returns (uint256) {
        uint256 referralReward = getReferralReward(_userAddress);
        return (users[_userAddress].earnedForAllTime * referralReward) / 100;
    }

    function getReferralLevel(address _userAddress) external view returns (uint256) {
        uint256 referralLevel = 0;
        for (uint i = 0; i <= incomeReferralBonusDeep; i++) {
            if (childReferrals[_userAddress][i].length > 0) {
                referralLevel++;
            }
        }
        return referralLevel;
    }

    function getStakingTotalEarning(address _userAddress) internal view returns (uint256) {
        return
            (users[_userAddress].currentInvestment / 1000) *
            stakingDividend *
            ((block.timestamp - tokensStatistics[users[_userAddress].currentTokenId].stakedTimestamp) / SEC_IN_DAY);
    }

    function getTokensStatistics(
        address _userAddress
    ) external view returns (MyNFTScoreData.TokenStatisticsStruct[] memory) {
        MyNFTScoreData.TokenStatisticsStruct[] memory _tokenStats = new MyNFTScoreData.TokenStatisticsStruct[](
            tokensIds[_userAddress].length
        );
        MyNFTScoreData.TokenStatisticsStruct memory _activeTokenStats;
        uint256 totalEarning;
        uint256 stakingTotalEarning;
        for (uint256 i = 0; i < tokensIds[_userAddress].length; i++) {
            if (tokensStatistics[tokensIds[_userAddress][i]].stakedTimestamp == 0) {
                continue;
            }
            if (!tokensStatistics[tokensIds[_userAddress][i]].expired) {
                _activeTokenStats = tokensStatistics[tokensIds[_userAddress][i]];
                totalEarning =
                    users[_userAddress].earnedPerLevel +
                    getStakingPercent(_userAddress) *
                    users[_userAddress].currentInvestment;

                _activeTokenStats.totalEarning = totalEarning <=
                    (users[_userAddress].currentInvestment * getMaxPercent(_userAddress))
                    ? totalEarning
                    : (users[_userAddress].currentInvestment * getMaxPercent(_userAddress));
                stakingTotalEarning = getStakingTotalEarning(_userAddress);
                _activeTokenStats.totalEarnedDividend = stakingTotalEarning <=
                    (users[_userAddress].currentInvestment * getMaxPercent(_userAddress))
                    ? stakingTotalEarning
                    : (users[_userAddress].currentInvestment * getMaxPercent(_userAddress));
                _tokenStats[i] = _activeTokenStats;
            } else {
                _tokenStats[i] = tokensStatistics[tokensIds[_userAddress][i]];
            }
        }
        return _tokenStats;
    }

    function getTokenIds(address _userAddress) external view returns (uint256[] memory _tokenIds) {
        return tokensIds[_userAddress];
    }

    function getRemainingStakingRewards(address _userAddress) external view returns (uint256) {
        uint256 percentFromStaking = getStakingPercent(_userAddress);
        uint256 earnedSum = ((percentFromStaking * users[_userAddress].currentInvestment) / 1000);
        uint256 maxEarningsFactor = getMaxPercent(_userAddress);
        uint256 maxEarnings = users[_userAddress].currentInvestment * maxEarningsFactor;
        uint256 earned = earnedSum + users[_userAddress].earnedPerLevel;

        if (earned >= maxEarnings) {
            return 0;
        }

        return maxEarnings - earned;
    }

    function setAdmin(address _admin) external onlyOwner {
        admin = _admin;
    }

    function setVerifier(address _verifier) external onlyAdmin {
        verifier = _verifier;
    }

    function setBurningUser(address _burningUser) external onlyAdmin {
        burningUser = _burningUser;
    }

    function setDefaultReferral(address _defaultReferral) external onlyOwner {
        defaultReferral = _defaultReferral;
    }

    function setTaxRecipient(address _taxRecipient) external onlyOwner {
        taxRecipient = _taxRecipient;
    }

    function setNftRecipient(address _nftRecipient) external onlyOwner {
        nftRecipient = _nftRecipient;
    }

    // type: 1 - withdrawStop 2 - investStop 3 - rewardStop
    function setDevelopmentStage(bool _status, uint256 _type) external onlyOwner {
        if (_type == 1) {
            developmentStage.withdrawStop = _status;
        } else if (_type == 2) {
            developmentStage.investStop = _status;
        } else if (_type == 3) {
            developmentStage.rewardStop = _status;
            if (_status) {
                developmentStage.rewardStopTime = block.timestamp;
            }
        }
    }

    function setInvestSumByLevel(uint256[] calldata _investSumNByLvl) external onlyAdmin {
        investSumNByLvl = _investSumNByLvl;
    }

    function setReferralIncomeBonusValues(uint256[] calldata _referralIncomeBonusValues) external onlyAdmin {
        referralIncomeBonusValues = _referralIncomeBonusValues;
    }

    function setMatchingBonusMixer(uint256 _matchingBonusMixer) external onlyAdmin {
        matchingBonusMixer = _matchingBonusMixer;
    }

    function setStakingDividend(uint256 _stakingDividend) external onlyAdmin {
        stakingDividend = _stakingDividend;
    }

    function setBoostDividend(uint256 _boostDividend) external onlyAdmin {
        boostDividend = _boostDividend;
    }

    function setMaxBoostDividend(uint256 _maxBoostDividend) external onlyAdmin {
        maxBoostDividend = _maxBoostDividend;
    }

    function setMyNFTScore721(address _myNFTScore721) external onlyAdmin {
        myNFTScore721 = MyNFTScore721(_myNFTScore721);
    }

    function setMyNFTScoreECDSA(address _myNFTScoreECDSA) external onlyAdmin {
        myNFTScoreECDSA = MyNFTScoreECDSA(_myNFTScoreECDSA);
    }

    function setMyNFTScoreCycle(address _myNFTScoreCycle) external onlyAdmin {
        myNFTScoreCycle = MyNFTScoreCycle(_myNFTScoreCycle);
    }

    function setAdminFee(uint256 _adminFee) external onlyAdmin {
        require(_adminFee <= 200, "Admin fee no more than 20");
        adminFee = _adminFee;
    }

    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a >= b ? a : b;
    }

    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a <= b ? a : b;
    }

    function _authorizeUpgrade(address) internal override onlyOwner {}

    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {
        return this.onERC721Received.selector;
    }
}


// File: contracts/MyNFTScoreCycle.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import "@openzeppelin/contracts/access/Ownable.sol";

import "./MyNFTScoreData.sol";
import "./MyNFTScore.sol";

contract MyNFTScoreCycle is Ownable {
    uint256 internal constant SEC_IN_DAY = 86400;

    address internal verifier;

    uint256 public rewardPool;
    uint256 public whalePool;
    uint256 public currentRoundId;
    uint256 internal happyHourMembersCount;
    address internal lastInvestor;

    address[] public whales;

    mapping(uint256 => MyNFTScoreData.CycleStruct) public cycles;

    MyNFTScoreData.LeaderBoardStruct[3] public leaders;
    MyNFTScoreData.LeaderBoardStruct[3] public lastLeaders;

    MyNFTScore internal myNFTScore;

    event CycleStarted(uint256 indexed cycleId, uint256 indexed timeStamp);
    event HappyHourRewarded(address indexed userAddress, uint256 indexed amount, uint256 indexed timeStamp);

    constructor(address _verifier) Ownable() {
        verifier = _verifier;
        currentRoundId = 117;
        happyHourMembersCount = 1;
        whalePool = 51837244185827217360;
        rewardPool = 23560586807020397214;
    }

    function startNewCycle() public {
        require(msg.sender == verifier, "Ownable: caller is not the verifier");

        (, bool rewardStop, , ) = myNFTScore.developmentStage();

        calculatePool(rewardStop);

        if (!rewardStop) {
            rewardLeaders();
            rewardWhales();
        }

        cycles[currentRoundId].endTime = block.timestamp;
        currentRoundId++;

        cycles[currentRoundId].startTime = block.timestamp;

        lastInvestor = address(0);

        emit CycleStarted(currentRoundId, cycles[currentRoundId].startTime);
    }

    function calculatePool(bool _rewardStop) internal {
        uint256 poolRevenue = (cycles[currentRoundId].totalInvest * 7) / 100;
        rewardPool += poolRevenue;
        if (rewardPool > 100000000000000000000) {
            rewardPool = 100000000000000000000;
        }
        uint256 dailyRewardPool = rewardPool / 10;
        whalePool += (dailyRewardPool / 100) * 20;
        if (!_rewardStop && dailyRewardPool > 2500000000000000000) {
            uint256 leaderPool = (rewardPool + (poolRevenue * 80) / 100) / 10;
            uint256 dailyWhalePool = whalePool / 10;
            rewardPool -= leaderPool;
            whalePool -= dailyWhalePool;
            cycles[currentRoundId].leadersPool = leaderPool;
            cycles[currentRoundId].whalePool = dailyWhalePool;
        } else if (!_rewardStop && rewardPool > 0) {
            uint256 dailyWhalePool = whalePool / 10;
            whalePool -= dailyWhalePool;
            cycles[currentRoundId].whalePool = dailyWhalePool;
        }
        cycles[currentRoundId + 1].withdrawPool = (address(myNFTScore).balance / 1000) * 125;
        cycles[currentRoundId + 1].withdrawPoolLeft = (address(myNFTScore).balance / 1000) * 125;
    }

    function rewardLeaders() internal {
        if (cycles[currentRoundId].leadersPool == 0) {
            return;
        }
        uint256 amount;
        for (uint256 i = 0; i < 3; i++) {
            if (leaders[i].userAddress != address(0)) {
                if (i == 0) {
                    amount = (cycles[currentRoundId].leadersPool / 100) * 35;
                } else if (i == 1) {
                    amount = (cycles[currentRoundId].leadersPool / 100) * 25;
                } else {
                    amount = (cycles[currentRoundId].leadersPool / 100) * 15;
                }
                myNFTScore.rewardUser(leaders[i].userAddress, amount, MyNFTScoreData.RewardType.LEADER_REWARD);
                lastLeaders[i].userAddress = leaders[i].userAddress;
                lastLeaders[i].amount = amount;
                leaders[i].userAddress = address(0);
                leaders[i].amount = 0;
            } else {
                if (i == 0) {
                    rewardPool += (cycles[currentRoundId].leadersPool / 100) * 35;
                } else if (i == 1) {
                    rewardPool += (cycles[currentRoundId].leadersPool / 100) * 25;
                } else {
                    rewardPool += (cycles[currentRoundId].leadersPool / 100) * 15;
                }
            }
        }
    }

    function rewardWhales() internal {
        if (cycles[currentRoundId].whalePool == 0) {
            return;
        }
        if (whales.length > 0) {
            uint256 amount = cycles[currentRoundId].whalePool / whales.length;
            for (uint256 i = 0; i < whales.length; i++) {
                myNFTScore.rewardUser(whales[i], amount, MyNFTScoreData.RewardType.WHALE_REWARD);
            }
        } else {
            whalePool += cycles[currentRoundId].whalePool;
        }
    }

    function happyHour() external {
        require(msg.sender == verifier, "Ownable: caller is not the verifier");
        require(cycles[currentRoundId - 1].happyHourCount <= happyHourMembersCount - 1, "Payouts played out");
        uint256 amount = ((cycles[currentRoundId - 1].leadersPool / 100) * 25) / happyHourMembersCount;
        if (amount == 0) {
            return;
        }
        if (lastInvestor != address(0)) {
            myNFTScore.rewardUser(lastInvestor, amount, MyNFTScoreData.RewardType.HAPPY_HOUR_REWARD);

            cycles[currentRoundId - 1].happyHourCount++;
            emit HappyHourRewarded(lastInvestor, amount, block.timestamp);
        }
    }

    function addLeader(address _userAddress, uint256 _amount, uint256 _lastWinTime) public {
        require(msg.sender == address(myNFTScore), "Ownable: only MyNFTScore");
        if (_userAddress != address(0) && _amount > leaders[2].amount) {
            if (_amount > leaders[0].amount) {
                if (_userAddress == leaders[0].userAddress) {
                    leaders[0].amount = _amount;
                    return;
                }
                leaders[2] = leaders[1];
                leaders[1] = leaders[0];
                leaders[0].userAddress = _userAddress;
                leaders[0].amount = _amount;
            } else if (_amount > leaders[1].amount && _userAddress != leaders[0].userAddress) {
                if (_userAddress == leaders[1].userAddress) {
                    leaders[1].amount = _amount;
                    return;
                }
                leaders[2] = leaders[1];
                leaders[1].userAddress = _userAddress;
                leaders[1].amount = _amount;
            } else if (
                _amount > leaders[2].amount &&
                _userAddress != leaders[0].userAddress &&
                _userAddress != leaders[1].userAddress
            ) {
                if (_userAddress == leaders[2].userAddress) {
                    leaders[2].amount = _amount;
                    return;
                }
                leaders[2].userAddress = _userAddress;
                leaders[2].amount = _amount;
            }
        }
    }

    function addWhale(address _userAddress) public {
        require(msg.sender == address(myNFTScore), "Ownable: only MyNFTScore");

        whales.push(_userAddress);
    }

    function removeWhale(address _usesAddress) public {
        address[] memory newWhales = new address[](whales.length - 1);
        uint index = 0;
        for (uint i = 0; i < whales.length; i++) {
            if (whales[i] != _usesAddress) {
                newWhales[index] = whales[i];
                index++;
            }
        }
        whales = newWhales;
    }

    function increaseTotalInvest(uint256 _sum) public {
        require(msg.sender == address(myNFTScore), "Ownable: only MyNFTScore");

        cycles[currentRoundId].totalInvest += _sum;
    }

    function getWithdrawPool() external view returns (uint256) {
        return cycles[currentRoundId].withdrawPool;
    }

    function getWithdrawPoolLeft() public view returns (uint256) {
        return cycles[currentRoundId].withdrawPoolLeft;
    }

    function getKingPool() external view returns (uint256) {
        (, bool rewardStop, , ) = myNFTScore.developmentStage();

        uint256 poolRevenue = (cycles[currentRoundId].totalInvest * 7) / 100;
        uint256 tempRewardPool = rewardPool + poolRevenue;
        if (tempRewardPool > 100000000000000000000) {
            tempRewardPool = 100000000000000000000;
        }
        uint256 dailyRewardPool = tempRewardPool / 10;
        uint256 tempWhalePool = whalePool + (dailyRewardPool / 100) * 20;
        if (!rewardStop && tempRewardPool > 0) {
            return tempWhalePool / 10;
        }
        return 0;
    }

    function getLeaderPool() external view returns (uint256) {
        (, bool rewardStop, , ) = myNFTScore.developmentStage();

        uint256 poolRevenue = (cycles[currentRoundId].totalInvest * 7) / 100;
        uint256 tempRewardPool = rewardPool + poolRevenue;
        if (tempRewardPool > 100000000000000000000) {
            tempRewardPool = 100000000000000000000;
        }
        if (!rewardStop && tempRewardPool > 25000000000000000000) {
            return (tempRewardPool + (poolRevenue * 80) / 100) / 10;
        }
        return 0;
    }

    function reduceWithdrawPool(uint256 _amount) public {
        require(msg.sender == address(myNFTScore), "Ownable: only MyNFTScore");
        cycles[currentRoundId].withdrawPoolLeft -= _amount;
    }

    function setLastInvestor(address _lastInvestor) public {
        require(msg.sender == address(myNFTScore), "Ownable: only MyNFTScore");
        lastInvestor = _lastInvestor;
    }

    function setMyNFTScore(address _myNFTScore) external onlyOwner {
        myNFTScore = MyNFTScore(_myNFTScore);
    }

    function setHappyHourMembersCount(uint256 _happyHourMembersCount) external onlyOwner {
        happyHourMembersCount = _happyHourMembersCount;
    }

    function setVerifier(address _verifier) external onlyOwner {
        verifier = _verifier;
    }
}


// File: contracts/MyNFTScoreData.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

library MyNFTScoreData {
    struct User {
        bool staked;
        bool registered;
        bool canBeWhale;
        bool fastPass;
        address parentReferral;
        uint256 level;
        uint256 totalInvestment;
        uint256 currentInvestment;
        uint256 balance;
        uint256 earnedPerLevel;
        uint256 earnedForAllTime;
        uint256 referralCount;
        uint256 lastWithdrawal;
        uint256 totalWithdrawal;
        uint256 leaderWinTime;
        uint256 currentTokenId;
        uint256 levelCompletedTime;
        uint256 earnedFromDirect;
        uint256 earnedFromMatching;
        uint256 earnedFromLeaders;
        uint256 earnedFromWhales;
        uint256 extraEarned;
        uint256 earnedFromHappyHour;
        uint256 earnedFromStaking;
        uint256 directReferralCount;
    }

    struct CycleStruct {
        uint256 leadersPool;
        uint256 whalePool;
        uint256 withdrawPool;
        uint256 withdrawPoolLeft;
        uint256 startTime;
        uint256 endTime;
        uint256 totalInvest;
        uint256 happyHourCount;
    }

    struct DevelopmentStage {
        bool withdrawStop;
        bool rewardStop;
        bool investStop;
        uint256 rewardStopTime;
    }

    struct TokenStatisticsStruct {
        bool expired;
        uint256 nftLevel;
        uint256 stakedTimestamp;
        uint256 investedSum;
        uint256 investedTimestamp;
        uint256 tokenPrice;
        uint256 totalEarning;
        uint256 totalEarnedDividend;
    }

    struct LeaderBoardStruct {
        uint256 amount;
        address userAddress;
    }

    struct TokenInfo {
        uint256 level;
        CardTypes cardType;
    }

    enum ReferralBonusType {
        INCOME_BONUS,
        MATCHING_BONUS
    }

    enum RewardType {
        LEADER_REWARD,
        WHALE_REWARD,
        HAPPY_HOUR_REWARD
    }

    enum CardTypes {
        BYTE,
        QUEEN,
        CAPTAIN,
        LORD,
        BIT,
        KING,
        FAST_PASS
    }
}


// File: contracts/tokens/MyNFTScore721.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/utils/Base64.sol";

import "../MyNFTScoreData.sol";

contract MyNFTScore721 is IERC721Metadata, ERC721Enumerable, Ownable {
    uint256 private idCounter;
    string private baseURI;
    address private myNFTScoreAddress;

    mapping(uint256 => MyNFTScoreData.TokenInfo) internal tokens;

    event NFTMinted(uint256 indexed tokenId, uint256 nftLevel, address indexed userAddress);

    event NFTBurned(uint256 indexed tokenId);

    constructor(string memory _name, string memory _symbol, string memory _baseURI) ERC721(_name, _symbol) Ownable() {
        baseURI = _baseURI;
        idCounter = 1;
    }

    function tokenURI(uint256 _tokenId) public view override(ERC721, IERC721Metadata) returns (string memory) {
        require(_exists(_tokenId), "ERC721Metadata: URI query for nonexistent token");

        if (tokens[_tokenId].cardType == MyNFTScoreData.CardTypes.FAST_PASS) {
            return
                string(
                    abi.encodePacked(
                        "data:application/json;base64,",
                        Base64.encode(
                            bytes(
                                abi.encodePacked(
                                    '{"name":"',
                                    getCardName(tokens[_tokenId].cardType),
                                    '",',
                                    '"description":"',
                                    "MyNFTScore token #",
                                    Strings.toString(_tokenId),
                                    '","image":"',
                                    baseURI,
                                    getCardSlug(tokens[_tokenId].cardType),
                                    '.png"}'
                                )
                            )
                        )
                    )
                );
        }

        return
            string(
                abi.encodePacked(
                    "data:application/json;base64,",
                    Base64.encode(
                        bytes(
                            abi.encodePacked(
                                '{"name":"',
                                getCardName(tokens[_tokenId].cardType),
                                '",',
                                '"description":"',
                                "MyNFTScore token #",
                                Strings.toString(_tokenId),
                                " on level ",
                                Strings.toString(tokens[_tokenId].level),
                                '","image":"',
                                baseURI,
                                getCardSlug(tokens[_tokenId].cardType),
                                '.png","attributes": [{"trait_type": "Level", "value": ',
                                Strings.toString(tokens[_tokenId].level),
                                "}]}"
                            )
                        )
                    )
                )
            );
    }

    function mint(
        MyNFTScoreData.CardTypes _cardType,
        uint256 _NFTLevel,
        address userAddress
    ) external returns (uint256) {
        require(msg.sender == myNFTScoreAddress, "Access Denied");

        tokens[idCounter] = MyNFTScoreData.TokenInfo(_NFTLevel, _cardType);

        _safeMint(userAddress, idCounter);
        _approve(myNFTScoreAddress, idCounter);

        emit NFTMinted(idCounter, _NFTLevel, userAddress);
        idCounter++;

        return idCounter - 1;
    }

    function setImageBaseURI(string memory _baseURI) external onlyOwner {
        baseURI = _baseURI;
    }

    function setMyNFTScoreAddress(address _myNFTScoreAddress) external onlyOwner {
        myNFTScoreAddress = _myNFTScoreAddress;
    }

    function burn(uint256 _tokenId) external {
        require(_exists(_tokenId), "ERC721: non-existent token");
        require(msg.sender == myNFTScoreAddress, "Access Denied");
        _burn(_tokenId);

        emit NFTBurned(_tokenId);
    }

    function getCardName(MyNFTScoreData.CardTypes _type) internal pure returns (string memory) {
        require(uint8(_type) <= 7);

        if (MyNFTScoreData.CardTypes.QUEEN == _type) return "Queen Satoshi";
        if (MyNFTScoreData.CardTypes.CAPTAIN == _type) return "Captain Ether";
        if (MyNFTScoreData.CardTypes.LORD == _type) return "Lord Cryptic";
        if (MyNFTScoreData.CardTypes.BIT == _type) return "Bit Baron";
        if (MyNFTScoreData.CardTypes.KING == _type) return "King Fomo";
        if (MyNFTScoreData.CardTypes.FAST_PASS == _type) return "Fast Pass";

        return "Byte Bandit";
    }

    function getCardSlug(MyNFTScoreData.CardTypes _type) internal pure returns (string memory) {
        require(uint8(_type) <= 7);

        if (MyNFTScoreData.CardTypes.QUEEN == _type) return "queen-satoshi";
        if (MyNFTScoreData.CardTypes.CAPTAIN == _type) return "captain-ether";
        if (MyNFTScoreData.CardTypes.LORD == _type) return "lord-cryptic";
        if (MyNFTScoreData.CardTypes.BIT == _type) return "bit-baron";
        if (MyNFTScoreData.CardTypes.KING == _type) return "king-fomo";
        if (MyNFTScoreData.CardTypes.FAST_PASS == _type) return "fast-pass";

        return "byte-bandit";
    }
}


// File: contracts/utils/MyNFTScoreECDSA.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";

contract MyNFTScoreECDSA {
    using ECDSA for bytes32;

    constructor() {}

    function verifyMessage(string memory _message, bytes memory _signedMessage) public pure returns (address) {
        bytes32 messageHash = keccak256(bytes(_message));
        address signerAddress = messageHash.toEthSignedMessageHash().recover(_signedMessage);
        return signerAddress;
    }

    function createBuyNFTMessage(
        uint8 _cardType,
        uint256 _NFTPrice,
        uint256 _NFTLevel,
        uint256 _nonce
    ) public pure returns (string memory) {
        return
            string(
                abi.encodePacked(
                    Strings.toString(_cardType),
                    Strings.toString(_NFTPrice),
                    Strings.toString(_NFTLevel),
                    Strings.toString(_nonce)
                )
            );
    }

    function getTxHash(
        address _userAddress,
        uint8 _cardType,
        uint256 _NFTPrice,
        uint256 _NFTLevel,
        uint _nonce
    ) public view returns (bytes32) {
        return keccak256(abi.encodePacked(address(this), _userAddress, _cardType, _NFTPrice, _NFTLevel, _nonce));
    }
}

