
// File: contracts/BatchTransfer.sol.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.4.23;

/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {

  /**
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  /**
  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

contract ERC20{
    function totalSupply() public view returns (uint256);
    function balanceOf(address who) public view returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    
    function allowance(address owner, address spender) public view returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract BatchTransferContract{
  using SafeMath for uint256;
  
  address owner;
  
  event EtherTransfer(address from, uint256 value);
  event TokenTransfer(address from, uint256 value,address token);
  event EtherClaim(address owner,uint256 value);
  event TokenClaim(address owner,uint256 value,address token);
  
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
  
  constructor() public{
    owner = msg.sender;
  }
  
  function() public payable {}
  
  function sendEther(address[] recipients,uint256[] values) public payable{
    uint256 total = msg.value;
    uint256 i=0;
    for(i;i<recipients.length;i++){
      require(total >= values[i]);
      total = total.sub(values[i]);
      recipients[i].transfer(values[i]);
    }    
    emit EtherTransfer(msg.sender,msg.value);
  }
  
  function sendToken(address token,address[] recipients,uint256[] values) public payable{
    uint256 total = 0;
    ERC20 erc20 = ERC20(token);
    uint256 i = 0;
    for(i;i < recipients.length;i++){
      erc20.transferFrom(msg.sender,recipients[i],values[i]);
      total += values[i];
    }
    emit TokenTransfer(msg.sender,total,token);
    
  }
  
  function claimEther() public onlyOwner{
    uint256 balance = address(this).balance;
    owner.transfer(balance);
    emit EtherClaim(owner,balance);
  }
  
  function claimToken(address token) public onlyOwner{
    ERC20 erc20 = ERC20(token);
    uint256 balance = erc20.balanceOf(this);
    erc20.transfer(owner,balance);
    emit TokenClaim(owner,balance,token);
  }
  
}
