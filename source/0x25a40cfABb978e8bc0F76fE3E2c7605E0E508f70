// SPDX-License-Identifier: Unlicensed

// Import the ERC-20 interface for standard token functionality.
pragma solidity ^0.8.7;

// Define the ERC-20 interface with standard functions and events.
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// Abstract contract that provides contextual information about the caller.
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this;
        return msg.data;
    }
}

// Abstract contract that manages ownership and access control.
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _setOwner(_msgSender());
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// Interface for a factory contract to create pairs.
interface IFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

// Interface for a router contract that provides swapping and liquidity functions.
interface IRouter {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

// Library for interacting with Ethereum addresses.
library Address {
    // Function to send ETH to a recipient with proper error handling.
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }
}

// Main contract that implements the ERC-20 token.
contract POTTER is IERC20, Ownable {

    // Token information.
    string public name = "POTTER";
    string public symbol = "POT";
    uint8 public decimals = 18;
    uint256 public _totalSupply = 100000000 * (10**18);

    // Balances of token holders.
    mapping(address => uint256) private _balances;

    // Allowances for token transfers.
    mapping(address => mapping(address => uint256)) private _allowances;

    // Accounts excluded from transaction fees.
    mapping(address => bool) private _isExcludedFromFee;

    // Accounts excluded from certain functions.
    mapping(address => bool) private _isExcluded;

    // Address representing a "dead" account.
    address public deadAddress = 0x000000000000000000000000000000000000dEaD;

    // Trading and swapping control flags.
    bool public tradingEnabled = true;
    bool public swapEnabled = true;
    bool private swapping;

    // Tracking the time of the last sell transaction.
    mapping(address => uint256) private _lastSell;

    // Cooldown settings for transactions.
    bool public coolDownEnabled = true;
    uint256 public coolDownTime = 60 seconds;

    // Maximum allowed sell amount per transaction.
    uint256 public maxSellPerTransaction = 50000 * (10**18);

    // Constructor to initialize the contract.
    constructor() {
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    // ERC-20 standard function: returns the total supply of tokens.
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    // ERC-20 standard function: returns the balance of a given account.
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    // ERC-20 standard function: returns the allowance for a spender on an owner's tokens.
    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    // ERC-20 standard function: approves a spender to transfer tokens on the caller's behalf.
    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    // ERC-20 standard function: transfers tokens from the sender to a recipient.
    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        uint256 currentAllowance = _allowances[sender][msg.sender];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        _approve(sender, msg.sender, currentAllowance - amount);
        return true;
    }

    // ERC-20 standard function: increases the allowance granted to a spender.
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);
        return true;
    }

    // ERC-20 standard function: decreases the allowance granted to a spender.
    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        uint256 currentAllowance = _allowances[msg.sender][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        _approve(msg.sender, spender, currentAllowance - subtractedValue);
        return true;
    }

    // Function to set the maximum allowed sell amount per transaction.
    function setMaxSellPerTransaction(uint256 limit) external onlyOwner {
        maxSellPerTransaction = limit;
    }

    // ERC-20 standard function: transfers tokens to a recipient.
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    // Internal function to handle the transfer of tokens.
    function _transfer(address sender, address recipient, uint256 amount) internal {
        // Check for invalid sender or recipient.
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(_balances[sender] >= amount, "ERC20: transfer amount exceeds balance");

        // Check if the transaction is a sell transaction and enforce the maximum sell limit.
        if (sender != owner() && recipient != deadAddress) {
            require(amount <= maxSellPerTransaction, "Exceeds maximum sell limit per transaction");
        }

        // Calculate the net amount to transfer.
        uint256 netAmount = amount;

        // Update sender and recipient balances.
        _balances[sender] -= amount;
        _balances[recipient] += netAmount;

        // Emit a Transfer event to log the transfer.
        emit Transfer(sender, recipient, netAmount);
    }

    // Internal function to approve an allowance for a spender.
    function _approve(address owner, address spender, uint256 amount) internal {
        // Check for invalid owner or spender addresses.
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        // Set the allowance for the spender.
        _allowances[owner][spender] = amount;

        // Emit an Approval event to log the approval.
        emit Approval(owner, spender, amount);
    }

    // Function to exclude an account from transaction fees (onlyOwner).
    function excludeFromFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = true;
    }

    // Function to check if an account is excluded from transaction fees.
    function isExcludedFromFee(address account) public view returns (bool) {
        return _isExcludedFromFee[account];
    }

    // Function to transfer tokens as part of a giveaway (onlyOwner).
    function transferTokensGiveaway(address recipient, uint256 amount) public onlyOwner {
        _transfer(msg.sender, recipient, amount);
    }

    // Function to update the cooldown settings for transactions (onlyOwner).
    function updateCooldown(bool state, uint256 time) external onlyOwner {
        coolDownTime = time * 1 seconds;
        coolDownEnabled = state;
    }

    // Function to distribute tokens to multiple recipients (onlyOwner).
    function distributeTokens(address[] memory recipients, uint256[] memory amounts) public onlyOwner {
        // Check that the recipients and amounts arrays have the same length.
        require(recipients.length == amounts.length, "Recipient and amount arrays must have the same length");

        // Iterate through the recipients and transfer the specified amount to each.
        for (uint256 i = 0; i < recipients.length; i++) {
            address recipient = recipients[i];
            uint256 amount = amounts[i];

            // Check for valid recipient and non-zero amount.
            require(recipient != address(0), "ERC20: distribute to the zero address");
            require(amount > 0, "Distribution amount must be greater than zero");

            // Transfer tokens to the recipient.
            _transfer(msg.sender, recipient, amount);
        }
    }

    // Function to rescue BNB (onlyOwner).
    function rescueBNB(uint256 weiAmount) external onlyOwner {
        // Check if the contract has sufficient BNB balance.
        require(address(this).balance >= weiAmount, "Insufficient BNB balance");

        // Transfer the specified amount of BNB to the owner.
        payable(msg.sender).transfer(weiAmount);
    }

    // Function to rescue any BEP-20 tokens (onlyOwner).
    function rescueAnyBEP20Tokens(address _tokenAddr, address _to, uint256 _amount) public onlyOwner {
        // Transfer the specified amount of BEP-20 tokens to the specified address.
        IERC20(_tokenAddr).transfer(_to, _amount);
    }

    // Fallback function to accept incoming BNB transfers.
    receive() external payable {}
}