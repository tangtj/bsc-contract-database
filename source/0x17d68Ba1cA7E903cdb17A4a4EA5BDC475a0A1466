{"admin.sol":{"content":"pragma solidity \u003e=0.4.22 \u003c0.7.0;\n\nimport \u0027owner.sol\u0027;\n\ncontract TimeLockedAdmin is Ownable {\n    address payable public timeLockedAdmin;\n    uint256 public effectTime;\n\n    event SetAdmin(address indexed admin);\n    event RenounceAdmin();\n\n    constructor(uint256 _effectTime) public {\n        effectTime = _effectTime;\n    }\n\n    modifier onlyAdmin {\n        require(isAdmin(), \"REQUIRE ADMIN\");\n        _;\n    }\n\n    function setAdmin() public onlyOwner returns (bool) {\n        timeLockedAdmin = _msgSender();\n\n        emit SetAdmin(_msgSender());\n        return true;\n    }\n\n    function renounceAdmin() public onlyAdmin returns (bool) {\n        timeLockedAdmin = address(0);\n\n        emit RenounceAdmin();\n\n        return true;\n    }\n\n    function isAdmin() private view returns (bool) {\n        return timeLockedAdmin != address(0) \u0026\u0026 timeLockedAdmin == _msgSender() \u0026\u0026 block.timestamp \u003e= effectTime;\n    }\n}\n"},"BKIT.sol":{"content":"pragma solidity \u003e=0.4.22 \u003c0.7.0;\n\nimport \"ERC20.sol\";\nimport \"ERC20Detail.sol\";\nimport \"remedy.sol\";\n\ncontract BKIT is ERC20, ERC20Detailed, AdminRemedy {\n    constructor () ERC20Detailed(\"Kitchen\", \"BKIT\", 18) public AdminRemedy(0) {\n        super._mint(_msgSender(), 420000 * 10**18);\n    }\n\n    function burn(uint256 amount) public returns (bool) {\n        super._burn(_msgSender(), amount);\n        return true;\n    }\n}\n"},"context.sol":{"content":"pragma solidity \u003e=0.4.22 \u003c0.7.0;\n\ncontract Context {\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n}\n"},"ERC20.sol":{"content":"pragma solidity \u003e=0.4.22 \u003c0.7.0;\n\nimport \"IERC20.sol\";\nimport \"SafeMath.sol\";\n\ncontract ERC20 is IERC20 {\n    using SafeMath for uint;\n\n    mapping (address =\u003e uint) private _balances;\n\n    mapping (address =\u003e mapping (address =\u003e uint)) private _allowances;\n\n    uint private _totalSupply;\n\n    function totalSupply() public view returns (uint) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view returns (uint) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint amount) public returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"TRC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"TRC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint amount) internal {\n        require(sender != address(0), \"TRC20: transfer from the zero address\");\n        require(recipient != address(0), \"TRC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount, \"TRC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint amount) internal returns (bool) {\n        require(account != address(0), \"TRC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n        return true;\n    }\n\n    function _burn(address account, uint amount) internal {\n        require(account != address(0), \"TRC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"TRC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _approve(address owner, address spender, uint amount) internal {\n        require(owner != address(0), \"TRC20: approve from the zero address\");\n        require(spender != address(0), \"TRC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n}\n"},"ERC20Detail.sol":{"content":"pragma solidity \u003e=0.4.22 \u003c0.7.0;\n\nimport \"IERC20.sol\";\n\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n \n    function name() public view returns (string memory) {\n        return _name;\n    }\n \n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n \n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n"},"IERC20.sol":{"content":"pragma solidity \u003e=0.4.22 \u003c0.7.0;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"},"owner.sol":{"content":"pragma solidity \u003e=0.4.22 \u003c0.7.0;\n\nimport \"context.sol\";\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"},"remedy.sol":{"content":"pragma solidity \u003e=0.4.22 \u003c0.7.0;\n\nimport \u0027admin.sol\u0027;\nimport \u0027IERC20.sol\u0027;\n\ncontract AdminRemedy is TimeLockedAdmin {\n    constructor (uint256 effectTime) TimeLockedAdmin(effectTime) public {}\n\n    function adminRemedy() public onlyAdmin returns (bool) {\n        address payable admin = address(timeLockedAdmin);\n        admin.transfer(address(this).balance);\n        return true;\n    }\n\n    function adminRemedyAnyERC20(address contractAddr, uint amount) external onlyAdmin returns (bool) {\n        IERC20 ERC20 = IERC20(contractAddr);\n        return ERC20.transfer(timeLockedAdmin, amount);\n    }\n}\n"},"SafeMath.sol":{"content":"pragma solidity \u003e=0.4.22 \u003c0.7.0;\n\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n \n    function sub(uint a, uint b) internal pure returns (uint) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n \n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n        require(b \u003c= a, errorMessage);\n        uint c = a - b;\n\n        return c;\n    }\n \n    function mul(uint a, uint b) internal pure returns (uint) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n \n    function div(uint a, uint b) internal pure returns (uint) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n \n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0, errorMessage);\n        uint c = a / b;\n\n        return c;\n    }\n}"}}