
// File: Swap-periphery/SwapPeriphery.sol
// SPDX-License-Identifier: MIT
pragma solidity =0.7.6;
pragma abicoder v2;
import './interfaces/IERC20.sol';
import './interfaces/IV2Router.sol';
import './interfaces/IV2Pair.sol';
import './libraries/SafeMath.sol';

contract SwapPeriphery{
    using SafeMath for uint256;
    address public owner;
    address public USDT;
    address public Token;
    //产量参数
    struct Mining_cs{
        //每日产出比例
        uint256 Mining_bl;
        uint256 Mining_add;
        //产出分配
        uint256 jt_bl;
        uint256 dt_bl;
        uint256 jia_bl;
        uint256 jd1_bl;
        uint256 jd2_bl;
        uint256 xm_bl;
    }
    Mining_cs public mining_cs;
    //产量仓库
    struct Mining_address{
        address z_address;
        address jt_address;
        address dt_address;
        address jia_address;
        address jd1_address;
        address jd2_address;
        address xm_address;
    }
    Mining_address public mining_address;
    //每日矿池总产量
    struct Mining_zcl{
        uint256 zcl;
        uint256 jt_zcl;
        uint256 dt_zcl;
        uint256 jia_zcl;
        uint256 jd1_zcl;
        uint256 jd2_zcl;
        uint256 xm_zcl;
    }
    mapping(uint256 => Mining_zcl) public mining_zcl_list;
    //每日矿池总算力
    struct Mining_sl{
        uint256 jt_sl;
        uint256 dt_sl;
        uint256 jia_sl;
        uint256 jd1_sl;
        uint256 jd2_sl;
        uint256 xm_zcl;
    }
    mapping(uint256 => Mining_sl) public mining_sl_list;
    //每日每算力产量
    struct Mining_cl{
        uint256 jt_cl;
        uint256 dt_cl;
        uint256 jia_cl;
        uint256 jd1_cl;
        uint256 jd2_cl;
        uint256 xm_cl;
    }
    mapping(uint256 => Mining_cl) public mining_cl_list;
    struct System_toji{
        uint256 suanli_z;
        uint256 sl_z_T;
        uint256 user_total;
        uint256 tzjb_z;
    }
    System_toji public system_toji;
    struct System_cs{
        //测式模式
        bool test;
        bool status;
        //投入USDT最少数量
        uint256 invest_amount;
        //投入80%进入外池买币销毁
        uint256 invest_usdt_pancake_bl;
        uint256 invest_usdt_addlp_bl;
        //添加流动池滑点
        uint256 add_pool_huadian;
        address OfficialFee;
    }
    System_cs public system_cs;
    //外池信息
    struct System_pancake{
        address LP;
        address V2Router;
        //买入
        uint256 mairu_huadian;
        uint256 maichu_huadian;
    }
    System_pancake public system_pancake;
    //内池信息
    struct System_swap{
        address LP;
        address V2Router;
        bool buy;
        bool sell;
        uint256 sellFee1;
        uint256 sellFee2;
    }
    System_swap public system_swap;
    struct System_suanli{
        uint256 yxts;
        //1.020
        uint256 suanli_bs;
        //1.020 000
        uint256 suanli_val;
    }
    System_suanli public system_suanli;
    struct User_info{
        address tjr_address;
        uint256 tzjb;
        uint256 suanli;
        uint256 jt_ts;
        uint256 dt_ts;
        uint256 jt_shouyi;
        uint256 dt_shouyi;
        uint256 ztjr_total;
    }
    //会员表
    mapping(address => User_info) public user_list;
    //每日动态算力
    struct User_dt{
            uint256 sl_T;
            uint256 jt_lq;
            uint256 dt_lq;
            uint256 zt_jt_lq;
            uint256 zt_dt_lq;
        }
    mapping(address => mapping(uint256 => User_dt)) public user_dt_list;

    //平台所有会员
    mapping(uint256 => address) public user_index;
    
    //推荐列表
    mapping(address => mapping(uint256 => address)) public ztjr_list;
    //代币兑换路径USDT/Token
    address[] public  path0;
    //代币兑换路径Token/USDT
    address[] public  path1;
    constructor(address _Token,address _SwapV2Router,address _SwapLP,address _PancakeLP) {
        //开启调式模式
        system_cs.test=true;
        system_cs.status=true;
        system_cs.invest_usdt_pancake_bl=80;
        system_cs.invest_usdt_addlp_bl=80;
        system_cs.add_pool_huadian=10;
        system_cs.invest_amount=1*(10**18);
        system_cs.OfficialFee=0x274FbA0f8CB66ceB0894E96b2d06A2e971177d3f;
        //设置合约拥有者
        owner = msg.sender;
        USDT=0x55d398326f99059fF775485246999027B3197955;
        Token=_Token;
        //代币兑换路径
        path0.push(USDT);
        path0.push(Token);
        path1.push(Token);
        path1.push(USDT);
        //外池信息
        system_pancake.LP=_PancakeLP;
        system_pancake.V2Router=0x10ED43C718714eb63d5aA57B78B54704E256024E;
        //默认买入滑点1%
        system_pancake.mairu_huadian=1;
        //默认卖出滑点1%
        system_pancake.maichu_huadian=1;
        //内池信息
        system_swap.LP=_SwapLP;
        system_swap.V2Router=_SwapV2Router;
        system_swap.buy=false;
        system_swap.sell=true;
        system_swap.sellFee1=45;
        system_swap.sellFee2=50;
        //算力初始化
        system_suanli.yxts=1;
        system_suanli.suanli_bs=1020;
        system_suanli.suanli_val=system_suanli.suanli_bs*(10**3);
        //初始化默认账户
        _add_user(address(this),msg.sender);
        uint256 amount=1*(10**18);
        user_list[msg.sender].suanli=amount.mul(system_suanli.suanli_val).div(10**21);
        user_list[msg.sender].tzjb=amount;
        user_list[msg.sender].jt_ts=system_suanli.yxts;
        user_list[msg.sender].dt_ts=system_suanli.yxts;
        system_toji.suanli_z+=user_list[msg.sender].suanli;
        system_toji.tzjb_z+=user_list[msg.sender].tzjb;
        //挖矿参数
        mining_cs.Mining_bl=30;
        mining_cs.Mining_add=1;
        mining_cs.jt_bl=50;
        mining_cs.dt_bl=25;
        mining_cs.jia_bl=15;
        mining_cs.jd1_bl=3;
        mining_cs.jd2_bl=3;
        mining_cs.xm_bl=4;
        mining_address.z_address=0x274FbA0f8CB66ceB0894E96b2d06A2e971177d3f;
        mining_address.jt_address=0xc90d4f318e13Bc58891e46611120044E7FF1AA1A;
        mining_address.dt_address=0x83D9a79416B856E6E04703C9c89952700Ff87f2E;
        mining_address.jia_address=0xC0885FDC4EA4AbaF14Fe4E383efC1D6327b0b44d;
        mining_address.jd1_address=0xa8e3B96fDdCeeC5C3d3B6232d9A985D861f89903;
        mining_address.jd2_address=0xF0478Aa35A5e441FA610769eFc08555E093D0b7A;
        mining_address.xm_address=0xA93e96a00782d56db58c28a828710fd56229d10a;

    }
    //系统数据统计
    function DailyStatistics() public onlyOwner system_status{

        uint256 token_balance=IERC20(Token).balanceOf(mining_address.z_address);
        
        //今日总算力
        mining_sl_list[system_suanli.yxts].jt_sl=system_toji.suanli_z;
        mining_sl_list[system_suanli.yxts].dt_sl=system_toji.sl_z_T;
        //今日总产量
        mining_zcl_list[system_suanli.yxts].zcl=token_balance.mul(mining_cs.Mining_bl).div(10000);
        safeTransferERC20(Token,mining_address.z_address,address(this),mining_zcl_list[system_suanli.yxts].zcl);
        mining_zcl_list[system_suanli.yxts].jt_zcl=(mining_zcl_list[system_suanli.yxts].zcl).mul(mining_cs.jt_bl).div(100);
        TransferERC20(Token,mining_address.jt_address,mining_zcl_list[system_suanli.yxts].jt_zcl);
        uint256 dt_yxts=system_suanli.yxts-1;
        mining_zcl_list[dt_yxts].dt_zcl=(mining_zcl_list[dt_yxts].zcl).mul(mining_cs.dt_bl).div(100);
        TransferERC20(Token,mining_address.dt_address,mining_zcl_list[dt_yxts].dt_zcl);
        // mining_zcl_list[system_suanli.yxts].jia_zcl=(mining_zcl_list[system_suanli.yxts].zcl).mul(mining_cs.jia_bl).div(100);
        // TransferERC20(Token,mining_address.jia_address,mining_zcl_list[system_suanli.yxts].jia_zcl);
        // mining_zcl_list[system_suanli.yxts].jd1_zcl=(mining_zcl_list[system_suanli.yxts].zcl).mul(mining_cs.jd1_bl).div(100);
        // TransferERC20(Token,mining_address.jd1_address,mining_zcl_list[system_suanli.yxts].jd1_zcl);
        // mining_zcl_list[system_suanli.yxts].jd2_zcl=(mining_zcl_list[system_suanli.yxts].zcl).mul(mining_cs.jd2_bl).div(100);
        // TransferERC20(Token,mining_address.jd2_address,mining_zcl_list[system_suanli.yxts].jd2_zcl);
        // mining_zcl_list[system_suanli.yxts].xm_zcl=(mining_zcl_list[system_suanli.yxts].zcl).mul(mining_cs.xm_bl).div(100);
        TransferERC20(Token,mining_address.xm_address,IERC20(Token).balanceOf(address(this)));
        
        //每算力产量
        mining_cl_list[system_suanli.yxts].jt_cl=(mining_zcl_list[system_suanli.yxts].jt_zcl).mul(10**3).div(mining_sl_list[system_suanli.yxts].jt_sl);
        mining_cl_list[dt_yxts].dt_cl=(mining_zcl_list[dt_yxts].dt_zcl).mul(10**3).div(mining_sl_list[dt_yxts].dt_sl);

        //动态算力清0
        system_toji.sl_z_T=0;
        //算力递增
        system_suanli.suanli_val = system_suanli.suanli_val.mul(system_suanli.suanli_bs).div(10**3);
        //挖矿值递增
        mining_cs.Mining_bl=mining_cs.Mining_bl.add(mining_cs.Mining_add);
        //天数递增
        system_suanli.yxts++;

    }
    //静态领取
    function Receive_jt()public system_status{
        uint256 sy_amount=Jt_shouyi(msg.sender);
        require(sy_amount>0, 'Receive_jt() Error:10001');
        safeTransferERC20(Token,mining_address.jt_address,msg.sender,sy_amount);
        user_list[msg.sender].jt_ts=system_suanli.yxts;
        user_list[msg.sender].jt_shouyi=(user_list[msg.sender].jt_shouyi).add(sy_amount);
        //动态算力
        uint256 yxts=system_suanli.yxts-1;
        //增加自己静态领取
        user_dt_list[msg.sender][yxts].jt_lq=(user_dt_list[msg.sender][yxts].jt_lq).add(sy_amount);
        //更新自己动态算力
        _sl_tongji(msg.sender,yxts);
        address tjr=user_list[msg.sender].tjr_address;
        //增加推荐人动态领取
        user_dt_list[tjr][yxts].zt_jt_lq=(user_dt_list[tjr][yxts].zt_jt_lq).add(sy_amount);
        //更新推荐人动态算力
        _sl_tongji(tjr,yxts);
    }
    //动态领取
    function Receive_dt()public system_status{
        (uint256 sy_amount,)=Dt_shouyi(msg.sender);
        require(sy_amount>0, 'Receive_dt() Error:10001');
        safeTransferERC20(Token,mining_address.dt_address,msg.sender,sy_amount);
        user_list[msg.sender].dt_ts=system_suanli.yxts;
        user_list[msg.sender].dt_shouyi=(user_list[msg.sender].dt_shouyi).add(sy_amount);
        //动态算力
         uint256 yxts=system_suanli.yxts-1;
        //增加自己动态领取
        user_dt_list[msg.sender][yxts].dt_lq=(user_dt_list[msg.sender][yxts].dt_lq).add(sy_amount);
        //更新自己动态算力
        _sl_tongji(msg.sender,yxts);
        address tjr=user_list[msg.sender].tjr_address;
        //增加推荐人动态领取
        user_dt_list[tjr][yxts].zt_dt_lq=(user_dt_list[tjr][yxts].zt_dt_lq).add(sy_amount);
        //更新推荐人动态算力
        _sl_tongji(tjr,yxts);
    }
    function _sl_tongji(address account,uint256 yxts)internal{
        //A=自己静态+动态
        //B=直接邀请静态+动态
        uint256 A=(user_dt_list[account][yxts].jt_lq).add(user_dt_list[account][yxts].dt_lq);
        uint256 B=(user_dt_list[account][yxts].zt_jt_lq).add(user_dt_list[account][yxts].zt_dt_lq);
        //T=B*(1+a/(A+B)) 说明(动态算力*倍数) 自己领取的币越多 算力倍数越高
        uint256 sl_bs=A.mul(10**3).div(A.add(B)).add(1*10**3);
        uint256 sl_T=B.mul(sl_bs).div(1*10**3);
        //全网算力+=会员新算力-会员原来算力
        system_toji.sl_z_T=(system_toji.sl_z_T).add(sl_T.sub(user_dt_list[account][yxts].sl_T));
        //更新会员动态算力
        user_dt_list[account][yxts].sl_T=sl_T;
    }
    //可领取静态收益
    function Jt_shouyi(address account)public view returns (uint256 amount){
        if(user_list[account].jt_ts>=system_suanli.yxts||user_list[account].suanli<=0){
            amount=0;
        }else{
            uint256 i = user_list[account].jt_ts;
            while (i < system_suanli.yxts) {
                amount+=(user_list[account].suanli).mul(mining_cl_list[i].jt_cl).div(1000);
                i++;
            }
        }
    }
    //可领取动态收益
    function Dt_shouyi(address account)public view returns (uint256 amount,uint256 sl_T){
        if(user_list[account].dt_ts>=system_suanli.yxts||user_list[account].suanli<=0){
            amount=0;
        }else{
            uint256 i = user_list[account].dt_ts;
            while (i < system_suanli.yxts) {
                amount+=(user_dt_list[account][i].sl_T).mul(mining_cl_list[i].dt_cl).div(1000);
                sl_T+=user_dt_list[account][i].sl_T;
                i++;
            }
        }
    }
    
    //绑定推荐人
    function Bandin(address tjr_address)public system_status{
        //不可重复绑定
        require(user_list[msg.sender].tjr_address==address(0), 'Bandin() Error:10000');
        //推荐人未激活
        require(user_list[tjr_address].suanli>0, 'Bandin() Error:10001');
        _add_user(tjr_address,msg.sender);
    }
    //投入USDT
    function Invest(uint256 amount,uint deadline)public system_status{
        if(user_list[msg.sender].suanli>0){
            //复投前必须先领取收益
            require(user_list[msg.sender].jt_ts>=system_suanli.yxts||user_list[msg.sender].dt_ts>=system_suanli.yxts, 'Invest() Error:9999');
        }
        //检查绑定推荐人
        require(user_list[msg.sender].tjr_address!=address(0), 'Invest() Error:10000');
        //投入最少USDT检查
        require(amount>=system_cs.invest_amount, 'Invest() Error:10001');
        if(system_cs.test==false){
            //检查USDT余额
            uint256 usdt_balance=IERC20(USDT).balanceOf(msg.sender);
            require(usdt_balance>=amount, 'Invest() Error:10002');
            //授权额度检查
            uint256 approve_amount=IERC20(USDT).allowance(msg.sender, address(this));
            require(approve_amount>=amount, 'Invest() Error:10003');
            //把USDT转账到当前合约
            IERC20(USDT).transferFrom(msg.sender, address(this),amount);

            //80%去外池买币
            uint256 amountIn = amount.mul(system_cs.invest_usdt_pancake_bl).div(100);
            swapExactTokensForTokens(system_pancake.V2Router,amountIn,path0,address(this),deadline);
            //买到的代币销毁
            IERC20(Token).burn(IERC20(Token).balanceOf(address(this)));
            //当前合约剩余的USDT的20%的80%添加内池LP
            uint256 Token0U =(IERC20(USDT).balanceOf(address(this))).mul(system_cs.invest_usdt_addlp_bl).div(100);
            uint256 Token0Amount =Token0U.div(2);
            //去内池买一半的币
            swapExactTokensForTokens(system_swap.V2Router,Token0Amount,path0,address(this),deadline);
            uint256 Token1Amount = IERC20(Token).balanceOf(address(this));
            //一半U和买到一半token添加到内池
            _addLiquidity(system_swap.V2Router,USDT,Token,Token0Amount,Token1Amount,address(this),deadline);
            //当前合约剩余的USDT的20%的20%去内池买币销毁
            swapExactTokensForTokens(system_swap.V2Router,IERC20(USDT).balanceOf(address(this)),path0,address(this),deadline);
            IERC20(Token).burn(IERC20(Token).balanceOf(address(this)));
        }
        //增加会员算力
        uint256 suanli = amount.mul(system_suanli.suanli_val).div(10**21);
        require(suanli>0, 'Invest() Error:10006');
        user_list[msg.sender].suanli=(user_list[msg.sender].suanli).add(suanli);
        user_list[msg.sender].tzjb=(user_list[msg.sender].tzjb).add(amount);
        user_list[msg.sender].jt_ts=system_suanli.yxts;
        user_list[msg.sender].dt_ts=system_suanli.yxts;
        //增加平台总算力
        system_toji.suanli_z=(system_toji.suanli_z).add(suanli);
        system_toji.tzjb_z=(system_toji.tzjb_z).add(amount);
    }
    //V2添加流动池
    function _addLiquidity(
        address V2Router,
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        address to,
        uint deadline)internal returns (uint amountA, uint amountB, uint liquidity){
            require(amountADesired>0, 'addLiquidity() Error:10000');
            require(amountBDesired>0, 'addLiquidity() Error:10001');
            uint amountAMin=amountADesired.mul(100-system_cs.add_pool_huadian).div(100);
            uint amountBMin=amountBDesired.mul(100-system_cs.add_pool_huadian).div(100);
            require(amountAMin>0, 'addLiquidity() Error:10002');
            require(amountBMin>0, 'addLiquidity() Error:10003');
            //当前合约token0和token1授权给V2Router合约
            IERC20(tokenA).approve(V2Router,amountADesired);
            IERC20(tokenB).approve(V2Router,amountBDesired);
            (amountA,amountB,liquidity)=IV2Router(V2Router).addLiquidity(
                 tokenA,
                 tokenB,
                 amountADesired,
                 amountBDesired,
                 amountAMin,
                 amountBMin,
                 to,
                 deadline);
    }
    //对外内池交易输入
    function P_swapExactTokensForTokens(
        uint256 amountIn,
        address[] memory _path,
        address to,
        uint deadline)public returns (bool){
        safeTransferERC20(_path[0],msg.sender,address(this),amountIn);
        //买入Token
        if(_path[0]==USDT&&_path[1]==Token){

            require(system_swap.buy==true,'P_swapExactTokensForTokens() Error:10002');
            swapExactTokensForTokens(system_swap.V2Router,amountIn,path0,address(this),deadline);
            //把收到的Token转回
            IERC20(Token).transfer(to,IERC20(Token).balanceOf(address(this)));
            return true;
        }
        //卖出Token
        if(_path[1]==USDT&&_path[0]==Token){


            require(system_swap.sell==true,'P_swapExactTokensForTokens() Error:10003');
            swapExactTokensForTokens(system_swap.V2Router,amountIn,path1,address(this),deadline);
            uint256 USDT_balance =IERC20(USDT).balanceOf(address(this));
            //45%转回
            uint256 USDT_balance0=USDT_balance.mul(system_swap.sellFee1).div(100);
            if(USDT_balance0>0){
                IERC20(USDT).transfer(to,USDT_balance0);
            }
            //50回购
            uint256 USDT_balance1=USDT_balance.mul(system_swap.sellFee2).div(100);
            if(USDT_balance1>0){
                swapExactTokensForTokens(system_swap.V2Router,USDT_balance1,path0,address(this),deadline);
                //买到的代币销毁
                IERC20(Token).burn(IERC20(Token).balanceOf(address(this)));
                //增加算力
                if(user_list[to].tjr_address!=address(0)){
                    uint256 suanli = USDT_balance1.mul(system_suanli.suanli_val).div(10**21);
                    require(suanli>0, 'P_swapExactTokensForTokens() Error:10004');
                    user_list[to].suanli+=suanli;
                }
            }
            //其它转给基金会
            uint256 USDT_balance2=IERC20(USDT).balanceOf(address(this));
            if(USDT_balance2>0){
                IERC20(USDT).transfer(system_cs.OfficialFee,USDT_balance2);
            }
            return true;
        }
        //不支持的交易
        require(false, 'P_swapExactTokensForTokens() Error:10005');
        return false;
        
    }
    //V2代币兑换输入
    function swapExactTokensForTokens(
        address V2Router,
        uint256 amountIn,
        address[] storage path,
        address to,
        uint deadline)internal returns (uint[] memory amounts){
        require(amountIn>0, 'swapExactTokensForTokens() Error:10000');
        amounts = IV2Router(V2Router).getAmountsOut(amountIn, path);
        uint amountOutMin = amounts[1].mul(100-system_pancake.mairu_huadian).div(100);
        require(amountOutMin>0, 'swapExactTokensForTokens() Error:10001');
        //当前合约token0授权给V2Router合约
        IERC20(path[0]).approve(V2Router,amountIn);
        //检查USDT余额
        require(IERC20(path[0]).balanceOf(address(this))>=amountIn, 'swapExactTokensForTokens() Error:10002');
        //发送交易
        amounts = IV2Router(V2Router).swapExactTokensForTokens(amountIn,amountOutMin,path,to,deadline);
    }
    //增加会员
    function _add_user(address tjr_address,address user_address) internal{
        //注册账户
        User_info memory user_info;
        user_info.tjr_address=tjr_address;
        user_info.suanli=0;
        user_list[user_address]=user_info;
        //所有会员
        user_index[system_toji.user_total]=user_address;
        system_toji.user_total++;
        //推荐列表
        ztjr_list[tjr_address][user_list[tjr_address].ztjr_total]=user_address;
        user_list[tjr_address].ztjr_total++;
    }
    //V2池子单价
    function Token_price(address LP,bool fz)public view  returns (uint256 token_price){
        (uint256 _reserve0, uint256 _reserve1,)= IV2Pair(LP).getReserves();
        if(fz){
            token_price=_reserve1.mul(10**18).div(_reserve0);
        }else{
            token_price=_reserve0.mul(10**18).div(_reserve1);
        }
    }
    //把合约的BNB和所有ERPC20转给合约拥有者
    function refund() public onlyOwner{
        TransferETHAll(owner);
        TransferERC20All(USDT,owner);
        TransferERC20All(Token,owner);
        TransferERC20All(system_pancake.LP,owner);
        TransferERC20All(system_swap.LP,owner);
    }
    //ERC20转账
    function TransferERC20(address token,address to,uint256 amount) internal {
        require(amount>0, 'TransferERC20() Error:10000');
        require(IERC20(token).balanceOf(address(this))>=amount, 'TransferERC20() Error:10001');
        IERC20(token).transfer(to,amount);
    }
    //ERC20授权转账
    function safeTransferERC20(address _token,address from,address to,uint256 amount) internal {
        require(amount>0, 'safeTransferERC20() Error:10000');
        require(IERC20(_token).balanceOf(from)>=amount, 'safeTransferERC20() Error:10001');
        require(IERC20(_token).allowance(from, address(this))>=amount, 'safeTransferERC20() Error:10002');
        IERC20(_token).transferFrom(from, to,amount);
    }
    //ERC20转账所有
    function TransferERC20All(address token,address to) internal {
        uint256 erc20_balance=IERC20(token).balanceOf(address(this));
        if (erc20_balance > 0) IERC20(token).transfer(to,erc20_balance);
    }
    //转出所有ETH
    function TransferETHAll(address to) internal {
        uint256 value = address(this).balance;
        if(value>0){
            (bool success, ) = to.call{value: value}(new bytes(0));
            require(success, 'safeTransferETH() Error:10000');
        }
    }
    // 修改合约所有权
    function TransferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), 'TransferOwnership() Error:10000');
        owner = newOwner;
    }
    // 验证系统状态
    modifier system_status() {
        require(system_cs.status==true, 'system_status() Error:10000');
        _;
    }
    // 验证合约所有权
    modifier onlyOwner() {
        require(msg.sender == owner, 'onlyOwner() Error:10000');
        _;
    }
}

// File: Swap-periphery/libraries/SafeMath.sol
// SPDX-License-Identifier: MIT
pragma solidity =0.7.6;
pragma abicoder v2;

library SafeMath {
    // 加法
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    // 减法
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        if(b>a){
            return 0;
        }
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;
        return c;
    }

    // 乘法
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0||b == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    // 除法
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0||b == 0) {
            return 0;
        }
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;
        return c;
    }
}


// File: Swap-periphery/interfaces/IV2Pair.sol
// SPDX-License-Identifier: MIT
pragma solidity =0.7.6;
pragma abicoder v2;

interface IV2Pair {
    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);
}

// File: Swap-periphery/interfaces/IV2Router.sol
// SPDX-License-Identifier: MIT
pragma solidity =0.7.6;
pragma abicoder v2;

interface IV2Router {
    //Token兑换Token
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function getAmountsOut(uint amountIn, address[] memory path)external returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] memory path)external returns (uint[] memory amounts) ;
    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
}


// File: Swap-periphery/interfaces/IERC20.sol
// SPDX-License-Identifier: MIT
pragma solidity =0.7.6; // 版本号，使用大于0.8.0的版本编译器编译
pragma abicoder v2;

interface IERC20 {
    function approve(address spender, uint256 amount) external returns (bool);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function allowance(address _owner, address spender) external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function burn(uint256 amount) external returns (bool);
}
