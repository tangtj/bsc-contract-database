{"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    \n    function symbol() external view returns(string memory);\n    \n    function name() external view returns(string memory);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n    \n    /**\n     * @dev Returns the number of decimal places\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"SKMTTaxReceiverV3.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"./IERC20.sol\";\n\ninterface IStakingContract {\n    function depositRewards(uint256 amount) external;\n}\n\ninterface IToken {\n    function getOwner() external view returns (address);\n\n    function burn(uint256 amount) external returns (bool);\n}\n\ncontract SKMTTaxReceiverV3 {\n    // Token\n    address public immutable token;\n\n    // Receiver Adresses\n    address public charityAddress;\n    address public defiAddress;\n    address public devAddress;\n\n    // Allocation Percentage\n    uint256 public charityPercentage;\n    uint256 public defiPercentage;\n    uint256 public devPercentage;\n\n    /**\n        Minimum Amount Of Tokens In Contract To Trigger `trigger` Unless `approved`\n        If Set To A Very High Number, Only Approved May Call Trigger Function\n        If Set To A Very Low Number, Anybody May Call At Their Leasure\n     */\n    uint256 public minimumTokensRequiredToTrigger;\n\n    // Address =\u003e Can Call Trigger\n    mapping(address =\u003e bool) public approved;\n\n    // Events\n    event Approved(address caller, bool isApproved);\n    event DepositRewards(uint256 amount);\n\n    modifier onlyOwner() {\n        require(msg.sender == IToken(token).getOwner(), \"Only Token Owner\");\n        _;\n    }\n\n    constructor(\n        address token_,\n        address charityAddress_,\n        address defiAddress_,\n        address devAddress_\n    ) {\n        require(\n            token_ != address(0) \u0026\u0026\n                charityAddress_ != address(0) \u0026\u0026\n                defiAddress_ != address(0) \u0026\u0026\n                devAddress_ != address(0),\n            \"Zero Address\"\n        );\n\n        token = token_;\n        charityAddress = charityAddress_;\n        defiAddress = defiAddress_;\n        devAddress = devAddress_;\n\n        approved[msg.sender] = true;\n\n        charityPercentage = 10;\n        defiPercentage = 30;\n        devPercentage = 50;\n    }\n\n    function trigger() external {\n        // Token Balance In Contract\n        uint256 balance = IERC20(token).balanceOf(address(this));\n\n        if (balance \u003c minimumTokensRequiredToTrigger \u0026\u0026 !approved[msg.sender]) {\n            return;\n        }\n\n        if (balance \u003e 0) {\n            uint256 charityBalance = (balance * charityPercentage) / 100;\n            uint256 defiBalance = (balance * defiPercentage) / 100;\n            uint256 devBalance = (balance * devPercentage) / 100;\n            uint256 burn = balance - charityBalance - defiBalance - devBalance;\n\n            // send to destinations\n            if (charityBalance \u003e 0) {\n                IERC20(token).transfer(charityAddress, charityBalance);\n            }\n            if (devBalance \u003e 0) {\n                IERC20(token).transfer(devAddress, devBalance);\n            }\n            if (burn \u003e 0) {\n                IToken(token).burn(burn);\n            }\n            if (defiBalance \u003e 0) {\n                IStakingContract(defiAddress).depositRewards(defiBalance);\n                emit DepositRewards(defiBalance);\n            }\n        }\n    }\n\n    function setCharityAddress(address charityAddress_) external onlyOwner {\n        require(charityAddress_ != address(0));\n        charityAddress = charityAddress_;\n    }\n\n    function setCharityPercentage(uint256 newCharityPercentage_)\n        external\n        onlyOwner\n    {\n        require(\n            (defiPercentage + devPercentage + newCharityPercentage_) \u003c= 100\n        );\n        charityPercentage = newCharityPercentage_;\n    }\n\n    function setDefiAddress(address defiAddress_) external onlyOwner {\n        require(defiAddress_ != address(0));\n        defiAddress = defiAddress_;\n    }\n\n    function setDefiPercentage(uint256 newDefiPercentage_) external onlyOwner {\n        require(\n            (charityPercentage + devPercentage + newDefiPercentage_) \u003c= 100\n        );\n        defiPercentage = newDefiPercentage_;\n    }\n\n    function setDevAddress(address devAddress_) external onlyOwner {\n        require(devAddress_ != address(0));\n        devAddress = devAddress_;\n    }\n\n    function setDevPercentage(uint256 newDevPercentage_) external onlyOwner {\n        require(\n            (charityPercentage + defiPercentage + newDevPercentage_) \u003c= 100\n        );\n        devPercentage = newDevPercentage_;\n    }\n\n    function setApproved(address caller, bool isApproved) external onlyOwner {\n        approved[caller] = isApproved;\n        emit Approved(caller, isApproved);\n    }\n\n    function setMinTriggerAmount(uint256 minTriggerAmount) external onlyOwner {\n        minimumTokensRequiredToTrigger = minTriggerAmount;\n    }\n\n    function approve(address spender, uint256 amount) external onlyOwner {\n        IERC20(token).approve(spender, amount);\n    }\n\n    function withdraw() external onlyOwner {\n        (bool s, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(s);\n    }\n\n    function withdraw(address _token) external onlyOwner {\n        IERC20(_token).transfer(\n            msg.sender,\n            IERC20(_token).balanceOf(address(this))\n        );\n    }\n}\n"}}