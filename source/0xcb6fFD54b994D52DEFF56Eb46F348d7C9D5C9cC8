
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/BtcBot.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract BtcBot is Ownable {
    address public allowedToken;
    mapping(address => uint256) public deposits;
    mapping(address => uint256) public userAllTimeDeposits; // New mapping to track total deposits
    mapping(address => uint256) public userAllTimeProfit;
    mapping(address => uint256) public userProfitTable;
    mapping(address => uint256[30]) public userProfitTable30;

    uint256 public randomNumberCounter;
    uint256 public secondsUntilPenaltyDone;
    uint256 public penaltyPercentage;
    uint256 public botAllTimeDeposits;
    uint256 public botDailyEarnings;
    uint256 public botDailyDeposits;
    uint256 public botDailyProfitWithdrawal;
    uint256 public binance;
    uint256 public botAllTimeProfitPerc;
    uint256 public botAllTimeEarnings;
    uint256 public botDailyDepositWithdrawals;
   

    mapping(address => uint256) public userLastDepositTimestamp;
    mapping(address => uint256) public userAllTimeProfitWithdrawn;
    mapping(address => uint256) public userAllTimeDepositWithdrawn; // New mapping
    mapping(address => uint256) public botAllTimeDepositWithdrawals;
    mapping(address => uint256) public botAllTimeProfitWithdrawals;
    mapping(address => uint256) public userAllTimeProfitPercentage;
    mapping(address => uint256) public userDailyProfitPercentage;

    address[] public userList;



    constructor(address _allowedToken, uint256 _secondsUntilPenaltyDone, uint256 _penaltyPercentage) {
        allowedToken = _allowedToken;
        secondsUntilPenaltyDone = _secondsUntilPenaltyDone;
        penaltyPercentage = _penaltyPercentage;
        userAllTimeProfit[msg.sender] = 0;
    }

function deposit(uint256 amount) external {
    require(amount > 0, "Amount must be greater than 0");
    require(deposits[msg.sender] + amount > deposits[msg.sender], "Deposit overflow");

    IERC20 token = IERC20(allowedToken);
    require(token.transferFrom(msg.sender, address(this), amount), "Token transfer failed");

    if (deposits[msg.sender] == 0) {
        // Add the user to the user list if they are not already present
        userList.push(msg.sender);
    }

    deposits[msg.sender] += amount;
    userAllTimeDeposits[msg.sender] += amount; // Update total deposits
    botAllTimeDeposits += amount; // Update total deposits for the bot
    userLastDepositTimestamp[msg.sender] = block.timestamp;
    botDailyDeposits += amount;

    // botDailyProfitWIthdrawal earnings withdrawn
}





function pushFromBinanceApi() external onlyOwner {
    randomNumberCounter++;

    uint256 randomFactor = randomNumberCounter % 4;
    uint256 randomNumber = 26 + randomFactor;

    IERC20 token = IERC20(allowedToken);
    uint256 currentTokenBalance = token.balanceOf(address(this));

    for (uint256 i = 0; i < userList.length; i++) {
        address user = userList[i];
        uint256 userDeposit = deposits[user];

        if (userDeposit > 0) {
            uint256 profit = (userDeposit * randomNumber) / 10000;

            // Subtract the old profit from userProfitTable before adding the new profit
            userAllTimeProfit[user] -= userProfitTable[user];

            userProfitTable[user] += profit;

            for (uint256 j = 29; j > 0; j--) {
                userProfitTable30[user][j] = userProfitTable30[user][j - 1];
            }
            userProfitTable30[user][0] = profit;

            userAllTimeProfit[user] += profit;

            // ... (rest of the code)
        }

        // Only update percentages and daily profit if the user has a deposit
        if (deposits[user] > 0) {
            userAllTimeProfitPercentage[user] += randomNumber;
            userDailyProfitPercentage[user] = randomNumber;
        }
    }

    botDailyEarnings = (randomNumber * currentTokenBalance) / 100;
    botDailyDeposits = 0;
    botDailyProfitWithdrawal = 0;
    botDailyDepositWithdrawals = 0;
    binance = randomNumber;
    botAllTimeProfitPerc += randomNumber;
    botAllTimeEarnings += (randomNumber * currentTokenBalance) / 100;
}


        function withdrawProfit() external {
            address user = msg.sender;
            uint256 profit = userProfitTable[user];
            require(profit > 0, "No available profit for withdrawal");

            userProfitTable[user] = 0; // Reset userProfitTable
            IERC20 token = IERC20(allowedToken);
            require(token.transfer(user, profit), "Token transfer failed");

            userAllTimeProfitWithdrawn[user] += profit; // Update user's all-time withdrawn profits
            botAllTimeProfitWithdrawals[address(this)] += profit;
            botDailyProfitWithdrawal += profit;

        }


        function userWithdrawDeposit() external {
        address user = msg.sender;
        require(deposits[user] > 0, "No deposit for the user");

        uint256 timeSinceLastDeposit = block.timestamp - userLastDepositTimestamp[user];

        uint256 depositAmount = deposits[user];
        uint256 withdrawAmount;

        if (timeSinceLastDeposit < secondsUntilPenaltyDone) {
            withdrawAmount = depositAmount * (100 - penaltyPercentage) / 100;
        } else {
            withdrawAmount = depositAmount;
        }

        deposits[user] -= withdrawAmount;
        // Set the user's deposit to 0 after successful withdrawal
        botAllTimeDepositWithdrawals[address(this)] += withdrawAmount;


        deposits[user] = 0;
        // userAllTimeDeposits[user] remains unchanged

        userAllTimeDepositWithdrawn[user] += withdrawAmount; // Update total deposit withdrawn

        botDailyDepositWithdrawals += withdrawAmount;
    
        

        IERC20 token = IERC20(allowedToken);
        require(token.transfer(user, withdrawAmount), "Token transfer failed");

            // Remove the user's address from the userList
    for (uint256 i = 0; i < userList.length; i++) {
        if (userList[i] == user) {
            userList[i] = userList[userList.length - 1];
            userList.pop();
            break;
        }
    }
    }




        function compoundEarnings() external {
        address user = msg.sender;
        uint256 profit = userProfitTable[user];
        require(profit > 0, "No available profit to compound");

        // Reset userProfitTable
        userProfitTable[user] = 0;

        // Calculate deposit increase
        uint256 depositIncrease = profit;

        // Add profit to deposits
        deposits[user] += depositIncrease;

        // Reset penalty timer
        userLastDepositTimestamp[user] = block.timestamp;

        emit EarningsCompounded(user, depositIncrease);
    }

    event EarningsCompounded(address indexed user, uint256 depositIncrease);


    function ownerWithdrawAll() external onlyOwner {
        IERC20 token = IERC20(allowedToken);
        uint256 contractBalance = token.balanceOf(address(this));
        require(contractBalance > 0, "No allowedToken balance in the contract");

        require(token.transfer(owner(), contractBalance), "Token transfer failed");
    }


    function getUserProfit(address user) external view returns (uint256) {
        return userProfitTable[user];
    }


    function getUserProfit30Sum(address user) external view returns (uint256) {
    uint256[30] storage profits = userProfitTable30[user];
    uint256 sum = 0;

    for (uint256 i = 0; i < 30; i++) {
        sum += profits[i];
    }

    return sum;
    }







    function getUsersCurrentDepositBalance(address user) external view returns (uint256) {
        return deposits[user];
    }

    function userAllTimeDeposit(address user) external view returns (uint256) {
    return userAllTimeDeposits[user];
    }

    function getUserAllTimeProfit(address user) external view returns (uint256) {
    return userAllTimeProfit[user];
    }

    function getUserAllTimeProfitWithdrawn(address user) external view returns (uint256) {
    return userAllTimeProfitWithdrawn[user];
    }

    function getUserAllTimeDepositWithdrawn(address user) external view returns (uint256) {
    return userAllTimeDepositWithdrawn[user];
    }

    function getUserLastDepositTimestamp(address user) external view returns (uint256) {
    return userLastDepositTimestamp[user];
    }

    function getBotAllTimeDeposits() external view returns (uint256) {
    return botAllTimeDeposits;
    }

    function getBotAllTimeDepositWithdrawals() external view returns (uint256) {
    return botAllTimeDepositWithdrawals[address(this)];
    }

    function getBotAllTimeProfitWithdrawals() external view returns (uint256) {
    return botAllTimeProfitWithdrawals[address(this)];
    }






    function getBotCurrentlyDepositedBalance() external view returns (uint256) {
    IERC20 token = IERC20(allowedToken);
    return token.balanceOf(address(this));
    }





}
