// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _setOwner(_msgSender());
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract MUSDICO is Ownable {
    IERC20 public MusdToken;
    address public sellerAddress;
    uint256 public presaleTokenAmount;
    bool public presaleActive = true;
    uint256 public maxTxAmount = 1000;
    uint256 public maxWalletAmount = 1000000;
    uint256 public totalSold = 0;
    uint256 public totalFund = 0 ether;
    uint256 public currentPrice = 0.04164609 ether;
    address public usdtAddress = 0x33b783A4833f7613cCB6569a9F39a261b311AFbb;
    uint256 public USDTExPrice = 10.01276628 ether;
    
    constructor(address _MusdToken, address _seller) {
        MusdToken = IERC20(_MusdToken);
        sellerAddress = _seller;
    }

    function withdrawFunds() public onlyOwner returns (bool) {
        bool success = payable(msg.sender).send(address(this).balance);
        if (success) {
            totalFund = address(this).balance;
        }
        return success;
    }

    function UpdateBnbCurrentPrice(uint256 _newPrice) public onlyOwner {
        currentPrice = _newPrice;
    }

    function buyTokenOp(uint256 _amount) public payable {
        uint256 amountToBuy = _amount * currentPrice;
        MusdToken.transferFrom(sellerAddress, msg.sender, amountToBuy);
        totalSold += amountToBuy;
        totalFund += msg.value;
    }

    function BuyTokenWithUSDT(uint256 _amount) external {
        IERC20 paymentToken = IERC20(usdtAddress);
        uint256 amountToReceive = _amount * USDTExPrice;
        require(
            paymentToken.transferFrom(msg.sender, address(this), amountToReceive),
            "Transfer failed"
        );
        bool success = MusdToken.transfer(msg.sender, _amount);
        require(success, "Failed to transfer token!");
        totalSold += _amount;
        totalFund += amountToReceive;
    }
}