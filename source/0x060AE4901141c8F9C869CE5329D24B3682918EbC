// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0 <0.9.0;

interface IERC20 {
    function balanceOf(address owner) external returns (uint);

    function transfer(address to, uint amount) external returns (bool);
}

contract ShibaInuAirdrop {
    uint public registerReward;
    uint public referralReward;

    IERC20 public rewardToken;

    address public owner;
    mapping(address => bool) joined;
    mapping(uint => bool) claimedIDs;

    event JoinedAirdrop(address indexed userAddress);
    event RewardReferral(address indexed referral, address indexed referee);

    constructor(address contractAddr, uint regReward, uint refReward) {
        owner = msg.sender;
        setAirdropInfo(contractAddr, regReward, refReward);
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "!owner");
        _;
    }

    function joinAirdrop(
        uint userID,
        address userAddress,
        address referralAddres
    ) public onlyOwner {
        require(userAddress != address(0), "not allowed");
        require(!claimedIDs[userID], "not allowed");

        bool hasJoined = joined[userAddress];
        joined[userAddress] = true;
        claimedIDs[userID] = true;

        require(!hasJoined, "not allowed");
        require(rewardToken.transfer(userAddress, registerReward), "not sent");

        emit JoinedAirdrop(userAddress);

        if (referralAddres != address(0)) {
            rewardToken.transfer(referralAddres, referralReward);
            emit RewardReferral(referralAddres, userAddress);
        }
    }

    function withdrawToken(address contractAddr) public onlyOwner {
        IERC20 t = IERC20(contractAddr);
        t.transfer(owner, t.balanceOf(address(this)));
    }

    function setRewardToken(address contractAddr) public onlyOwner {
        rewardToken = IERC20(contractAddr);
    }

    function setRegisterReward(uint regReward) public onlyOwner {
        registerReward = regReward;
    }

    function setReferralReward(uint refReward) public onlyOwner {
        referralReward = refReward;
    }

    function setAirdropInfo(
        address contractAddr,
        uint regReward,
        uint refReward
    ) public onlyOwner {
        setRewardToken(contractAddr);
        setRegisterReward(regReward);
        setReferralReward(refReward);
    }
}