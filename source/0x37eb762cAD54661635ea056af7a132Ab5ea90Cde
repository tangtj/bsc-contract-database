
// File: contracts/GEToken.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "https://github.com/pancakeswap/pancake-smart-contracts/blob/dependabot/npm_and_yarn/projects/smartchef/v2/openzeppelin/contracts-4.7.3/projects/exchange-protocol/contracts/interfaces/IPancakeRouter02.sol";
import "https://github.com/pancakeswap/pancake-smart-contracts/blob/dependabot/npm_and_yarn/projects/smartchef/v2/openzeppelin/contracts-4.7.3/projects/exchange-protocol/contracts/interfaces/IERC20.sol";
import "https://github.com/pancakeswap/pancake-smart-contracts/blob/dependabot/npm_and_yarn/projects/smartchef/v2/openzeppelin/contracts-4.7.3/projects/exchange-protocol/contracts/interfaces/IPancakeFactory.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract TokenConverter is Ownable {
    mapping(uint256 => mapping(address => bool)) public hasClaimedRound; // claim status for each round
    uint256 public currentRound;
    address private constant PANCAKE_ROUTER_ADDRESS = 0x10ED43C718714eb63d5aA57B78B54704E256024E; 
    address private constant GETokenAddress = 0x0D9028F9F14A8ca47b5d4E1C6ccfc7Cb363ff4Fd;
    address private constant BitTorrentAddress = 0x352Cb5E19b12FC216548a2677bD0fce83BaE434B;
    
    IERC20 private GEToken;
    IERC20 private BitTorrentToken;
    IPancakeRouter02 public pancakeRouter;
    IPancakeFactory public pancakeFactory;
    
    
    constructor() {
        pancakeRouter = IPancakeRouter02(PANCAKE_ROUTER_ADDRESS);
        GEToken = IERC20(GETokenAddress);
        BitTorrentToken = IERC20(BitTorrentAddress);
        pancakeFactory = IPancakeFactory(pancakeRouter.factory());
        currentRound = 0;
    }
    function depositGETokens(uint256 amount) external onlyOwner{
        require(amount > 0,"No tokens to deposit");
        GEToken.transferFrom(msg.sender, address(this), amount *10**18);
        convertTokens();
    }
    function convertTokens() internal {
        uint256 contractBalance = GEToken.balanceOf(address(this));
        require(contractBalance > 0,"No tokens in the smart contract to swap!");
        currentRound +=1;
        
        address pairAddress = pancakeFactory.getPair(GETokenAddress, pancakeRouter.WETH());
        
        GEToken.approve(PANCAKE_ROUTER_ADDRESS, contractBalance);
        GEToken.approve(pairAddress, contractBalance);

        address[] memory path = new address[](3);
        path[0] = GETokenAddress;
        path[1] = pancakeRouter.WETH() ;
        path[2] = BitTorrentAddress;

        pancakeRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens (
            contractBalance,
            1000000000, // You can set the minimum amount of Token B you want to receive here
            path,
            address(this),
            block.timestamp + 1000 // Add a deadline to the swap to prevent it from running forever
        );
    }
    function transferTokens(uint256 amount) external {
        require(!hasClaimedRound[currentRound][msg.sender], "The user has already claimed the tokens");
        require(amount > 0, "Amount should be greater than zero");
        require(BitTorrentToken.balanceOf(address(this)) >= amount,"Not enough Bittorrent tokens");
        
        BitTorrentToken.transfer(msg.sender, amount);
        hasClaimedRound[currentRound][msg.sender] = true;
    }

    function claimExpiredRewards() external onlyOwner {
        uint256 contractTokenBalance = GEToken.balanceOf(address(this));
        require(contractTokenBalance > 0, "No tokens to withdraw");
        BitTorrentToken.transfer(owner(), contractTokenBalance);
    }

    function withdrawGETokens() external onlyOwner {
        uint256 contractTokenBalance = GEToken.balanceOf(address(this));
        require(contractTokenBalance > 0, "No tokens to withdraw");
        GEToken.transfer(owner(), contractTokenBalance);
    }

    function getHasClaimedRound(uint256 round)public view returns(bool){
        return hasClaimedRound[round][msg.sender];
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: https://github.com/pancakeswap/pancake-smart-contracts/blob/dependabot/npm_and_yarn/projects/smartchef/v2/openzeppelin/contracts-4.7.3/projects/exchange-protocol/contracts/interfaces/IPancakeFactory.sol
// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.5.0;

interface IPancakeFactory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);

    function allPairs(uint256) external view returns (address pair);

    function allPairsLength() external view returns (uint256);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;

    function INIT_CODE_PAIR_HASH() external view returns (bytes32);
}


// File: https://github.com/pancakeswap/pancake-smart-contracts/blob/dependabot/npm_and_yarn/projects/smartchef/v2/openzeppelin/contracts-4.7.3/projects/exchange-protocol/contracts/interfaces/IERC20.sol
// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.5.0;

interface IERC20 {
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Transfer(address indexed from, address indexed to, uint256 value);

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);
}


// File: https://github.com/pancakeswap/pancake-smart-contracts/blob/dependabot/npm_and_yarn/projects/smartchef/v2/openzeppelin/contracts-4.7.3/projects/exchange-protocol/contracts/interfaces/IPancakeRouter02.sol
// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.6.2;

import "./IPancakeRouter01.sol";

interface IPancakeRouter02 is IPancakeRouter01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}


// File: https://github.com/pancakeswap/pancake-smart-contracts/blob/dependabot/npm_and_yarn/projects/smartchef/v2/openzeppelin/contracts-4.7.3/projects/exchange-protocol/contracts/interfaces/IPancakeRouter01.sol
// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.6.2;

interface IPancakeRouter01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETH(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountToken, uint256 amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountToken, uint256 amountETH);

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapTokensForExactTokens(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactETHForTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function swapTokensForExactETH(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactTokensForETH(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapETHForExactTokens(
        uint256 amountOut,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function quote(
        uint256 amountA,
        uint256 reserveA,
        uint256 reserveB
    ) external pure returns (uint256 amountB);

    function getAmountOut(
        uint256 amountIn,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountOut);

    function getAmountIn(
        uint256 amountOut,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountIn);

    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);

    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

