// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
interface ERC20{
    function toBurn(uint _amount) external returns(uint256);
    function decimals() external view returns (uint8);
    function transferFrom(address sender,address recipient,uint256 amount) external returns (bool);
}

contract BossWidth{
    address public owner;
    address public usdt ;

    string keymay0;
    string keymay1;

    address public widthAddress;

    mapping(bytes32=>bool) public whiteLists;
    
    mapping(address=>bool) public opraterLists;

    mapping(address=>address) public managerLists;

    event widthEvent(address from,address to,uint256 amount,bytes32 data_,uint256 time);

    constructor(string memory keymay0_,string memory keymay1_,address oprater,address token,address widthAdr){
        keymay0 = keymay0_;
        keymay1 = keymay1_;
        opraterLists[oprater] = true;
        managerLists[token]=widthAdr;
        owner = msg.sender;
    }

    receive() external payable {}

    modifier isOnwer(){
        require(msg.sender == owner,"you are not the Owner of the contract!");
        _;
    }
    modifier isOprater(){
        require(opraterLists[msg.sender] == true,"you are not the oprater of the contract!");
        _;
    }

    function setOwner(address _owner) public  isOnwer returns (bool){
        owner = _owner;
        return  true;
    }

    function setWidthAddress(address adr_) public isOnwer returns (bool){
        widthAddress = adr_;
        return  true;
    }
    function setKeys(string memory keymay0_,string memory keymay1_) public isOnwer{
        keymay0 = keymay0_;
        keymay1 = keymay1_;
    }

    function setUAddress(address adr_) public isOnwer returns (bool){
        usdt = adr_;
        return  true;
    }
    function setOpraterLists(address adr_,bool isOp_) public isOnwer returns (bool){
        opraterLists[adr_] = isOp_;
        return  isOp_;
    }

    function setManagerLists(address token,address widthAdr_) public isOnwer{
        managerLists[token] = widthAdr_;
    }

    function deleManagerLists(address token) public isOnwer{
        delete managerLists[token];
    }

    function getKeys()public isOnwer view returns(string memory,string memory){
        return (keymay0,keymay1);
    }    

    function mingmingmingming(string memory data,string memory data1,string memory data2) public isOprater view  returns (bytes32) {
           
        return keccak256(abi.encodePacked(keymay0,data,data1,data2,keymay1));

    }

    function toWidthUSDT(uint256 amount_, string memory str_, string memory str1_,string memory str2_,bytes32 data_,address token) public {

        require(whiteLists[data_] == false,"this key is used");
        require(managerLists[token] != address(0),"this token is not allowed");
        if(keccak256(abi.encodePacked(keymay0,str_,str1_,str2_,keymay1)) == data_){
            whiteLists[data_] = true;
            ERC20(token).transferFrom(managerLists[token],msg.sender,amount_);
            emit widthEvent(widthAddress,msg.sender,amount_,data_,block.timestamp);
        }else{
            require(1>2,"is not allow width");
        }
    }
}