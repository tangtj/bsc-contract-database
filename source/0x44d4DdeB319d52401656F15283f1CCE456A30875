
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/MonstrosNFTSale.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

interface IMonstrosUniverse {
    function mintTransferFromWhitelisted(address to, uint256 id, uint256 amount) external;
    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
}

contract MonstrosNFTSale is Ownable {
    IMonstrosUniverse public monstrosUniverse;
    IERC20 public usdcToken;
    
    bool public saleIsActive = true;
    bool public saleIsPermanent = false;
    uint256 public maxRegisteredTypeId = 0;

    // Struct to hold sale information for each type
    struct SaleInfo {
        uint256 price;
        bool restricted;
    }

    // Mapping from type id to SaleInfo
    mapping(uint256 => SaleInfo) public saleInfo;

    constructor(address _monstrosUniverse, address _usdcToken) {
        monstrosUniverse = IMonstrosUniverse(_monstrosUniverse);
        usdcToken = IERC20(_usdcToken);
    }

    function toggleSaleState() external onlyOwner {
        require(!saleIsPermanent, "Sale has ended permanently");
        saleIsActive = !saleIsActive;
        emit SaleStateToggled(saleIsActive);
    }

    function endPermanentSale() external onlyOwner {
        require(saleIsActive, "Sale is already inactive");
        saleIsActive = false;
        saleIsPermanent = true;
        emit EndPermanentSale();
    }

    function setSaleInfo(
        uint256 typeId,
        uint256 price,
        bool restricted
    ) external onlyOwner {
        saleInfo[typeId] = SaleInfo(price, restricted);
        if(typeId > maxRegisteredTypeId) {
            maxRegisteredTypeId = typeId;
        }
        emit SaleInfoUpdated(typeId, price, restricted);
    }

    function buyNFT(uint256 typeId, uint256 qty) external {
        require(saleIsActive, "Sale must be active to mint NFTs");
        SaleInfo memory info = saleInfo[typeId];
        require(info.price > 0, "Invalid NFT type");
        require(info.restricted == false || _isHolder(msg.sender), "Restricted to holders only");
        require(usdcToken.balanceOf(msg.sender) >= info.price * qty, "Insufficient USDC balance");
        require(usdcToken.allowance(msg.sender, address(this)) >= info.price * qty, "Increase your USDC allowance");

        usdcToken.transferFrom(msg.sender, owner(), info.price * qty);
        monstrosUniverse.mintTransferFromWhitelisted(msg.sender, typeId, qty);
        emit NFTPurchased(msg.sender, typeId, qty);
    }

      function _isHolder(address buyer) internal view returns (bool) {
          uint256[] memory typeIds = new uint256[](maxRegisteredTypeId);
          address[] memory buyerAddresses = new address[](maxRegisteredTypeId);

          for (uint256 i = 0; i < maxRegisteredTypeId; i++) {
              typeIds[i] = i + 1;
              buyerAddresses[i] = buyer;
          }

          uint256[] memory balances = monstrosUniverse.balanceOfBatch(buyerAddresses, typeIds);

          for (uint256 i = 0; i < balances.length; i++) {
              if (balances[i] > 0) {
                  return true; // Buyer is a holder of at least one NFT type
              }
          }

          return false; // Buyer is not a holder of any of the NFT types
      }

    event SaleStateToggled(bool saleIsActive);
    event EndPermanentSale();
    event SaleInfoUpdated(uint256 indexed typeId, uint256 price, bool restricted);
    event NFTPurchased(address indexed buyer, uint256 indexed typeId, uint256 quantity);
}

