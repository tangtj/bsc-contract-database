
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return tx.origin;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/Presale.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract Presale is Ownable {
    event DepositEvent(address from, IERC20Metadata token, string symbol, uint amount);

    struct Deposit {
        address participant;
        IERC20Metadata token;
        string symbol;
        uint amount;
    }

    struct Config {
        address marketing;

        uint saleStart;
        uint saleEnd;
        uint minAmount;
        uint maxAmount;
    }

    uint public total;
    Config public config;

    address[] internal tokens;
    mapping(address => bool) internal allowedTokens;

    mapping(address => Deposit) internal participants;

    Deposit[] internal deposits;

    constructor() {
        transferOwnership(tx.origin);
    }

    function setConfig(Config memory _config) public onlyOwner {
        config = _config;
    }

    // Get tokens list
    function getTokens() external view returns (address[] memory) {
        return tokens;
    }

    // Get participants list
    function getParticipants() external view returns (address[] memory) {
        address[] memory list = new address[](deposits.length);

        for (uint i = 0; i < deposits.length; i++) {
            list[i] = deposits[i].participant;
        }

        return list;
    }

    // Get participant
    function getDepositByWallet(address wallet) external view returns (Deposit memory) {
        return participants[wallet];
    }

    // Get deposit by index
    function getDepositByIndex(uint index) external view returns (Deposit memory) {
        return deposits[index];
    }

    // Get all deposits
    function getDeposits() external view returns (Deposit[] memory) {
        return deposits;
    }

    // Deposit funds
    function deposit(IERC20Metadata token, uint256 amount) public {
        uint transferAmount = amount * (10 ** token.decimals());

        require(tx.origin == msg.sender, "Not allowed");
        require(participants[msg.sender].amount == 0, "No second chance");
        require(amount >= config.minAmount, "Min amount limit");
        require(amount <= config.maxAmount, "Max amount limit");
        require(block.timestamp >= config.saleStart, "Not started");
        require(block.timestamp <= config.saleEnd, "Ended");
        require(allowedTokens[address(token)] == true, "Unknown token");

        // Transfer tokens
        require(token.transferFrom(msg.sender, config.marketing, transferAmount), "Insufficient funds");

        string memory symbol = token.symbol();

        Deposit memory depositData = Deposit({
            participant: msg.sender,
            token: token,
            symbol: symbol,
            amount: amount
        });

        participants[msg.sender] = depositData;
        deposits.push(depositData);

        total += amount;

        emit DepositEvent(msg.sender, token, symbol, amount);
    }

    // Set Marketing account
    function setMarketing(address _marketing) public onlyOwner {
        config.marketing = _marketing;
    }

    // Set Min Amount
    function setMin(uint _minAmount) public onlyOwner {
        config.minAmount = _minAmount;
    }

    // Set Max Amount
    function setMax(uint _maxAmount) public onlyOwner {
        config.maxAmount = _maxAmount;
    }

    // Set Sale Start
    function setSaleStart(uint _saleStart) public onlyOwner {
        config.saleStart = _saleStart;
    }

    // Set Sale End
    function setSaleEnd(uint _saleEnd) public onlyOwner {
        config.saleEnd = _saleEnd;
    }

    // Add token to allowed
    function addToken(address token) public onlyOwner {
        tokens.push(address(token));
        allowedTokens[token] = true;
    }

    // Remove token from allowed
    function removeToken(address token) public onlyOwner {
        allowedTokens[token] = false;
    }

    // Set total value
    function setTotal(uint _total) public onlyOwner {
        total = _total;
    }

    // Withdraw funds
    function withdraw() public onlyOwner {
        uint balance = address(this).balance;

        require(balance > 0, "Balance is 0");

        payable(owner()).transfer(balance);
    }
}

