{"asset_staking.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\nimport \"./library.sol\";\n\n/**\n * Users can stake CAKE, BNB, BUSD, BTCB to earn free OURO. Assets deposited will be transferred to our yield farming contract, \n * which utilizes PancakeSwap and Venus. Yield from these pools will be transferred to the reserve pool when the user \n * claims it, and OURO of equivalent value will be minted thereafter to the user. Users can withdraw any \n * asset staked with no cost other than incurred BSC transaction fees. \n */\ncontract AssetStaking is Ownable, ReentrancyGuard, Pausable {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n    using Address for address payable;\n\n    \n    uint256 internal constant SHARE_MULTIPLIER = 1e18; // share multiplier to avert division underflow\n    \n    address public immutable assetContract; // the asset to stake\n    address public immutable vTokenAddress; // venus vToken Address\n    \n    address public constant ouroContract = 0x0a4FC79921f960A4264717FeFEE518E088173a79;\n    address public constant ogsContract = 0x416947e6Fc78F158fd9B775fA846B72d768879c2;\n    address public constant unitroller = 0xfD36E2c2a6789Db23113685031d7F16329158384;\n    address public constant ouroReserveAddress = 0x8739aBC0be4f271A5f4faC825BebA798Ee03f0CA;\n    address public constant xvsAddress = 0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63;\n\n    // pancake router\n    IPancakeRouter02 public constant router = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    uint256 constant internal MAX_UINT256 = uint256(-1);\n    \n    address[] venusMarkets; // venus market, set at constructor\n    mapping (address =\u003e uint256) private _balances; // tracking staker\u0027s value\n    uint256 private _totalStaked; // track total staked value\n    \n    /// @dev initial block reward set to 0\n    uint256 public BlockReward = 0;\n    \n    /// @dev shares of user\n    struct Shares{\n        uint256 ouroShare;\n        uint256 ogsShare;\n    }\n    \n    /// @dev round index mapping to accumulate share.\n    mapping (uint =\u003e Shares) private _accShares;\n    /// @dev mark staker\u0027s highest settled round.\n    mapping (address =\u003e uint) private _settledRounds;\n    /// @dev a monotonic increasing round index, STARTS FROM 1\n    uint256 private _currentRound = 1;\n    // @dev last rewarded block\n    uint256 private _lastRewardBlock = block.number;\n    \n    // 2 types of reward\n    // @dev ogs reward balance, settle but not claimed\n    mapping (address =\u003e uint256) internal _ogsRewardBalance;\n    // @dev ouro reward balance, settle but not claimed\n    mapping (address =\u003e uint256) internal _ouroRewardBalance;\n\n    /**\n     * ======================================================================================\n     * \n     * SYSTEM FUNCTIONS\n     *\n     * ======================================================================================\n     */\n    receive() external payable {}\n    \n    constructor(address assetContract_, address vTokenAddress_) public {\n        require(assetContract_ != address(0), \"constructor: assetContract_ is zero address\");        \n        if (assetContract_ == router.WETH()) {\n            isNativeToken = true;\n        }\n        \n        // set addresses\n        assetContract = assetContract_; \n        vTokenAddress = vTokenAddress_;\n        \n        venusMarkets.push(vTokenAddress_);\n        IVenusDistribution(unitroller).enterMarkets(venusMarkets);\n\n        if (!isNativeToken) {\n            // check underlying asset for non native token\n            require(assetContract_ == IVToken(vTokenAddress_).underlying(), \"underlying asset does not match assetContract\");\n\n            // approve asset to OURO reserve\n            IERC20(assetContract_).safeApprove(ouroReserveAddress, MAX_UINT256); \n\n            // approve asset to vToken\n            IERC20(assetContract_).safeApprove(vTokenAddress_, MAX_UINT256);\n        }\n        \n        // approve XVS to router\n        IERC20(xvsAddress).safeApprove(address(router), MAX_UINT256); \n    }\n    \n    /** \n     * @dev reset allowances\n     */\n    function resetAllowances() external onlyOwner {\n        if (!isNativeToken) {\n            // re-approve asset to OURO reserve\n            IERC20(assetContract).safeApprove(ouroReserveAddress, 0); \n            IERC20(assetContract).safeIncreaseAllowance(ouroReserveAddress, MAX_UINT256);\n            \n            // re-approve asset to vToken\n            IERC20(assetContract).safeApprove(vTokenAddress, 0);\n            IERC20(assetContract).safeIncreaseAllowance(vTokenAddress, MAX_UINT256);\n        }\n            \n        // re-approve XVS to router\n        IERC20(xvsAddress).safeApprove(address(router), 0); \n        IERC20(xvsAddress).safeApprove(address(router), MAX_UINT256);\n        \n        // log\n        emit AllowanceReset();\n    }\n        \n    /**\n     * @dev set block reward\n     */\n    function setBlockReward(uint256 reward) external onlyOwner {\n        // settle previous rewards\n        updateReward();\n        \n        // set new block reward\n        BlockReward = reward;\n        \n        // log\n        emit BlockRewardSet(reward);\n    }\n    \n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     **/\n    function pause() onlyOwner external { _pause(); }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() onlyOwner external { _unpause(); }\n\n    /**\n     * ======================================================================================\n     * \n     * STAKING FUNCTIONS\n     *\n     * ======================================================================================\n     */\n     \n    /**\n     * @dev deposit assets\n     */\n    function deposit(uint256 amount) external payable nonReentrant whenNotPaused {\n        // only from EOA\n        require(!msg.sender.isContract() \u0026\u0026 msg.sender == tx.origin);\n\n        if (isNativeToken) {\n            amount = msg.value;\n        }\n        require(amount \u003e 0, \"zero deposit\");\n        \n        // settle previous rewards\n        settleStaker(msg.sender);\n        \n        // modify balance\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\n        _totalStaked = _totalStaked.add(amount);\n        \n        // transfer asset from AssetContract\n        if (!isNativeToken) {\n            IERC20(assetContract).safeTransferFrom(msg.sender, address(this), amount);\n        }\n\n        // supply the asset to venus\n        _supply(amount);\n        \n        // log\n        emit Deposit(msg.sender, amount);\n    }\n    \n    /**\n     * @dev claim OGS rewards only\n     */\n    function claimOGSRewards() external nonReentrant whenNotPaused {\n        // settle previous rewards\n        settleStaker(msg.sender);\n        \n        // reward balance modification\n        uint amountReward = _ogsRewardBalance[msg.sender];\n        delete _ogsRewardBalance[msg.sender]; // zero reward balance\n        require(amountReward \u003e 0, \"0 reward\");\n\n        // mint OGS reward to sender\n        IOGSToken(ogsContract).mint(msg.sender, amountReward);\n        \n        // log\n        emit OGSClaimed(msg.sender, amountReward);\n    }\n    \n    /**\n     * @dev claim OURO rewards only\n     */\n    function claimOURORewards() external nonReentrant whenNotPaused {\n        // settle previous rewards\n        settleStaker(msg.sender);\n        \n        // reward balance modification\n        uint amountReward = _ouroRewardBalance[msg.sender];\n        delete _ouroRewardBalance[msg.sender]; // zero reward balance\n        require(amountReward \u003e 0, \"0 reward\");\n\n        // transfer OURO to sender\n        IERC20(ouroContract).safeTransfer(msg.sender, amountReward);\n        \n        // log\n        emit OUROClaimed(msg.sender, amountReward);\n    }\n\n    /**\n     * @dev withdraw assets\n     */\n    function withdraw(uint256 amount) external nonReentrant {\n        require(amount \u003e 0 \u0026\u0026 amount \u003c= _balances[msg.sender], \"balance exceeded\");\n\n        // settle previous rewards\n        settleStaker(msg.sender);\n\n        // modifiy\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n        _totalStaked = _totalStaked.sub(amount);\n        \n        // balance - before\n        uint256 numRedeemed;\n        if (isNativeToken) {\n            numRedeemed = address(this).balance;\n        } else {\n            numRedeemed = IERC20(assetContract).balanceOf(address(this));\n        }\n\n        // redeem supply from venus\n        // NOTE:\n        //  venus may return less than amount\n        _removeSupply(amount);\n\n        if (isNativeToken) {    \n            // balance - after\n            numRedeemed = address(this).balance.sub(numRedeemed);\n            // transfer assets back\n            msg.sender.sendValue(numRedeemed);\n        } else { // ERC20\n            numRedeemed = IERC20(assetContract).balanceOf(address(this)).sub(numRedeemed);\n            IERC20(assetContract).safeTransfer(msg.sender, numRedeemed);\n        }\n\n        // log\n        emit Withdraw(msg.sender, amount);\n    }\n\n    /**\n     * @dev settle a staker\n     */\n    function settleStaker(address account) internal {\n        // update reward snapshot\n        updateReward();\n        \n        // settle this account\n        uint accountCollateral = _balances[account];\n        uint lastSettledRound = _settledRounds[account];\n        uint newSettledRound = _currentRound - 1;\n        \n        // a) round ogs rewards\n        uint roundOGSReward = _accShares[newSettledRound].ogsShare.sub(_accShares[lastSettledRound].ogsShare)\n                                .mul(accountCollateral)\n                                .div(SHARE_MULTIPLIER);  // remember to div by SHARE_MULTIPLIER    \n        \n        // update ogs reward balance\n        _ogsRewardBalance[account] += roundOGSReward;\n\n        // b) round ouro rewards\n        uint roundOUROReward = _accShares[newSettledRound].ouroShare.sub(_accShares[lastSettledRound].ouroShare)\n                                .mul(accountCollateral)\n                                .div(SHARE_MULTIPLIER);  // remember to div by SHARE_MULTIPLIER            \n        \n        // update ouro reward balance\n        _ouroRewardBalance[account] += roundOUROReward;\n        \n        // mark this account has settled to newSettledRound\n        _settledRounds[account] = newSettledRound;\n    }\n     \n     /**\n     * @dev update accumulated block reward until current block\n     */\n    function updateReward() internal {\n        // skip round changing in the same block\n        if (_lastRewardBlock == block.number) {\n            return;\n        }\n    \n        // postpone rewarding if there is none staker\n        if (_totalStaked == 0) {\n            return;\n        }\n        \n        // ogs reward\n        _updateOGSReward();\n       \n        // ouro reward\n        _updateOuroReward();\n        \n        // next round setting                                 \n        _currentRound++;\n    }\n    \n    /**\n     * @dev update ouro reward for current stakers(snapshot)\n     * this function should be implemented as idempotent way\n     */\n    function _updateOuroReward() internal {\n        // step 0. record current asset balance(which users deposit)\n        uint256 assetBalance;\n        if (isNativeToken) {\n            assetBalance = address(this).balance;\n        } else {\n            assetBalance = IERC20(assetContract).balanceOf(address(this));\n        }\n        \n        // setp 1. settle venus XVS reward\n        uint256 xvsAmount = IERC20(xvsAddress).balanceOf(address(this));\n        IVenusDistribution(unitroller).claimVenus(address(this), venusMarkets);\n        xvsAmount = IERC20(xvsAddress).balanceOf(address(this)).sub(xvsAmount);\n\n        if (xvsAmount \u003e 0 ) { \n            // swap all XVS to staking asset\n            address[] memory path;\n            if (isNativeToken) { // XVS -\u003e WBNB\n                path = new address[](2);\n                path[0] = xvsAddress;\n                path[1] = assetContract;\n            } else { // XVS-\u003e WBNB -\u003e asset\n                path = new address[](3);\n                path[0] = xvsAddress;\n                path[1] = router.WETH(); // use WBNB to bridge\n                path[2] = assetContract;\n            }\n            if (isNativeToken) {\n                router.swapExactTokensForETH(\n                    xvsAmount, \n                    0, \n                    path, \n                    address(this), \n                    block.timestamp.add(600)\n                );\n            } else {\n                router.swapExactTokensForTokens(\n                    xvsAmount, \n                    0, \n                    path, \n                    address(this), \n                    block.timestamp.add(600)\n                );\n            }\n        }\n\n        // step 2.check if farming has assets revenue        \n        uint256 underlyingBalance = IVToken(vTokenAddress).balanceOfUnderlying(address(this));\n        if (underlyingBalance \u003e _totalStaked) { \n            // the diff is the assets revenue\n            uint256 asssetsRevenue = underlyingBalance.sub(_totalStaked);\n            // proceed redeeming\n            // NOTE: \n            //  just use redeemUnderlying w/o return value check,\n            //  even if venus has insufficent liquidity, this process cannot be stopped.\n            if (asssetsRevenue \u003e 0) {\n                IVToken(vTokenAddress).redeemUnderlying(asssetsRevenue);\n            }\n        }\n        \n        // step 3. exchange above 2 types of revenue to OURO\n        uint256 currentOUROBalance = IERC20(ouroContract).balanceOf(address(this));\n        uint256 currentAsset;\n        if (isNativeToken) {\n            currentAsset = address(this).balance;\n        } else {\n            currentAsset = IERC20(assetContract).balanceOf(address(this));\n        }\n        \n        // === THE DIFF IS THE FARMING REVENUE TO SWAP TO OURO ===\n        if (currentAsset \u003e assetBalance) {\n            uint256 diff = currentAsset.sub(assetBalance);\n            if (isNativeToken) {\n                IOUROReserve(ouroReserveAddress).deposit{value:diff}(assetContract, 0, 0);\n            } else {\n                IOUROReserve(ouroReserveAddress).deposit(assetContract, diff, 0);\n            }\n        }\n        // === END THE DIFF IS THE FARMING REVENUE TO SWAP TO OURO ===\n        \n        // step 4. compute diff for new ouro and set share based on current stakers pro-rata\n        uint256 newMintedOuro = IERC20(ouroContract).balanceOf(address(this))\n                                            .sub(currentOUROBalance);\n                \n        uint roundShareOURO = newMintedOuro.mul(SHARE_MULTIPLIER) // avert underflow\n                                            .div(_totalStaked);\n                                        \n        _accShares[_currentRound].ouroShare = roundShareOURO.add(_accShares[_currentRound-1].ouroShare); \n    }\n    \n    /**\n     * @dev update OGS token reward for current stakers(snapshot)\n     * this function should be implemented as idempotent way\n     */\n    function _updateOGSReward() internal {\n        // settle reward share for (_lastRewardBlock, block.number]\n        uint blocksToReward = block.number.sub(_lastRewardBlock);\n        uint mintedReward = BlockReward.mul(blocksToReward);\n\n        // reward share\n        uint roundShareOGS = mintedReward.mul(SHARE_MULTIPLIER)\n                                        .div(_totalStaked);\n                                        \n        // mark block rewarded;\n        _lastRewardBlock = block.number;\n            \n        // accumulate reward shares\n        _accShares[_currentRound].ogsShare = roundShareOGS.add(_accShares[_currentRound-1].ogsShare); \n    }\n    \n    /**\n     * ======================================================================================\n     * \n     * VIEW FUNCTIONS\n     *\n     * ======================================================================================\n     */\n\n    /**\n     * @dev return value staked for an account\n     */\n    function numStaked(address account) external view returns (uint256) { return _balances[account]; }\n\n    /**\n     * @dev return total staked value\n     */\n    function totalStaked() external view returns (uint256) { return _totalStaked; }\n    \n    /**\n     * @notice sum unclaimed OURO reward;\n     */\n    function checkOUROReward(address account) external view returns(uint256 rewards) { return _ouroRewardBalance[account]; }\n    \n    /**\n     * @notice sum unclaimed OGS reward;\n     */\n    function checkOGSReward(address account) external view returns(uint256 rewards) {\n        uint accountCollateral = _balances[account];\n        uint lastSettledRound = _settledRounds[account];\n        \n        // reward = settled rewards + unsettled rewards + newMined rewards\n        uint unsettledShare = _accShares[_currentRound-1].ogsShare.sub(_accShares[lastSettledRound].ogsShare);\n        \n        uint newMinedShare;\n        if (_totalStaked \u003e 0) {\n            uint blocksToReward = block.number\n                                            .sub(_lastRewardBlock);\n                                            \n            uint mintedReward = BlockReward\n                                            .mul(blocksToReward);\n    \n            // reward share\n            newMinedShare = mintedReward\n                                            .mul(SHARE_MULTIPLIER)\n                                            .div(_totalStaked);\n        }\n        \n        return _ogsRewardBalance[account] + (unsettledShare + newMinedShare).mul(accountCollateral)\n                                            .div(SHARE_MULTIPLIER);  // remember to div by SHARE_MULTIPLIER;\n    }\n    \n    /**\n     * ======================================================================================\n     * \n     * @dev Venus farming\n     * https://github.com/VenusProtocol/venus-config/blob/master/networks/testnet.json\n     * https://github.com/VenusProtocol/venus-config/blob/master/networks/mainnet.json\n     *\n     * ======================================================================================\n     */\n    bool public isNativeToken;\n    \n    /**\n     * @dev supply assets to venus and get vToken\n     */\n    function _supply(uint256 amount) internal {\n        if (isNativeToken) {\n            IVBNB(vTokenAddress).mint{value: amount}();\n        } else {\n            IVToken(vTokenAddress).mint(amount);\n        }\n    }\n    \n    /**\n     * @dev remove supply by redeeming vToken\n     */\n    function _removeSupply(uint256 amount) internal {\n        require(IVToken(vTokenAddress).redeemUnderlying(amount) == 0, \"cannot redeem from venus\");\n    }\n    \n    /**\n     * ======================================================================================\n     * \n     * STAKING EVENTS\n     *\n     * ======================================================================================\n     */\n     event Deposit(address account, uint256 amount);\n     event Withdraw(address account, uint256 amount);\n     event OUROClaimed(address account, uint256 amount);\n     event OGSClaimed(address account, uint256 amount);\n     event BlockRewardSet(uint256 reward);\n     event AllowanceReset();\n}\n\ncontract AssetStakingTest is AssetStaking {\n      constructor(address assetContract_, address vTokenAddress_) \n      AssetStaking(assetContract_, vTokenAddress_)\n      public {\n      }\n      \n      function updateOGSReward() public {\n          _updateOGSReward();   \n      }\n    \n        function updateOuroReward() public {\n          _updateOuroReward();   \n      }\n      \n}"},"library.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\nlibrary Strings {\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI\u0027s implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = byte(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n}\n\ninterface AggregatorV3Interface {\n\n  function decimals() external view returns (uint8);\n  function description() external view returns (string memory);\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function _onlyOwner() view private {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _onlyOwner();\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address =\u003e uint256) private _balances;\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        require((allowance(_msgSender(), spender) == 0) || (amount == 0), \"ERC20: change allowance use increaseAllowance or decreaseAllowance instead\");\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\ninterface IPancakeFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes(\u0027approve(address,uint256)\u0027)));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: APPROVE_FAILED\u0027);\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes(\u0027transfer(address,uint256)\u0027)));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: TRANSFER_FAILED\u0027);\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes(\u0027transferFrom(address,address,uint256)\u0027)));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: TRANSFER_FROM_FAILED\u0027);\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, \u0027TransferHelper: ETH_TRANSFER_FAILED\u0027);\n    }\n}\n\ninterface IPancakeRouter01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IPancakeRouter02 is IPancakeRouter01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n\n\ninterface IOGSToken is IERC20 {\n    function mint(address account, uint256 amount) external;\n    function burn(uint256 amount) external;\n    function setMintable(address account, bool allow) external;\n}\n\ninterface IOUROToken is IERC20 {\n    function mint(address account, uint256 amount) external;\n    function burn(uint256 amount) external;\n    function setMintable(address account, bool allow) external;\n}\n\ninterface IOUROReserve {\n    function getPrice() external view returns(uint256);\n    function getAssetBalance(address token) external view returns(uint256);\n    function getAssetPrice(AggregatorV3Interface feed) external view returns(uint256);\n\n    function getCollateral(address token) external view returns (\n        address vTokenAddress,\n        uint256 assetUnit, // usually 1e18\n        uint256 lastPrice, // record latest collateral price\n        AggregatorV3Interface priceFeed // asset price feed for xxx/USDT\n    );\n\n    function getOuroIn(uint256 amount, address token) external view returns(uint256);\n    function getAssetsIn(uint256 amountOURO, address token) external view returns(uint256);\n    \n    function deposit(address token, uint256 amountAsset, uint256 minAmountOuro) external payable returns (uint256 OUROMinted);\n    function withdraw(address token, uint256 amountAsset, uint256 maxAmountOuro) external returns(uint256 OUROTaken);\n}\n\ninterface IOURODist {\n    function isDist() external view returns (bool);\n    function revenueArrival(address token, uint256 assetAmount) external;\n    function resetAllowance(address token) external;\n}\n\ninterface IVenusDistribution {\n    function oracle() external view returns (address);\n\n    function enterMarkets(address[] memory _vtokens) external;\n    function exitMarket(address _vtoken) external;\n    function getAssetsIn(address account) external view returns (address[] memory);\n\n    function markets(address vTokenAddress) external view returns (bool, uint, bool);\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\n\n    function claimVenus(address holder, address[] memory vTokens) external;\n    function venusSpeeds(address) external view returns (uint);\n}\n\ninterface IWBNB is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n}\n\ninterface IVBNB {\n    function totalSupply() external view returns (uint);\n\n    function mint() external payable;\n    function redeem(uint redeemTokens) external returns (uint);\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n    function borrow(uint borrowAmount) external returns (uint);\n    function repayBorrow() external payable;\n\n    function balanceOfUnderlying(address owner) external returns (uint);\n    function borrowBalanceCurrent(address account) external returns (uint);\n    function totalBorrowsCurrent() external returns (uint);\n\n    function exchangeRateCurrent() external returns (uint);\n    function exchangeRateStored() external view returns (uint);\n\n    function supplyRatePerBlock() external view returns (uint);\n    function borrowRatePerBlock() external view returns (uint);\n}\n\ninterface IVToken is IERC20 {\n    function underlying() external returns (address);\n\n    function mint(uint mintAmount) external returns (uint);\n    function redeem(uint redeemTokens) external returns (uint);\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n    function borrow(uint borrowAmount) external returns (uint);\n    function repayBorrow(uint repayAmount) external returns (uint);\n\n    function balanceOfUnderlying(address owner) external returns (uint);\n    function borrowBalanceCurrent(address account) external returns (uint);\n    function totalBorrowsCurrent() external returns (uint);\n\n    function exchangeRateCurrent() external returns (uint);\n    function exchangeRateStored() external view returns (uint);\n\n    function supplyRatePerBlock() external view returns (uint);\n    function borrowRatePerBlock() external view returns (uint);\n}\n\nabstract contract ReentrancyGuard {\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () public {\n        _status = _NOT_ENTERED;\n    }\n    \n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() public {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}"}}