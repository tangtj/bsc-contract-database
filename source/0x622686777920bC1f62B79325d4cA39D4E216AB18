{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.6;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.6;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./Context.sol\";\r\n\r\ncontract ERC20 is IERC20, Context {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address =\u003e uint256) internal _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) internal _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    string public name;\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    string public symbol;\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    uint8  public decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {_name} and {_symbol}, {_decimals}\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory _name, string memory _symbol, uint8 _decimals) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() external view override returns(uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address _owner) external view override returns (uint256) {\r\n        return _balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `_amount`.\r\n     */\r\n    function transfer(address _to, uint256 _amount) external override returns (bool) {\r\n        _transfer(_msgSender(), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address _owner, address _spender) external view override returns (uint256) {\r\n        return _allowances[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_spender` cannot be the zero address.\r\n     */\r\n    function approve(address _spender, uint256 _amount) external override returns (bool) {\r\n        _approve(_msgSender(), _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_from` and `_to` cannot be the zero address.\r\n     * - `_from` must have a balance of at least `_amount`.\r\n     * - the caller must have allowance for `_from`\u0027s tokens of at least\r\n     * `_amount`.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _amount) external override returns (bool) {\r\n        require(_from != address(0) \u0026\u0026 _to != address(0));\r\n\r\n        _approve(_from, _msgSender(), _allowances[_from][_msgSender()].sub(_amount));\r\n        _transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `_spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address _spender, uint256 _addVal) external returns (bool) {\r\n        require(_spender != address(0), \"approve to 0\");\r\n\r\n        _approve(_msgSender(), _spender, _allowances[_msgSender()][_spender].add(_addVal));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `_spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_spender` cannot be the zero address.\r\n     * - `_spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address _spender, uint256 _subVal) external returns (bool) {\r\n        require(_spender != address(0), \"approve to 0\");\r\n\r\n        _approve(_msgSender(), _spender, _allowances[_msgSender()][_spender].sub(_subVal));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `_amount` from `_from` to `_to`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_from` cannot be the zero address.\r\n     * - `_to` cannot be the zero address.\r\n     * - `_from` must have a balance of at least `_amount`.\r\n     */\r\n    function _transfer(address _from, address _to, uint256 _amount) internal {\r\n        require(_from != address(0), \"transfer from 0\");\r\n        require(_to != address(0), \"transfer to 0\");\r\n\r\n        _balances[_from] = _balances[_from].sub(_amount);\r\n        _balances[_to] = _balances[_to].add(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `_spender` over the `_owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_owner` cannot be the zero address.\r\n     * - `_spender` cannot be the zero address.\r\n     */\r\n    function _approve(address _owner, address _spender, uint256 _amount) internal {\r\n        require(_owner != address(0), \"approve from 0\");\r\n        require(_spender != address(0), \"approve to 0\");\r\n\r\n        _allowances[_owner][_spender] = _amount;\r\n        emit Approval(_owner, _spender, _amount);\r\n    }\r\n\r\n    /** @dev Creates `_amount` tokens and assigns them to `_to`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address _to, uint256 _amount) internal {\r\n        require(_to != address(0), \"mint to 0\");\r\n\r\n        _totalSupply = _totalSupply.add(_amount);\r\n        _balances[_to] = _balances[_to].add(_amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `_amount` tokens from `_from`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_from` cannot be the zero address.\r\n     * - `_from` must have at least `_amount` tokens.\r\n     */\r\n    function _burn(address _from, uint256 _amount) internal {\r\n        require(_from != address(0), \"burn from 0\");\r\n\r\n        _balances[_from] = _balances[_from].sub(_amount);\r\n        _totalSupply = _totalSupply.sub(_amount);\r\n        emit Transfer(_from, address(0), _amount);\r\n    }\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.6;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n"},"MAFIAFOOTToken.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.6;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./ERC20.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\ncontract MAFIAFOOTToken is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * The time interval from each \u0027mint\u0027 to the \u0027MFF mining pool\u0027 is not less than 365 days\r\n     */\r\n    uint256 public constant  MINT_INTERVAL = 365 days;\r\n\r\n    /**\r\n     * All of the minted \u0027MFF\u0027 will be moved to the mainPool.\r\n     */\r\n    address public mainPool;\r\n\r\n    /**\r\n     * The unixtimestamp for the last mint.\r\n     */\r\n    uint256 public lastestMinting;\r\n\r\n    /**\r\n     * All of the minted \u0027MFF\u0027 burned in the corresponding mining pool if the released amount is not used up in the current year \r\n     * \r\n     */\r\n    uint256[6] public maxMintOfYears;\r\n\r\n    /**\r\n     * The number of times \u0027mint\u0027 has been executed\r\n     */\r\n    uint256 public yearMint = 0;\r\n\r\n    constructor() public \r\n        ERC20(\"Mafiafoot\", \"MFF\", 18) \r\n    {\r\n        uint256 decimal = 10 ** uint256(decimals);\r\n        /**\r\n        * There will distribute 50,000,000 MFF in year 1\r\n        *                       20,000,000 MFF in year 2\r\n        *                       10,000,000 MFF in year 3\r\n        *                       5,000,000 MFF in year 4\r\n        *                       5,000,000  MFF in year 5\r\n        *  In the future, up to 5,000,000 MFF can be released each year\r\n        */\r\n        maxMintOfYears[0] = 50000000 * decimal;\r\n        maxMintOfYears[1] = 20000000 * decimal;\r\n        maxMintOfYears[2] = 10000000 * decimal;\r\n        maxMintOfYears[3] = 5000000 * decimal;\r\n        maxMintOfYears[4] = 5000000 * decimal;\r\n        maxMintOfYears[5] = 5000000 * decimal;\r\n    }\r\n\r\n    /**\r\n     * The unixtimestamp of \u0027mint\u0027 can be executed next time\r\n     */\r\n    function nextMinting() public view returns(uint256) {\r\n        return lastestMinting + MINT_INTERVAL;\r\n    }\r\n\r\n    /** \r\n     * Set the target mining pool contract for minting\r\n     */\r\n    function setMainPool(address pool_) external onlyOwner {\r\n        require(pool_ != address(0));\r\n        mainPool = pool_;\r\n    }\r\n\r\n    /**\r\n     * Distribute MFF to the main mining pool according to the MFF limit that can be released every year\r\n     */\r\n    function mint(address dest_) external {\r\n        require(msg.sender == mainPool, \"invalid minter\");\r\n        require(lastestMinting.add(MINT_INTERVAL) \u003c block.timestamp, \"minting not allowed yet\");\r\n\r\n        uint256 amountThisYear = yearMint \u003c 5 ? maxMintOfYears[yearMint] : maxMintOfYears[5];\r\n        yearMint += 1;\r\n        lastestMinting = block.timestamp;\r\n\r\n        _mint(dest_, amountThisYear); \r\n    }\r\n\r\n    function burn(uint256 amount_) external { \r\n        _burn(msg.sender, amount_);\r\n    }\r\n\r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.6;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_msgSender() == _owner, \"not owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public {\r\n        require(newOwner != address(0), \"newOwner invalid\");\r\n        if (_owner != address(0)) {\r\n            require(_msgSender() == _owner, \"not owner\");\r\n        }\r\n        \r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.6;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003e 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary SafeMathExt {\r\n    function add128(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        uint128 c = a + b;\r\n        require(c \u003e= a, \"uint128: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub128(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        require(b \u003c= a, \"uint128: subtraction overflow\");\r\n        uint128 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        uint64 c = a + b;\r\n        require(c \u003e= a, \"uint64: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        require(b \u003c= a, \"uint64: subtraction overflow\");\r\n        uint64 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function safe128(uint256 a) internal pure returns(uint128) {\r\n        require(a \u003c 0x0100000000000000000000000000000000, \"uint128: number overflow\");\r\n        return uint128(a);\r\n    }\r\n\r\n    function safe64(uint256 a) internal pure returns(uint64) {\r\n        require(a \u003c 0x010000000000000000, \"uint64: number overflow\");\r\n        return uint64(a);\r\n    }\r\n\r\n    function safe32(uint256 a) internal pure returns(uint32) {\r\n        require(a \u003c 0x0100000000, \"uint32: number overflow\");\r\n        return uint32(a);\r\n    }\r\n\r\n    function safe16(uint256 a) internal pure returns(uint16) {\r\n        require(a \u003c 0x010000, \"uint32: number overflow\");\r\n        return uint16(a);\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a \u003e= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a \u003c b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n"}}