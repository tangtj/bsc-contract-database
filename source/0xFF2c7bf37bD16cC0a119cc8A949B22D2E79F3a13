
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/TokenOwnershipRegister.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;


import "@openzeppelin/contracts/access/Ownable.sol";

contract TokenOwnershipRegister is Ownable {
    mapping(address => bool) deployedCollections;
    mapping(address => mapping(address => uint256)) public userToCollectionToBalance;
    mapping(address => mapping(address => uint256[])) public userToCollectionToTokens;
    address factoryAddress;

    modifier onlyFactory() {
        require(msg.sender == factoryAddress, "Factory only");
        _;
    }

    modifier onlyRegisteredCollections(address sender) {
        require(deployedCollections[sender], "Registered collections only");
        _;
    }

    function setFactoryAddress(address _factoryAddress) external onlyOwner {
        factoryAddress = _factoryAddress;
    }


    function registerCollection(address _newCollection) external onlyFactory {
        deployedCollections[_newCollection] = true;
    }

    function recordMint(address _collection, address _owner, uint _tokenId) external onlyRegisteredCollections(_collection) {
        userToCollectionToBalance[_owner][_collection]+= 1;
        userToCollectionToTokens[_owner][_collection].push(_tokenId);
    }

    function recordTransfer(address _collection, address _from, address _to, uint _tokenId) external onlyRegisteredCollections(_collection) {
        uint[] storage tokens = userToCollectionToTokens[_from][_collection];
        uint balance = userToCollectionToBalance[_from][_collection];
        for(uint i = 0; i < balance; i++) {
            if(tokens[i] == _tokenId) {
                uint lastIndex = balance - 1;
                uint lastIndexValue = tokens[lastIndex];
                tokens[i] = lastIndexValue;
                // tokens.pop();
                delete tokens[lastIndex];
            }
        }
        userToCollectionToTokens[_to][_collection].push(_tokenId);
        userToCollectionToBalance[_from][_collection]-= 1;
        userToCollectionToBalance[_to][_collection]+= 1;

    }
}
