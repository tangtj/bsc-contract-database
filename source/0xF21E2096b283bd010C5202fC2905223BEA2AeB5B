// SPDX-License-Identifier: MIT
pragma solidity =0.8.0;


interface IERC20 {
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    event Transfer(address indexed from, address indexed to, uint256 value);

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}



library TransferHelper {
    function safeApprove(
        address token,
        address to,
        uint256 value
    ) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool success, bytes memory data) = token.call(
            abi.encodeWithSelector(0x095ea7b3, to, value)
        );
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            "TransferHelper: APPROVE_FAILED"
        );
    }

    function safeTransfer(
        address token,
        address to,
        uint256 value
    ) internal {
        // bytes4(keccak256(bytes('transfer(address,uint256)')));
        (bool success, bytes memory data) = token.call(
            abi.encodeWithSelector(0xa9059cbb, to, value)
        );
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            "TransferHelper: TRANSFER_FAILED"
        );
    }

    function safeTransferFrom(
        address token,
        address from,
        address to,
        uint256 value
    ) internal {
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool success, bytes memory data) = token.call(
            abi.encodeWithSelector(0x23b872dd, from, to, value)
        );
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            "TransferHelper: TRANSFER_FROM_FAILED"
        );
    }

    function safeTransferETH(address to, uint256 value) internal {
        (bool success, ) = to.call{value: value}(new bytes(0));
        require(success, "TransferHelper: ETH_TRANSFER_FAILED");
    }
}

interface MainLogic{
    function golden_card() external returns(address);
    function silver_card() external returns(address);
    function total_sold_amount(address) external returns(uint);
}

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


pragma solidity ^0.8.0;

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(
        address indexed from,
        address indexed to,
        uint256 indexed tokenId
    );

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(
        address indexed owner,
        address indexed approved,
        uint256 indexed tokenId
    );

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(
        address indexed owner,
        address indexed operator,
        bool approved
    );

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId)
        external
        view
        returns (address operator);

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator)
        external
        view
        returns (bool);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}

/**
 * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Enumerable is IERC721 {
    /**
     * @dev Returns the total amount of tokens stored by the contract.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index)
        external
        view
        returns (uint256 tokenId);

    /**
     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
     * Use along with {totalSupply} to enumerate all tokens.
     */
    function tokenByIndex(uint256 index) external view returns (uint256);
}

contract CyberBlindBox is Ownable {
    uint public  _blindBoxIds;
    uint public total_reward_amount; 
    address public cbkToken=0x0cE574848f5E7C87a066aC2a52FD56DaCBC335F9;
    address public blackHoleAddress=0x000000000000000000000000000000000000dEaD;

    address public platform = 0xfb88339bDB113f4d55a4B55D0FA1f89dC96E6259;
    address public developer = 0x2B690d4e96aa61B095F839bac14D4097017aC395;


    address public main_logic_addr=0x01717bA7439834DdDf9a861143d4BF077479C511;

    uint public boxPrice = 10 * 10**18;

    uint public max_can_claim_golden=6;
    uint public max_can_claim_sliver=1;


    mapping (uint=>uint) public cliamed_gloden_amount;
    mapping (uint=>uint) public cliamed_silver_amount;

    mapping(address => uint) public  bought_times;
    mapping(address => RewardDetail[]) public reward_history;
    mapping(address => uint256) public reward_history_len;

    address public golden_card;
    address public silver_card;
    event OpenBlindBox(address indexed from, uint value);

    struct RewardDetail {
        uint256 time;
        uint256 amount;
    }


    constructor(){
        golden_card=MainLogic(main_logic_addr).golden_card();
        silver_card=MainLogic(main_logic_addr).silver_card();
    }



    function local_check_claim(address sender, address nft_card,uint nft_id) public view returns (uint amount){
        
        if(!(nft_card==silver_card || nft_card==golden_card))
        {
            return 0;
        }
        if (IERC721Enumerable(nft_card).totalSupply() <nft_id)
        {
            return 0;
        }
        if(nft_card==silver_card){
            if ( nft_id <=4886)
            {
                return 0;
            }
        }
        if(nft_card==golden_card){
            if (nft_id <=114)
            {
                return 0;
            }

        }
        address buyer=IERC721(nft_card).ownerOf(nft_id);
        if(buyer!=sender){
            return 0;
        }
        

        if(nft_card==silver_card){
            if (cliamed_silver_amount[nft_id] >=max_can_claim_sliver)
            {
                return 0;
            }
            else 
            {
                return max_can_claim_sliver-cliamed_silver_amount[nft_id] ;
            }
        } 

        if(nft_card==golden_card){
            if (cliamed_gloden_amount[nft_id] >=max_can_claim_golden)
            {
                return 0;
            }
            else 
            {
                return max_can_claim_golden-cliamed_gloden_amount[nft_id] ;
            }
        } 
        
    }
    function claimBlindBox(address nft_card,uint nft_id) public  {
        require(local_check_claim(msg.sender, nft_card, nft_id)>0,"can calim any more");
        uint256 reward = _getRandomReward();
        require(reward > 0 && reward <=99*10**18,"Insufficient random reward");    
        require(IERC20(cbkToken).balanceOf(address(this)) >= reward,"contract do not have enough coin balance");

        
        if(nft_card==silver_card){
            cliamed_silver_amount[nft_id]+=1;
        }
        if(nft_card==golden_card){
            cliamed_gloden_amount[nft_id]+=1;

        }
        _blindBoxIds+=1;

        if (reward > 0) {
            TransferHelper.safeTransfer(cbkToken,msg.sender, reward);
        }
        total_reward_amount+=reward;
        
        add_reward_history(msg.sender,reward);

    }



    function add_reward_history(
        address addr,
        uint256 amount
    ) internal {
        reward_history[addr].push(
            RewardDetail(block.timestamp, amount)
        );
        reward_history_len[addr] += 1;

    }

    //return Array of structure
    function get_reward_history(address addr)
        public
        view
        returns (RewardDetail[] memory)
    {
        uint256 count = reward_history_len[addr];
        RewardDetail[] memory trrips = new RewardDetail[](count);
        for (uint256 i = 0; i < count; i++) {
            RewardDetail storage history = reward_history[addr][i];
            trrips[i] = history;
        }
        return trrips;
    }

    function buyBlindBox() public  {
        require(IERC20(cbkToken).balanceOf(msg.sender) >= boxPrice , "Insufficient CBK balance");
        uint256 reward = _getRandomReward();
        require(reward > 0 && reward <=99*10**18,"Insufficient random reward");
        TransferHelper.safeTransferFrom(
        cbkToken,
        msg.sender,
        address(this),
        boxPrice
        );
        require(IERC20(cbkToken).balanceOf(address(this)) >= reward,"contract do not have enough coin balance");

        TransferHelper.safeTransfer(cbkToken, blackHoleAddress, boxPrice*30/100); // 30% to black hole
        TransferHelper.safeTransfer(cbkToken, platform, boxPrice*10/100); // 10% to platform
        TransferHelper.safeTransfer(cbkToken, developer, boxPrice*10/100); // 10% to developer
        if (reward > 0) {
            TransferHelper.safeTransfer(cbkToken,msg.sender, reward);
        }

        _blindBoxIds+=1;
        total_reward_amount+=reward;
        add_reward_history(msg.sender,reward);
    }

    function _getRandomReward() internal view returns (uint256) {
        uint256 random = uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, _blindBoxIds)));
        uint256 range = random % 10000;
        if (range < 6000) {
            return (random % 9 + 1) * 10**18; // 1 to 9 CBK
        } else if (range < 9875) {
            return ((random % 11) + 10) * 10**18; // 10 to 20 CBK
        } else {
            return ((random % 79) + 21) * 10**18; // 21 to 99 CBK
        }
    }

    // function withdraw(address token, uint256 amount) public onlyOwner {
    //     if (token != address(0)) {
    //         TransferHelper.safeTransfer(token, msg.sender, amount);
    //     } else {
    //         payable(msg.sender).transfer(amount);
    //     }
    // }

    // function set_platform(address value) public onlyOwner{
    //     platform=value;
  
    // }
    // function set_developer(address value) public onlyOwner{
    //     developer=value;
    // }

    // function set_price(uint value) public onlyOwner{
    //     boxPrice=value;
    // } 

    // function set_blackhole(address value) public onlyOwner{
    //     require(value==0x000000000000000000000000000000000000dEaD);
    //     blackHoleAddress=value;
    // } 
}