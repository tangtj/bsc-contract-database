
// File: contracts/token/TeamFeeSplitter.sol
// SPDX-License-Identifier: MIT

pragma solidity 0.8.16;

contract TeamFeeSplitter {
    address immutable POOP_FINANCE_TEAM;
    address immutable BABY_SWAP_TEAM;
    address immutable INCENTIVE_VAULT;
    address immutable CONTRIBUTORS;

    constructor(address payable poopFinanceTeam, address payable babySwapTeam, address payable incentiveVault, address contributors) {
        POOP_FINANCE_TEAM = poopFinanceTeam;
        BABY_SWAP_TEAM = babySwapTeam;
        INCENTIVE_VAULT = incentiveVault;
        CONTRIBUTORS = contributors;
    }
    
    function splitFees() public {
        uint256 balance = address(this).balance;
        uint incentiveVaultAmount = balance * 454 / 1000;
        if (incentiveVaultAmount > 0) {
            sendSplit(INCENTIVE_VAULT, incentiveVaultAmount);
        }
        uint contributorValue = balance * 90 / 1000;
        if (contributorValue > 0) {
            sendSplit(CONTRIBUTORS, contributorValue);
        }
        uint babyTeamAmount = balance * 90 / 1000;
        if (babyTeamAmount > 0) {
            sendSplit(BABY_SWAP_TEAM, babyTeamAmount);
        }
        uint poopFinanceTeam = balance - babyTeamAmount - contributorValue - incentiveVaultAmount;
        if (poopFinanceTeam > 0) {
            sendSplit(POOP_FINANCE_TEAM, poopFinanceTeam);
        }
    }

    function sendSplit(address _address, uint256 amount) private {
        (bool success, ) = _address.call{value: amount}("");
        require(success, "ETH Transfer failed");
    }

    function deposit() public payable {}

    receive() external payable {}

    fallback() external payable {}

}

