
// File: contracts/SocietyTaxToken.sol
// SPDX-License-Identifier: Unlicensed
pragma solidity 0.8.19;
import {Ownable, Context} from "./Ownable.sol";
import {IERC20} from "./IERC20.sol";
import {SafeMath} from "./SafeMath.sol";
import {Address} from "./Address.sol";
import {InfoTokenSociety} from "./InfoTokenSociety.sol";
import {Social} from "./Social.sol";
import {IPancakePair} from "./IPancakePair.sol";

interface AntiBotInterface {
    function safeTransfer(address from, address to, uint256 amount) external;
}

contract SocietyTaxToken is Context, IERC20, Ownable{
    using SafeMath for uint256;
    using Address for address;

    string private _name;
    string private _symbol;
    uint8 private _decimals = 18;
    address payable public teamWalletAddress;
    address public immutable deadAddress = address(0);
    mapping (address => uint256) _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => bool) public noF;
    string public site;
    string public telegram;
    string public twitter;
    uint256 public _totalTaxIfBuying = 0;
    uint256 public _totalTaxIfSelling = 0;
    uint256 private _totalSupply;
    uint256 public maxAllowedTax;
    uint256 public partnerTax = 20;
    uint256 private platformSellingTax;
    address private platformWallet;
    bool public partnersSellTax;
    bool public partnersBuyTax;
    address[] public partners;
    address antibotManager;

    constructor (
        InfoTokenSociety memory infoToken,
        address router,
        address platform,
        address creator,
        uint256 burnQuantity,
        uint256 _maxAllowTax,
        uint256 _partnerTax,
        Social memory social,
        address[] memory _partners,
        uint256 _sellingPlataformTax
    )  {
        platformSellingTax = _sellingPlataformTax;
        partnersBuyTax = infoToken.buyTax;
        partnersSellTax = infoToken.sellTax;
        antibotManager = infoToken.antibotManager;
        site = social.site;
        telegram = social.telegram;
        twitter = social.twitter;
        maxAllowedTax = _maxAllowTax;
        partnerTax = _partnerTax;
        _name = infoToken.name;
        _symbol = infoToken.symbol;
        _totalSupply = infoToken.totalSupply  * 10 ** _decimals;
        _allowances[address(this)][router] = _totalSupply;
        noF[creator] = true;
        noF[platform] = true;
        noF[address(this)] = true;
        noF[_msgSender()] = true;
        uint256 _totalTax = 0;
        partners.push(creator);
        _totalTax = _totalTax.add(_partnerTax);
        for(uint i = 0; i < _partners.length; i++){
            _totalTax = _totalTax.add(_partnerTax);
            noF[_partners[i]];
            partners.push(_partners[i]);
        }
        require(_totalTax <= maxAllowedTax, "tax too expensive");
        _totalTaxIfBuying = _totalTax;
        _totalTaxIfSelling = _totalTax.add(platformSellingTax);
        platformWallet = platform;
        noF[platform];
        _balances[creator] = _totalSupply;
        emit Transfer(address(0), creator, _totalSupply);
        if(burnQuantity > 0){
            _burn(creator, burnQuantity * 10 ** _decimals);
        }
    }
    function isMarketPair(address _pair) public view returns(bool){
        if(!_pair.isContract()) return false;
        try IPancakePair(_pair).token0() returns (address){
            return true;
        } catch {
            return false;
        }
    }
    function partnersList() external view returns(address[] memory){
        return partners;
    }
    function name() public view returns (string memory) {
        return _name;
    }
    function symbol() public view returns (string memory) {
        return _symbol;
    }
    function decimals() public view returns (uint8) {
        return _decimals;
    }
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }
    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }
    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    function setnoF(address account, bool newValue) public onlyOwner() {
        noF[account] = newValue;
    }
    function getCirculatingSupply() public view returns (uint256) {
        return _totalSupply.sub(balanceOf(deadAddress));
    }
    function transferToAddressETH(address payable recipient, uint256 amount) private {
        recipient.transfer(amount);
    }
     //to recieve ETH from uniswapV2Router when swaping
    receive() external payable {}
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }
    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }
    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        if(!noF[sender] && !noF[recipient]){
            AntiBotInterface(antibotManager).safeTransfer(sender, recipient, amount);
        }

        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
        uint256 finalAmount = (noF[sender] || noF[recipient]) ?
                                        amount : takeFee(sender, recipient, amount);
        _balances[recipient] = _balances[recipient].add(finalAmount);
        emit Transfer(sender, recipient, finalAmount);
        return true;
    }
    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {
        uint256 feeAmount = 0;
        if(isMarketPair(sender)) {
            if(partnersBuyTax){
                feeAmount = amount.mul(_totalTaxIfBuying).div(1000);
            }
        } else if(isMarketPair(recipient)) {
            if(!partnersSellTax){
                uint256 _amountToTransfer = amount.mul(platformSellingTax).div(1000);
                _balances[platformWallet] = _balances[platformWallet].add(_amountToTransfer);
                emit Transfer(sender, platformWallet, _amountToTransfer);
                feeAmount = feeAmount.add(_amountToTransfer);
                return amount.sub(feeAmount);
            }
            feeAmount = amount.mul(_totalTaxIfSelling).div(1000);
        }
        if(feeAmount > 0) {
            feeAmount = 0;
            for(uint8 i = 0; i < partners.length; i++){
                uint256 _amountToTransfer = amount.mul(partnerTax).div(1000);
                _balances[partners[i]] = _balances[partners[i]].add(_amountToTransfer);
                emit Transfer(sender, partners[i], _amountToTransfer);
                feeAmount = feeAmount.add(_amountToTransfer);
            }
            if(isMarketPair(recipient)) {
                uint256 _amountToTransfer = amount.mul(platformSellingTax).div(1000);
                _balances[platformWallet] = _balances[platformWallet].add(_amountToTransfer);
                emit Transfer(sender, platformWallet, _amountToTransfer);
                feeAmount = feeAmount.add(_amountToTransfer);
            }
        }
        return amount.sub(feeAmount);
    }
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");
        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        _balances[account] = accountBalance - amount;
        _balances[deadAddress] = _balances[deadAddress] + amount;
        emit Transfer(account, deadAddress, amount);
    }
    function burn(uint256 _amount) external{
        _burn(_msgSender(), _amount);
    }
}

// File: contracts/IPancakePair.sol
//SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.5.0;

interface IPancakePair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);

    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);
    function burn(address to) external returns (uint amount0, uint amount1);
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

// File: contracts/Social.sol
//SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.14;

struct Social {
    string site;
    string telegram;
    string twitter;
}

// File: contracts/InfoTokenSociety.sol
//SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.19;

struct InfoTokenSociety {
    string name;
    string symbol;
    uint256 totalSupply;
    bool buyTax;
    bool sellTax;
    address antibotManager;
}

// File: contracts/Address.sol
//SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.19;
library Address {
    function isContract(address account) internal view returns (bool) {
        return account.code.length > 0;
    }
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }
    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}

// File: contracts/SafeMath.sol
//SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.19;

library SafeMath {
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

// File: contracts/IERC20.sol
//SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.19;

interface IERC20 {
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address to, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// File: contracts/Ownable.sol
//SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.18;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}
contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }
    function owner() public view returns (address) {
        return _owner;
    }
    modifier onlyOwner() {
        require(_owner == _msgSender(), 'Ownable: caller is not the owner');
        _;
    }
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), 'Ownable: new owner is the zero address');
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}
