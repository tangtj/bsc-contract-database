{"IERC20.sol":{"content":"pragma solidity 0.5.4;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    event Transfer(address indexed from,address indexed to,uint256 value);\r\n    event Approval(address indexed owner,address indexed spender,uint256 value);\r\n}\r\n"},"IPancakeFactory.sol":{"content":"pragma solidity 0.5.4;\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n"},"IPancakePair.sol":{"content":"pragma solidity 0.5.4;\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"},"IPancakeRouter.sol":{"content":"pragma solidity 0.5.4;\r\n\r\ninterface IPancakeRouter {\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n"},"SafeMath.sol":{"content":"pragma solidity 0.5.4;\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003e 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003c= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a);\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n"},"TokenTemplate.sol":{"content":"pragma solidity 0.5.4;\r\n\r\nimport \u0027../IPancakePair.sol\u0027;\r\nimport \u0027../IPancakeRouter.sol\u0027;\r\nimport \u0027../SafeMath.sol\u0027;\r\nimport \u0027../IERC20.sol\u0027;\r\nimport \u0027../IPancakeFactory.sol\u0027;\r\n\r\n\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n    mapping (address =\u003e uint256) public _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) public _allowed;\r\n    uint256 public _totalSupply;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    function allowance(address owner,address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender,uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender,uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n        require(value \u003c= _balances[from]);\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view  returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract TokenTemplate is ERC20,Ownable {\r\n    string  private _name = \"OASIS\";\r\n    string  private _symbol = \"OASIS\";\r\n    uint8   private _decimals = 18;\r\n    address public pancakeToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address public usdtToken = 0x55d398326f99059fF775485246999027B3197955;\r\n    address public XHToken = 0x000000000000000000000000000000000000dEaD;\r\n    address public pancakePair;\r\n\r\n    uint public MRXHfee = 0; //2%（买入销毁）\r\n    uint public MCXHfee = 0; //2%（卖出销毁）\r\n    uint public MRJDfee = 0; //6%（买入节点分红后）\r\n    uint public MCJDfee = 0; //6%（买出节点分红后）\r\n\r\n    address public MRfeetoken;  //接收6% 买入节点分红地址\r\n    address public MCfeetoken;  //接收6% 卖出节点分红地址\r\n    constructor (uint256 _initialAmount, address _MRfeetoken, address _MCfeetoken) public {\r\n        _totalSupply = _initialAmount.mul(10 ** uint256(_decimals));\r\n        MRfeetoken = _MRfeetoken;\r\n        MCfeetoken = _MCfeetoken;\r\n        _balances[msg.sender] = _initialAmount.mul(10 ** uint256(_decimals));\r\n        IPancakeRouter router =  IPancakeRouter(pancakeToken);\r\n        pancakePair =  IPancakeFactory(router.factory()).createPair(address(this), usdtToken);\r\n    }\r\n    \r\n    \r\n    \r\n    function setMRandMCfeetoken(address MRaccount,address MCaccount) public onlyOwner returns (bool) {\r\n        MRfeetoken = MRaccount;\r\n        MCfeetoken = MCaccount;\r\n        return true;\r\n    }\r\n    function setfee(uint256 _MRXHfee, uint256 _MCXHfee, uint256 _MRJDfee, uint256 _MCJDfee) public onlyOwner returns (bool) {\r\n        MRXHfee = _MRXHfee;\r\n        MCXHfee = _MCXHfee;\r\n        MRJDfee = _MRJDfee;\r\n        MCJDfee = _MCJDfee;\r\n        return true;\r\n    }\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        require(value \u003c= _allowed[from][msg.sender]);\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n        require(value \u003c= _balances[from]);\r\n        uint256 MRXHfeeAmount = value.mul(MRXHfee).div(100);//\r\n        uint256 MCXHfeeAmount = value.mul(MCXHfee).div(100);//\r\n        uint256 MRJDfeeAmount = value.mul(MRJDfee).div(100);//\r\n        uint256 MCJDfeeAmount = value.mul(MCJDfee).div(100);//\r\n\r\n        if (from == pancakePair) {\r\n            //买入\r\n            _balances[from] = _balances[from].sub(value);\r\n            _balances[to] = _balances[to].add(value.sub(MRXHfeeAmount + MRJDfeeAmount));\r\n            _balances[MRfeetoken] = _balances[MRfeetoken].add(MRJDfeeAmount);\r\n            _burn(from, MRXHfeeAmount);\r\n            emit Transfer(from, MRfeetoken, MRJDfeeAmount);\r\n            emit Transfer(from, to, value.sub(MRXHfeeAmount + MRJDfeeAmount));\r\n        } else if(to == pancakePair) {\r\n            //卖出\r\n            _balances[from] = _balances[from].sub(value);\r\n            _balances[to] = _balances[to].add(value.sub(MCXHfeeAmount + MCJDfeeAmount));\r\n            _balances[MCfeetoken] = _balances[MCfeetoken].add(MCJDfeeAmount);\r\n            _burn(from, MCXHfeeAmount);\r\n            emit Transfer(from, MCfeetoken, MCJDfeeAmount);\r\n            emit Transfer(from, to, value.sub(MCXHfeeAmount + MCJDfeeAmount));\r\n        }else {\r\n            //ת��\r\n            _balances[from] = _balances[from].sub(value);\r\n            _balances[to] = _balances[to].add(value);\r\n            emit Transfer(from, to, value);\r\n        }\r\n    }\r\n    \r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != XHToken);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, XHToken, amount);\r\n        require(account != XHToken);\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n}\r\n"}}