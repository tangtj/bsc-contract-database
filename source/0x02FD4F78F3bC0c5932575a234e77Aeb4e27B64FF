// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract PriceFeed {

    address public owner;

    // Introducing a new mapping to track added cryptocurrencies.
    mapping(string => bool) public isCryptoAdded;

    mapping(string => uint256) public prices;

    event PriceUpdated(string crypto, uint256 newPrice);
    event CryptoAdded(string crypto);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not the contract owner");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    // Function to add a new cryptocurrency.
    function addCrypto(string memory crypto) public onlyOwner {
        require(!isCryptoAdded[crypto], "Crypto already added");
        isCryptoAdded[crypto] = true;
        emit CryptoAdded(crypto);
    }
    // View function to get the price of a crypto
    function getPrice(string memory crypto) public view returns (uint256) {
        return prices[crypto];
    }

    // Modified updatePrice function to only update prices of added cryptocurrencies.
    function updatePrice(string memory crypto, uint256 newPrice) public onlyOwner {
        require(isCryptoAdded[crypto], "Crypto not added yet");
        prices[crypto] = newPrice;
        emit PriceUpdated(crypto, newPrice);
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "New owner is the zero address");
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }
}