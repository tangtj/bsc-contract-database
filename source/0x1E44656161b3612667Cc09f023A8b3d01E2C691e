// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract OZOToken {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    address public admin;

    mapping(address => uint256) public balances;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event AdminChanged(address indexed previousAdmin, address indexed newAdmin);

    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _initialSupply) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _initialSupply;
        admin = msg.sender;
        balances[msg.sender] = _initialSupply;
    }

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can call this function");
        _;
    }

    function transfer(address _to, uint256 _value) external returns (bool) {
        require(_to != address(0), "Invalid address");
        require(_value <= balances[msg.sender], "Insufficient balance");

        balances[msg.sender] -= _value;
        balances[_to] += _value;

        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function mint(address _to, uint256 _value) external onlyAdmin returns (bool) {
        require(_to != address(0), "Invalid address");

        totalSupply += _value;
        balances[_to] += _value;

        emit Transfer(address(0), _to, _value);
        return true;
    }

    function burn(uint256 _value) external returns (bool) {
        require(_value <= balances[msg.sender], "Insufficient balance");

        totalSupply -= _value;
        balances[msg.sender] -= _value;

        emit Transfer(msg.sender, address(0), _value);
        return true;
    }

    function changeAdmin(address _newAdmin) external onlyAdmin {
        require(_newAdmin != address(0), "Invalid address");

        address previousAdmin = admin;
        admin = _newAdmin;

        emit AdminChanged(previousAdmin, _newAdmin);
    }
}