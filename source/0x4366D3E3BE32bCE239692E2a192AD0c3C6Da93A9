{"AbstractToken.sol":{"content":"// \u003cSPDX-License-Identifier: UNLICENSED\u003e\r\n/*\r\n * Abstract Token Smart Contract.  Copyright Â© 2017 by ABDK Consulting.\r\n * Copyright (c) 2021 by manacash Ltd.\r\n * Contact: \u003cdev@manacash.me\u003e\r\n */\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Token.sol\";\r\n\r\n/**\r\n * Abstract Token Smart Contract that could be used as a base contract for\r\n * ERC-20 token contracts.\r\n */\r\nabstract contract AbstractToken is Token {\r\n  /**\r\n   * Create new Abstract Token contract.\r\n   */\r\n  constructor () {\r\n    // Do nothing\r\n  }\r\n\r\n  /**\r\n   * Get number of tokens currently belonging to given owner.\r\n   *\r\n   * @param _owner address to get number of tokens currently belonging to the\r\n   *        owner of\r\n   * @return balance number of tokens currently belonging to the owner of given address\r\n   */\r\n  function balanceOf (address _owner) public override virtual view returns (uint256 balance) {\r\n    return accounts [_owner];\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of tokens from message sender to given recipient.\r\n   *\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer to the owner of given address\r\n   * @return success true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transfer (address _to, uint256 _value)\r\n  public override virtual returns (bool success) {\r\n    uint256 fromBalance = accounts [msg.sender];\r\n    if (fromBalance \u003c _value) return false;\r\n    if (_value \u003e 0 \u0026\u0026 msg.sender != _to) {\r\n      accounts [msg.sender] = fromBalance - _value;\r\n      accounts [_to] = accounts [_to] + _value;\r\n    }\r\n    emit Transfer (msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of tokens from given owner to given recipient.\r\n   *\r\n   * @param _from address to transfer tokens from the owner of\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer from given owner to given\r\n   *        recipient\r\n   * @return success true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transferFrom (address _from, address _to, uint256 _value)\r\n  public override virtual returns (bool success) {\r\n    uint256 spenderAllowance = allowances [_from][msg.sender];\r\n    if (spenderAllowance \u003c _value) return false;\r\n    uint256 fromBalance = accounts [_from];\r\n    if (fromBalance \u003c _value) return false;\r\n\r\n    allowances [_from][msg.sender] =\r\n      spenderAllowance - _value;\r\n\r\n    if (_value \u003e 0 \u0026\u0026 _from != _to) {\r\n      accounts [_from] = fromBalance - _value;\r\n      accounts [_to] = accounts [_to] + _value;\r\n    }\r\n    emit Transfer (_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Allow given spender to transfer given number of tokens from message sender.\r\n   *\r\n   * @param _spender address to allow the owner of to transfer tokens from\r\n   *        message sender\r\n   * @param _value number of tokens to allow to transfer\r\n   * @return success true if token transfer was successfully approved, false otherwise\r\n   */\r\n  function approve (address _spender, uint256 _value)\r\n  public override virtual returns (bool success) {\r\n    allowances [msg.sender][_spender] = _value;\r\n    emit Approval (msg.sender, _spender, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Tell how many tokens given spender is currently allowed to transfer from\r\n   * given owner.\r\n   *\r\n   * @param _owner address to get number of tokens allowed to be transferred\r\n   *        from the owner of\r\n   * @param _spender address to get number of tokens allowed to be transferred\r\n   *        by the owner of\r\n   * @return remaining number of tokens given spender is currently allowed to transfer\r\n   *         from given owner\r\n   */\r\n  function allowance (address _owner, address _spender)\r\n  public override virtual view returns (uint256 remaining) {\r\n    return allowances [_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Mapping from addresses of token holders to the numbers of tokens belonging\r\n   * to these token holders.\r\n   */\r\n  mapping (address =\u003e uint256) internal accounts;\r\n\r\n  /**\r\n   * @dev Mapping from addresses of token holders to the mapping of addresses of\r\n   * spenders to the allowances set by these token holders to these spenders.\r\n   */\r\n  mapping (address =\u003e mapping (address =\u003e uint256)) internal allowances;\r\n}\r\n"},"CyberCashCC.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n/*\r\n * CyberCash (CC) Token Smart Contract.\r\n * Copyright (c) 2018 by CyberCash\r\n * Contact: \u003cinfo@cybercash.me\u003e\r\n */\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./AbstractToken.sol\";\r\n\r\n/**\r\n * CC Token Smart Contract: EIP-20 compatible token smart contract that\r\n * manages CC tokens.\r\n */\r\ncontract CCToken is AbstractToken {\r\n  /**\r\n   * @dev Fee denominator (0.001%).\r\n   */\r\n  uint256 constant internal FEE_DENOMINATOR = 100000;\r\n\r\n  /**\r\n   * @dev Maximum fee numerator (100%).\r\n   */\r\n  uint256 constant internal MAX_FEE_NUMERATOR = FEE_DENOMINATOR;\r\n\r\n  /**\r\n   * @dev Maximum allowed number of tokens in circulation.\r\n   */\r\n  uint256 constant internal MAX_TOKENS_COUNT =\r\n    244000000000000000000 /\r\n    MAX_FEE_NUMERATOR;\r\n\r\n  /**\r\n   * @dev Address flag that marks black listed addresses.\r\n   */\r\n  uint256 constant internal BLACK_LIST_FLAG = 0x01;\r\n\r\n  /**\r\n   * Create CC Token smart contract with message sender as an owner.\r\n   */\r\n  constructor () {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * Get name of the token.\r\n   *\r\n   * @return name of the token\r\n   */\r\n  function name () public pure returns (string memory) {\r\n    return \"CYBERCASH\";\r\n  }\r\n\r\n  /**\r\n   * Get symbol of the token.\r\n   *\r\n   * @return symbol of the token\r\n   */\r\n  function symbol () public pure returns (string memory) {\r\n    return \"CC\";\r\n  }\r\n\r\n  /**\r\n   * Get number of decimals for the token.\r\n   *\r\n   * @return number of decimals for the token\r\n   */\r\n  function decimals () public pure returns (uint8) {\r\n    return 5;\r\n  }\r\n\r\n  /**\r\n   * Get total number of tokens in circulation.\r\n   *\r\n   * @return total number of tokens in circulation\r\n   */\r\n  function totalSupply () public override view returns (uint256) {\r\n    return tokensCount;\r\n  }\r\n\r\n  /**\r\n   * Get number of tokens currently belonging to given owner.\r\n   *\r\n   * @param _owner address to get number of tokens currently belonging to the\r\n   *        owner of\r\n   * @return balance number of tokens currently belonging to the owner of given address\r\n   */\r\n  function balanceOf (address _owner)\r\n    public override view returns (uint256 balance) {\r\n    return AbstractToken.balanceOf (_owner);\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of tokens from message sender to given recipient.\r\n   *\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer to the owner of given address\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transfer (address _to, uint256 _value)\r\n  public override virtual returns (bool) {\r\n    if (frozen) return false;\r\n    else if (\r\n      (addressFlags [msg.sender] | addressFlags [_to]) \u0026 BLACK_LIST_FLAG ==\r\n      BLACK_LIST_FLAG)\r\n      return false;\r\n    else {\r\n      if (_value \u003c= accounts [msg.sender]) {\r\n        require (AbstractToken.transfer (_to, _value));\r\n        return true;\r\n      } else return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of tokens from given owner to given recipient.\r\n   *\r\n   * @param _from address to transfer tokens from the owner of\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer from given owner to given\r\n   *        recipient\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transferFrom (address _from, address _to, uint256 _value)\r\n  public override virtual returns (bool) {\r\n    if (frozen) return false;\r\n    else if (\r\n      (addressFlags [_from] | addressFlags [_to]) \u0026 BLACK_LIST_FLAG ==\r\n      BLACK_LIST_FLAG)\r\n      return false;\r\n    else {\r\n      if (_value \u003c= allowances [_from][msg.sender] \u0026\u0026\r\n          _value \u003c= accounts [_from]) {\r\n        require (AbstractToken.transferFrom (_from, _to, _value));\r\n        return true;\r\n      } else return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Allow given spender to transfer given number of tokens from message sender.\r\n   *\r\n   * @param _spender address to allow the owner of to transfer tokens from\r\n   *        message sender\r\n   * @param _value number of tokens to allow to transfer\r\n   * @return success true if token transfer was successfully approved, false otherwise\r\n   */\r\n  function approve (address _spender, uint256 _value)\r\n  public override returns (bool success) {\r\n    return AbstractToken.approve (_spender, _value);\r\n  }\r\n\r\n  /**\r\n   * Tell how many tokens given spender is currently allowed to transfer from\r\n   * given owner.\r\n   *\r\n   * @param _owner address to get number of tokens allowed to be transferred\r\n   *        from the owner of\r\n   * @param _spender address to get number of tokens allowed to be transferred\r\n   *        by the owner of\r\n   * @return remaining number of tokens given spender is currently allowed to transfer\r\n   *         from given owner\r\n   */\r\n  function allowance (address _owner, address _spender)\r\n  public override view returns (uint256 remaining) {\r\n    return AbstractToken.allowance (_owner, _spender);\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of token from the signed defined by digital signature\r\n   * to given recipient.\r\n   *\r\n   * @param _to address to transfer token to the owner of\r\n   * @param _value number of tokens to transfer\r\n   * @param _fee number of tokens to give to message sender\r\n   * @param _nonce nonce of the transfer\r\n   * @param _v parameter V of digital signature\r\n   * @param _r parameter R of digital signature\r\n   * @param _s parameter S of digital signature\r\n   */\r\n  function delegatedTransfer (\r\n    address _to, uint256 _value, uint256 _fee,\r\n    uint256 _nonce, uint8 _v, bytes32 _r, bytes32 _s)\r\n  public virtual returns (bool) {\r\n    if (frozen) return false;\r\n    else {\r\n      address _from = ecrecover (\r\n        keccak256 (\r\n          abi.encodePacked (\r\n            thisAddress (), messageSenderAddress (), _to, _value, _fee, _nonce)),\r\n        _v, _r, _s);\r\n\r\n      if (_from == address (0)) return false;\r\n\r\n      if (_nonce != nonces [_from]) return false;\r\n\r\n      if (\r\n        (addressFlags [_from] | addressFlags [_to]) \u0026 BLACK_LIST_FLAG ==\r\n        BLACK_LIST_FLAG)\r\n        return false;\r\n\r\n      uint256 balance = accounts [_from];\r\n      if (_value \u003e balance) return false;\r\n      balance = balance - _value;\r\n      if (_fee \u003e balance) return false;\r\n      balance = balance - _fee;\r\n\r\n      nonces [_from] = _nonce + 1;\r\n\r\n      accounts [_from] = balance;\r\n      accounts [_to] = accounts [_to] + _value;\r\n      accounts [msg.sender] = accounts [msg.sender] + _fee;\r\n\r\n      emit Transfer (_from, _to, _value);\r\n      emit Transfer (_from, msg.sender, _fee);\r\n\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create tokens.\r\n   *\r\n   * @param _value number of tokens to be created.\r\n   */\r\n  function createTokens (uint256 _value)\r\n  public virtual returns (bool) {\r\n    require (msg.sender == owner);\r\n\r\n    if (_value \u003e 0) {\r\n      if (_value \u003c= MAX_TOKENS_COUNT - tokensCount) {\r\n        accounts [msg.sender] = accounts [msg.sender] + _value;\r\n        tokensCount = tokensCount + _value;\r\n\r\n        emit Transfer (address (0), msg.sender, _value);\r\n\r\n        return true;\r\n      } else return false;\r\n    } else return true;\r\n  }\r\n\r\n  /**\r\n   * Burn tokens.\r\n   *\r\n   * @param _value number of tokens to burn\r\n   */\r\n  function burnTokens (uint256 _value)\r\n  public virtual returns (bool) {\r\n    require (msg.sender == owner);\r\n\r\n    if (_value \u003e 0) {\r\n      if (_value \u003c= accounts [msg.sender]) {\r\n        accounts [msg.sender] = accounts [msg.sender] - _value;\r\n        tokensCount = tokensCount - _value;\r\n\r\n        emit Transfer (msg.sender, address (0), _value);\r\n\r\n        return true;\r\n      } else return false;\r\n    } else return true;\r\n  }\r\n\r\n  /**\r\n   * Freeze token transfers.\r\n   */\r\n  function freezeTransfers () public {\r\n    require (msg.sender == owner);\r\n\r\n    if (!frozen) {\r\n      frozen = true;\r\n\r\n      emit Freeze ();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unfreeze token transfers.\r\n   */\r\n  function unfreezeTransfers () public {\r\n    require (msg.sender == owner);\r\n\r\n    if (frozen) {\r\n      frozen = false;\r\n\r\n     emit Unfreeze ();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set smart contract owner.\r\n   *\r\n   * @param _newOwner address of the new owner\r\n   */\r\n  function setOwner (address _newOwner) public {\r\n    require (msg.sender == owner);\r\n\r\n    owner = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * Get current nonce for token holder with given address, i.e. nonce this\r\n   * token holder should use for next delegated transfer.\r\n   *\r\n   * @param _owner address of the token holder to get nonce for\r\n   * @return current nonce for token holder with give address\r\n   */\r\n  function nonce (address _owner) public view returns (uint256) {\r\n    return nonces [_owner];\r\n  }\r\n\r\n  /**\r\n   * Get fee parameters.\r\n   *\r\n   * @return _fixedFee fixed fee\r\n   * @return _minVariableFee minimum variable fee\r\n   * @return _maxVariableFee maximum variable fee\r\n   * @return _variableFeeNumnerator variable fee numerator\r\n   */\r\n  function getFeeParameters () public pure returns (\r\n    uint256 _fixedFee,\r\n    uint256 _minVariableFee,\r\n    uint256 _maxVariableFee,\r\n    uint256 _variableFeeNumnerator) {\r\n    _fixedFee = 0;\r\n    _minVariableFee = 0;\r\n    _maxVariableFee = 0;\r\n    _variableFeeNumnerator = 0;\r\n  }\r\n\r\n  /**\r\n   * Calculate fee for transfer of given number of tokens.\r\n   *\r\n   * @param _amount transfer amount to calculate fee for\r\n   * @return _fee fee for transfer of given amount\r\n   */\r\n  function calculateFee (uint256 _amount)\r\n    public pure returns (uint256 _fee) {\r\n    require (_amount \u003c= MAX_TOKENS_COUNT);\r\n\r\n    _fee = 0;\r\n  }\r\n\r\n  /**\r\n   * Set flags for given address.\r\n   *\r\n   * @param _address address to set flags for\r\n   * @param _flags flags to set\r\n   */\r\n  function setFlags (address _address, uint256 _flags)\r\n  public {\r\n    require (msg.sender == owner);\r\n\r\n    addressFlags [_address] = _flags;\r\n  }\r\n\r\n  /**\r\n   * Get flags for given address.\r\n   *\r\n   * @param _address address to get flags for\r\n   * @return flags for given address\r\n   */\r\n  function flags (address _address) public view returns (uint256) {\r\n    return addressFlags [_address];\r\n  }\r\n\r\n  /**\r\n   * Get address of this smart contract.\r\n   *\r\n   * @return address of this smart contract\r\n   */\r\n  function thisAddress () internal virtual view returns (address) {\r\n    return address(this);\r\n  }\r\n\r\n  /**\r\n   * Get address of message sender.\r\n   *\r\n   * @return address of this smart contract\r\n   */\r\n  function messageSenderAddress () internal virtual view returns (address) {\r\n    return msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Owner of the smart contract.\r\n   */\r\n  address internal owner;\r\n\r\n  /**\r\n   * @dev Address where fees are sent to.  Not used anymore.\r\n   */\r\n  address internal feeCollector;\r\n\r\n  /**\r\n   * @dev Number of tokens in circulation.\r\n   */\r\n  uint256 internal tokensCount;\r\n\r\n  /**\r\n   * @dev Whether token transfers are currently frozen.\r\n   */\r\n  bool internal frozen;\r\n\r\n  /**\r\n   * @dev Mapping from sender\u0027s address to the next delegated transfer nonce.\r\n   */\r\n  mapping (address =\u003e uint256) internal nonces;\r\n\r\n  /**\r\n   * @dev Fixed fee amount in token units.  Not used anymore.\r\n   */\r\n  uint256 internal fixedFee;\r\n\r\n  /**\r\n   * @dev Minimum variable fee in token units.  Not used anymore.\r\n   */\r\n  uint256 internal minVariableFee;\r\n\r\n  /**\r\n   * @dev Maximum variable fee in token units.  Not used anymore.\r\n   */\r\n  uint256 internal maxVariableFee;\r\n\r\n  /**\r\n   * @dev Variable fee numerator.  Not used anymore.\r\n   */\r\n  uint256 internal variableFeeNumerator;\r\n\r\n  /**\r\n   * @dev Maps address to its flags.\r\n   */\r\n  mapping (address =\u003e uint256) internal addressFlags;\r\n\r\n  /**\r\n   * @dev Address of smart contract to delegate execution of delegatable methods to,\r\n   * or zero to not delegate delegatable methods execution.  Not used in upgrade.\r\n   */\r\n  address internal delegate;\r\n\r\n  /**\r\n   * Logged when token transfers were frozen.\r\n   */\r\n  event Freeze ();\r\n\r\n  /**\r\n   * Logged when token transfers were unfrozen.\r\n   */\r\n  event Unfreeze ();\r\n}\r\n"},"Token.sol":{"content":"// \u003cSPDX-License-Identifier: UNLICENSED\u003e\r\n/*\r\n * EIP-20 Standard Token Smart Contract Interface.\r\n * Copyright (c) 2021 by TestCash Limited.\r\n * Contact: \u003cdev@testcash.me\u003e\r\n */\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * ERC-20 standard token interface, as defined\r\n * \u003ca href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\"\u003ehere\u003c/a\u003e.\r\n */\r\ninterface Token {\r\n  /**\r\n   * Get total number of tokens in circulation.\r\n   *\r\n   * @return supply total number of tokens in circulation\r\n   */\r\n  function totalSupply () external view returns (uint256 supply);\r\n\r\n  /**\r\n   * Get number of tokens currently belonging to given owner.\r\n   *\r\n   * @param _owner address to get number of tokens currently belonging to the\r\n   *        owner of\r\n   * @return balance number of tokens currently belonging to the owner of given address\r\n   */\r\n  function balanceOf (address _owner) external view returns (uint256 balance);\r\n\r\n  /**\r\n   * Transfer given number of tokens from message sender to given recipient.\r\n   *\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer to the owner of given address\r\n   * @return success true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transfer (address _to, uint256 _value)\r\n  external returns (bool success);\r\n\r\n  /**\r\n   * Transfer given number of tokens from given owner to given recipient.\r\n   *\r\n   * @param _from address to transfer tokens from the owner of\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer from given owner to given\r\n   *        recipient\r\n   * @return success true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transferFrom (address _from, address _to, uint256 _value)\r\n  external returns (bool success);\r\n\r\n  /**\r\n   * Allow given spender to transfer given number of tokens from message sender.\r\n   *\r\n   * @param _spender address to allow the owner of to transfer tokens from\r\n   *        message sender\r\n   * @param _value number of tokens to allow to transfer\r\n   * @return success true if token transfer was successfully approved, false otherwise\r\n   */\r\n  function approve (address _spender, uint256 _value)\r\n  external returns (bool success);\r\n\r\n  /**\r\n   * Tell how many tokens given spender is currently allowed to transfer from\r\n   * given owner.\r\n   *\r\n   * @param _owner address to get number of tokens allowed to be transferred\r\n   *        from the owner of\r\n   * @param _spender address to get number of tokens allowed to be transferred\r\n   *        by the owner of\r\n   * @return remaining number of tokens given spender is currently allowed to transfer\r\n   *         from given owner\r\n   */\r\n  function allowance (address _owner, address _spender)\r\n  external view returns (uint256 remaining);\r\n\r\n  /**\r\n   * Logged when tokens were transferred from one owner to another.\r\n   *\r\n   * @param _from address of the owner, tokens were transferred from\r\n   * @param _to address of the owner, tokens were transferred to\r\n   * @param _value number of tokens transferred\r\n   */\r\n  event Transfer (address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  /**\r\n   * Logged when owner approved his tokens to be transferred by some spender.\r\n   *\r\n   * @param _owner owner who approved his tokens to be transferred\r\n   * @param _spender spender who were allowed to transfer the tokens belonging\r\n   *        to the owner\r\n   * @param _value number of tokens belonging to the owner, approved to be\r\n   *        transferred by the spender\r\n   */\r\n  event Approval (\r\n    address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n"}}