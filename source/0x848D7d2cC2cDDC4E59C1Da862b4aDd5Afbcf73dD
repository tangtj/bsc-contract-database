{"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller\u0027s account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}"},"stake.sol":{"content":"pragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ncontract TokenLock {\r\n    address public tokenAddress;\r\n    address public owner;\r\n    mapping(address =\u003e uint256) public lockedBalances;\r\n    mapping(address =\u003e uint256) public recipientAmounts;\r\n\r\n    event TokensLocked(address indexed recipient, uint256 amount);\r\n    event TokensUnlocked(address indexed recipient, uint256 amount);\r\n    event TokensWithdrawn(address indexed recipient, uint256 amount);\r\n    event RecipientSet(address indexed recipient, uint256 amount);\r\n\r\n    constructor(address _tokenAddress) {\r\n        tokenAddress = _tokenAddress;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function lockTokens(uint256 amount) external {\r\n        require(amount \u003e 0, \"Amount must be greater than 0\");\r\n        require(IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount), \"Token transfer failed\");\r\n\r\n        lockedBalances[msg.sender] += amount;\r\n        emit TokensLocked(msg.sender, amount);\r\n    }\r\n\r\n    function unlockTokens() external {\r\n        uint256 amount = recipientAmounts[msg.sender];\r\n        require(amount \u003e 0, \"No tokens to unlock\");\r\n\r\n        recipientAmounts[msg.sender] = 0;\r\n        lockedBalances[msg.sender] -= amount;\r\n        require(IERC20(tokenAddress).transfer(msg.sender, amount), \"Token transfer failed\");\r\n\r\n        emit TokensUnlocked(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawAll() external {\r\n        uint256 amount = lockedBalances[msg.sender];\r\n        require(amount \u003e 0, \"No unlocked tokens to withdraw\");\r\n\r\n        lockedBalances[msg.sender] = 0;\r\n        require(IERC20(tokenAddress).transfer(msg.sender, amount), \"Token transfer failed\");\r\n\r\n        emit TokensWithdrawn(msg.sender, amount);\r\n    }\r\n\r\n    function setRecipient(address recipient, uint256 amount) external {\r\n        require(msg.sender == owner, \"Only owner can set recipients\");\r\n        recipientAmounts[recipient] = amount;\r\n        emit RecipientSet(recipient, amount);\r\n    }\r\n}"}}