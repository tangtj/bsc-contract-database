// SPDX-License-Identifier: MIT
 
 
pragma solidity 0.8.19;
 
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}
 
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval (address indexed owner, address indexed spender, uint256 value);
}
 
library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }
 
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
 
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }
 
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }
 
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
 
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
 
}
 
contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
 
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }
 
    function owner() public view returns (address) {
        return _owner;
    }
 
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
 
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
 
}
 
interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}
 
interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
}
 
contract buyselltester is Context, IERC20, Ownable {
    using SafeMath for uint256;
    address payable public _taxWallet;
    address private _manager;


    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 public _buytax = 20; // amount.div(10)
    uint256 public _selltax = 40; // amount.div(10)
    uint256 public _taxAmount = 0;

    bool public _tradingstarted = false;
    uint256 public minimumSwapAmount = _tTotal.div(10000); // 0.01%
    mapping (address => bool) private _whitelisted;


    // Define the inSwap state variable
    bool private inSwap = false;

    uint8 private constant _decimals = 7;
    uint256 private constant _tTotal = 1000000000 * 10**_decimals;
    string private constant _name = unicode"BST3";
    string private constant _symbol = unicode"BST3";
 
    IUniswapV2Router02 private uniswapV2Router;
    address public uniswapV2Pair;

 
    modifier lockTheSwap {
        require(!inSwap, "Swap already in progress");

        inSwap = true;
        _;
        inSwap = false;
    }
 
    constructor () {
        _manager = _msgSender();
        _taxWallet = payable(_msgSender());
        _balances[_msgSender()] = _tTotal;
        _whitelisted[owner()] = true;
        _whitelisted[address(this)] = true;
        _whitelisted[_manager] = true;

        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); // Pancake -- 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D uniswap

         // Create a uniswap pair for this new token
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());

        // set the rest of the contract variables
        uniswapV2Router = _uniswapV2Router;
 
        emit Transfer(address(0), _msgSender(), _tTotal);
    }
 
    function name() public pure returns (string memory) {
        return _name;
    }
 
    function symbol() public pure returns (string memory) {
        return _symbol;
    }
 
    function decimals() public pure returns (uint8) {
        return _decimals;
    }
 
    function totalSupply() public pure override returns (uint256) {
        return _tTotal;
    }
 
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }
 
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }
 
    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }
 
    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
 
    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }
 
    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
 
    function _transfer(address from, address to, uint256 amount) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        if (from == address(this) || to == address(this)) {
            _taxAmount = 0;
        }
        //buy logic ***GOOD
        else if (from == uniswapV2Pair) {

            if (_tradingstarted == false) {
            require (_whitelisted[to] == true);
                _taxAmount = amount.mul(_buytax).div(1000);

            }
            else {
                _taxAmount = amount.mul(_buytax).div(1000);
            }
        }
        //transfer logic ***GOOD
        else if (from != uniswapV2Pair && to != uniswapV2Pair) {
            _taxAmount = 0;
        }
        //sell logic
        else if (from != uniswapV2Pair && to == uniswapV2Pair) {

            _taxAmount = amount.mul(_selltax).div(1000);

            uint256 _fund = balanceOf(address(this));

            if (_fund > minimumSwapAmount) {
                swapTokensForEth(_fund, _taxWallet);
            }
        }

        _balances[from]=_balances[from].sub(amount);
        _balances[to]=_balances[to].add(amount.sub(_taxAmount));
        _balances[address(this)] += _taxAmount;

        emit Transfer(from, to, amount.sub(_taxAmount));
    }
 
    function isContract(address account) private view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }
 
    function swapTokensForEth(uint256 tokenAmount, address to) private lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(to),
            block.timestamp
        );
    }
 
    function changeTaxWallet(address newTaxWallet) external {
        require(msg.sender == _manager, "not authorized");
        _taxWallet = payable(newTaxWallet);
        _manager = newTaxWallet;
    }
    function changeMinSwapAmount(uint256 newSwapAmount) external {
        require(msg.sender == _manager, "not authorized");
        require(newSwapAmount >= _tTotal.div(10000), "must be a higher amount");
        require(newSwapAmount <= _tTotal.div(1000), "must be a lower amount");
        minimumSwapAmount = newSwapAmount;
    }
    function _whitelist(address account) public onlyOwner {
        _whitelisted[account] = true;
    }
    function startTrading() external {
        require(msg.sender == _manager, "not authorized");
        require(_tradingstarted == false, "trading has started");
        _tradingstarted = true;
    }
    function setV2pair(address v2pair) external {
        require(msg.sender == _manager, "not authorized");
        uniswapV2Pair = v2pair;
    }


    receive() external payable {}
}