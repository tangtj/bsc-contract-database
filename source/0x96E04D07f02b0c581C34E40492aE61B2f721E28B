{"EDUC - Copia.sol":{"content":"pragma solidity ^0.8.7;\r\n\r\ncontract EducCoin {\r\n    mapping(address =\u003e uint) public balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint)) public allowance;\r\n    uint public totalSupply = 1000000000 * 10 ** 18; // Total supply of 1 billion tokens\r\n    string public name = \"EducCoin\";\r\n    string public symbol = \"EDUC\";\r\n    uint public decimals = 18;\r\n    address public owner = 0x430EC480fb02CA7742D7189aca6Bd52129C005DC;\r\n    address public donationWallet = 0x91a8C608cF41E6aA5b9ebc8a0aeb8501ab8E4583;\r\n    address public marketingWallet = 0xdE33F54e3415F0CC19e375d431f32EDB62f41FC2;\r\n    uint public donationFeePercentage = 2;\r\n    uint public marketingFeePercentage = 2;\r\n    uint public ownerFeePercentage = 1;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    \r\n    constructor() {\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view returns(uint) {\r\n        return balances[account];\r\n    }\r\n    \r\n    function transfer(address to, uint value) public returns(bool) {\r\n        uint fee = (value * (donationFeePercentage + marketingFeePercentage + ownerFeePercentage)) / 100;\r\n        uint amountAfterFees = value - fee;\r\n        \r\n        require(balanceOf(msg.sender) \u003e= value, \u0027balance too low\u0027);\r\n        \r\n        balances[to] += amountAfterFees;\r\n        balances[donationWallet] += (value * donationFeePercentage) / 100;\r\n        balances[marketingWallet] += (value * marketingFeePercentage) / 100;\r\n        balances[owner] += (value * ownerFeePercentage) / 100;\r\n        \r\n        balances[msg.sender] -= value;\r\n        \r\n        emit Transfer(msg.sender, to, amountAfterFees);\r\n        emit Transfer(msg.sender, donationWallet, (value * donationFeePercentage) / 100);\r\n        emit Transfer(msg.sender, marketingWallet, (value * marketingFeePercentage) / 100);\r\n        emit Transfer(msg.sender, owner, (value * ownerFeePercentage) / 100);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint value) public returns(bool) {\r\n        uint fee = (value * (donationFeePercentage + marketingFeePercentage + ownerFeePercentage)) / 100;\r\n        uint amountAfterFees = value - fee;\r\n        \r\n        require(balanceOf(from) \u003e= value, \u0027balance too low\u0027);\r\n        require(allowance[from][msg.sender] \u003e= value, \u0027allowance too low\u0027);\r\n        \r\n        balances[to] += amountAfterFees;\r\n        balances[donationWallet] += (value * donationFeePercentage) / 100;\r\n        balances[marketingWallet] += (value * marketingFeePercentage) / 100;\r\n        balances[owner] += (value * ownerFeePercentage) / 100;\r\n        \r\n        balances[from] -= value;\r\n        allowance[from][msg.sender] -= value;\r\n        \r\n        emit Transfer(from, to, amountAfterFees);\r\n        emit Transfer(from, donationWallet, (value * donationFeePercentage) / 100);\r\n        emit Transfer(from, marketingWallet, (value * marketingFeePercentage) / 100);\r\n        emit Transfer(from, owner, (value * ownerFeePercentage) / 100);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint value) public returns (bool) {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;   \r\n    }\r\n}\r\n"},"EDUC.sol":{"content":"pragma solidity ^0.8.7;\r\n\r\ncontract EducCoin {\r\n    mapping(address =\u003e uint) public balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint)) public allowance;\r\n    uint public totalSupply = 1000000000 * 10 ** 18; // Total supply of 1 billion tokens\r\n    string public name = \"EducCoin\";\r\n    string public symbol = \"EDUC\";\r\n    uint public decimals = 18;\r\n    address public owner = 0x430EC480fb02CA7742D7189aca6Bd52129C005DC;\r\n    address public donationWallet = 0x91a8C608cF41E6aA5b9ebc8a0aeb8501ab8E4583;\r\n    address public marketingWallet = 0xdE33F54e3415F0CC19e375d431f32EDB62f41FC2;\r\n    uint public donationFeePercentage = 2;\r\n    uint public marketingFeePercentage = 2;\r\n    uint public ownerFeePercentage = 1;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    \r\n    constructor() {\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view returns(uint) {\r\n        return balances[account];\r\n    }\r\n    \r\n    function transfer(address to, uint value) public returns(bool) {\r\n        uint fee = (value * (donationFeePercentage + marketingFeePercentage + ownerFeePercentage)) / 100;\r\n        uint amountAfterFees = value - fee;\r\n        \r\n        require(balanceOf(msg.sender) \u003e= value, \u0027balance too low\u0027);\r\n        \r\n        balances[to] += amountAfterFees;\r\n        balances[donationWallet] += (value * donationFeePercentage) / 100;\r\n        balances[marketingWallet] += (value * marketingFeePercentage) / 100;\r\n        balances[owner] += (value * ownerFeePercentage) / 100;\r\n        \r\n        balances[msg.sender] -= value;\r\n        \r\n        emit Transfer(msg.sender, to, amountAfterFees);\r\n        emit Transfer(msg.sender, donationWallet, (value * donationFeePercentage) / 100);\r\n        emit Transfer(msg.sender, marketingWallet, (value * marketingFeePercentage) / 100);\r\n        emit Transfer(msg.sender, owner, (value * ownerFeePercentage) / 100);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint value) public returns(bool) {\r\n        uint fee = (value * (donationFeePercentage + marketingFeePercentage + ownerFeePercentage)) / 100;\r\n        uint amountAfterFees = value - fee;\r\n        \r\n        require(balanceOf(from) \u003e= value, \u0027balance too low\u0027);\r\n        require(allowance[from][msg.sender] \u003e= value, \u0027allowance too low\u0027);\r\n        \r\n        balances[to] += amountAfterFees;\r\n        balances[donationWallet] += (value * donationFeePercentage) / 100;\r\n        balances[marketingWallet] += (value * marketingFeePercentage) / 100;\r\n        balances[owner] += (value * ownerFeePercentage) / 100;\r\n        \r\n        balances[from] -= value;\r\n        allowance[from][msg.sender] -= value;\r\n        \r\n        emit Transfer(from, to, amountAfterFees);\r\n        emit Transfer(from, donationWallet, (value * donationFeePercentage) / 100);\r\n        emit Transfer(from, marketingWallet, (value * marketingFeePercentage) / 100);\r\n        emit Transfer(from, owner, (value * ownerFeePercentage) / 100);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint value) public returns (bool) {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;   \r\n    }\r\n}\r\n"}}