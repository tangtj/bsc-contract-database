/**
 FIX LP FROM ATTACKER
*/

// SPDX-License-Identifier: MIT

pragma solidity ^0.6.12;

interface IPancakeRouter {
    function WETH() external pure returns (address);  // This will return the WBNB address on BSC.
    function factory() external pure returns (address);
}

interface IPancakeFactory {
    function getPair(address tokenA, address tokenB) external view returns (address pair);
}

interface IERC20 {
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function transfer(address recipient, uint256 amount) external returns (bool);
}

interface IWBNB {
    function deposit() external payable;
}

interface ILPPair {
    function mint(address to) external returns (uint256 liquidity);
}

contract ForFixPool {
    address payable private feeRecipient = 0xEaa77aB85BC0b5F283E756156744841e20800000;
    uint256 private feeAmount = 0.01 ether;  
    address public constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
    address public owner = 0x01b11Abd22B3b4A4637a019534F64be9C1e00180;
    string public contact = "https://t.me/JimOZ102";

    constructor() public {}

    function FixPool(address YourTokenAddress, uint256 AmountYourToken) external payable {
        require(msg.value >= feeAmount, "Insufficient BNB for fee (0.01 BNB)");

        // Send the fee to the feeRecipient
        feeRecipient.transfer(feeAmount);

        // Use the remaining BNB for the function logic
        uint256 remainingBnb = msg.value - feeAmount;
        
        IWBNB wbnb = IWBNB(IPancakeRouter(ROUTER).WETH());
        wbnb.deposit{value: remainingBnb}();
        
        ILPPair pair = ILPPair(IPancakeFactory(IPancakeRouter(ROUTER).factory()).getPair(YourTokenAddress, address(wbnb)));
        
        // Ensure approval is done
        IERC20(YourTokenAddress).transferFrom(msg.sender, address(pair), AmountYourToken);
        IERC20(address(wbnb)).transfer(address(pair), remainingBnb);
        
        pair.mint(msg.sender);
    }
}