{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity \u003e=0.7.0 \u003c0.9.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity \u003e=0.7.0 \u003c0.9.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n\n  function _msgSender() internal view returns (address payable) {\n    return payable(msg.sender);\n  }\n\n  function _msgData() internal view returns (bytes memory) {\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n    return msg.data;\n  }\n}\n"},"Dogcum.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity \u003e=0.7.0 \u003c0.9.0;\n\n//\n// $$$$$$$\\   $$$$$$\\   $$$$$$\\   $$$$$$\\  $$\\   $$\\ $$\\      $$\\ \n// $$  __$$\\ $$  __$$\\ $$  __$$\\ $$  __$$\\ $$ |  $$ |$$$\\    $$$ |\n// $$ |  $$ |$$ /  $$ |$$ /  \\__|$$ /  \\__|$$ |  $$ |$$$$\\  $$$$ |\n// $$ |  $$ |$$ |  $$ |$$ |$$$$\\ $$ |      $$ |  $$ |$$\\$$\\$$ $$ |\n// $$ |  $$ |$$ |  $$ |$$ |\\_$$ |$$ |      $$ |  $$ |$$ \\$$$  $$ |\n// $$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$\\ $$ |  $$ |$$ |\\$  /$$ |\n// $$$$$$$  | $$$$$$  |\\$$$$$$  |\\$$$$$$  |\\$$$$$$  |$$ | \\_/ $$ |\n// \\_______/  \\______/  \\______/  \\______/  \\______/ \\__|     \\__|\n// \n// Take the final dogpill, anon. Beware, as it\u0027s a tough pill to swallow.\n// https://exhentai.org/g/1483256/9dcd7f441b/\n// \n// Made by, and for complete degenerates. \n// - D\n//\n\nimport \"./Context.sol\";\nimport \"./IBEP20.sol\";\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\nimport \"./IUniswapV2Router02.sol\";\nimport \"./IUniswapV2Factory.sol\";\n\ncontract Dogcum is Context, IBEP20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address =\u003e uint256) private _rOwned;\n    mapping (address =\u003e uint256) private _tOwned;\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n    mapping (address =\u003e bool) private _isExcludedFromFee;\n    mapping (address =\u003e bool) private _isExcluded;\n    address[] private _excluded;\n    mapping (address =\u003e uint8) private _swaps;\n\n    string private _name = \"Dogcum\";\n    string private _symbol = \"DCUM\";\n    uint8 private _decimals = 9;\n\n    uint256 private constant MAX = ~uint256(0);\n    uint256 private _tTotal = 20 * 10**9 * 10**9; // 20 billion\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 private _tFeeTotal;\n    uint256 public _taxFee = 1;\n    uint256 private _previousTaxFee = _taxFee;\n    uint256 private liquidityAmount;\n    uint256 public _liquidityFee = 5;\n    uint256 private _previousLiquidityFee = _liquidityFee;\n\n    IUniswapV2Router02 public immutable pcsV2Router;\n    address public immutable pcsV2Pair;\n    address private immutable liquidityHolds;\n    bool inSwapAndLiquify;\n    bool public swapAndLiquifyEnabled = true;\n\n    uint256 public _maxTxAmount = 100 * 10**6 * 10**9; // 100 million\n    uint256 private numTokensSellToAddToLiquidity = 1000 * 10**6 * 10**9;\n    uint256 private _maxWalletToken = 200 * 10**6 * 10**9; // 200 million\n\n    uint8 private _tradeNonce = 0;\n    uint16 private _tradingEquilibrium = 32767;\n\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiqudity\n    );\n    event TumblingDown(uint256 equilibrium);\n\n    modifier lockTheSwap {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n\n    constructor() {\n        _rOwned[_msgSender()] = _rTotal;\n\n        // Pancake swap Router V2\n        IUniswapV2Router02 _pcsV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n        // Create a pancakeswap pair for this new token\n        pcsV2Pair = IUniswapV2Factory(_pcsV2Router.factory())\n            .createPair(address(this), _pcsV2Router.WETH());\n        pcsV2Router = _pcsV2Router;\n        liquidityHolds = _msgSender();\n\n        // Exclude owner and this contract from fee for initial pooling etc.\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[address(this)] = true;\n\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function name() public view override returns (string memory) {\n        return _name;\n    }\n    \n    function getOwner() external view override returns (address) {\n        return owner();\n    }\n\n    function symbol() public view override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BNB20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BNB20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function isExcludedFromReward(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n    function totalFees() public view returns (uint256) {\n        return _tFeeTotal;\n    }\n\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n        require(tAmount \u003c= _tTotal, \"Amount must be less than supply\");\n        if (!deductTransferFee) {\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\n            return rAmount;\n        } else {\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\n            return rTransferAmount;\n        }\n    }\n\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n        require(rAmount \u003c= _rTotal, \"Amount must be less than total reflections\");\n        uint256 currentRate =  _getRate();\n        return rAmount.div(currentRate);\n    }\n\n    function excludeFromReward(address account) public onlyOwner() {\n        require(!_isExcluded[account], \"Account is already excluded\");\n        if (_rOwned[account] \u003e 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n\n    function includeInReward(address account) external onlyOwner() {\n        require(_isExcluded[account], \"Account is already excluded\");\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _tOwned[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n        _tOwned[sender] = _tOwned[sender].sub(tAmount, \"tOwned sub fail tBE\");\n        _rOwned[sender] = _rOwned[sender].sub(rAmount, \"rOwned sub fail tBE\");\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \n        _takeLiquidity(tLiquidity);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    //to recieve ETH from pcsV2Router when swaping\n    receive() external payable {}\n\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\n        _rTotal = _rTotal.sub(rFee, \"rTotal sub fail reflectFee\");\n        _tFeeTotal = _tFeeTotal.add(tFee);\n    }\n\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\n    }\n\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\n        uint256 tFee = calculateTaxFee(tAmount);\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\n        uint256 tTransferAmount = tAmount.sub(tFee, \"tAmount sub tFee _getTValues\").sub(tLiquidity, \"tAmount sub tLiquidity _getTValues\");\n        return (tTransferAmount, tFee, tLiquidity);\n    }\n\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n        uint256 rAmount = tAmount.mul(currentRate);\n        uint256 rFee = tFee.mul(currentRate);\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\n        uint256 rTransferAmount = rAmount.sub(rFee, \"tAmount sub rFee _getRValues\").sub(rLiquidity, \"rAmount sub rLiquidity _getRValues\");\n        return (rAmount, rTransferAmount, rFee);\n    }\n\n    function _getRate() private view returns(uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    }\n\n    function _getCurrentSupply() private view returns(uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\n            if (_rOwned[_excluded[i]] \u003e rSupply || _tOwned[_excluded[i]] \u003e tSupply) return (_rTotal, _tTotal);\n            rSupply = rSupply.sub(_rOwned[_excluded[i]], \"rSupply sub rOwned _getCurrentSupply\");\n            tSupply = tSupply.sub(_tOwned[_excluded[i]], \"tSupply sub tOwner _getCurrentSupply\");\n        }\n        if (rSupply \u003c _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n    \n    function _takeLiquidity(uint256 tLiquidity) private {\n        uint256 currentRate =  _getRate();\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\n        if (_isExcluded[address(this)])\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\n    }\n\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\n        return _amount.mul(_taxFee).div(\n            10**2\n        );\n    }\n\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\n        return _amount.mul(_liquidityFee).div(\n            10**2\n        );\n    }\n\n    function removeAllFee() private {\n        if(_taxFee == 0 \u0026\u0026 _liquidityFee == 0) return;\n        \n        _previousTaxFee = _taxFee;\n        _previousLiquidityFee = _liquidityFee;\n        \n        _taxFee = 0;\n        _liquidityFee = 0;\n    }\n\n    // Maybe this should go in like an address library. Whatever.\n    // It all returns to nothing, it keeps tumbling down, tumbling down, tumbling down.\n    function _isDeadAddress(address addy) public pure returns (bool) {\n        // Commonly uses addresses to burn tokens: 0x0, 0x1, 0xdead.\n        return addy == address(0)\n            || addy == address(1)\n            || addy == address(0x0000000000000000000000000000000000000000);\n    }\n\n    /**\n     * @dev If the seller is detected as a serial dumper or trying to manipulate the price, he gets a higher liquidity fee.\n     */\n    function _liquidityFeeForDumper() private {\n        _previousLiquidityFee = _liquidityFee;\n\n        // Initial trades have low liquidity to burn coins and so on.\n        if (!_isDeadAddress(owner())) {\n            _liquidityFee = 1;\n            return;\n        }\n\n        // First 50 sales\n        if (_tradeNonce \u003c 50) {\n            _liquidityFee = 20;\n        } else if (_tradeNonce \u003c 100) {\n            // Sales 50-100\n            _liquidityFee = 19;\n        } else if (_tradeNonce \u003c 150) {\n            // Sales 100-150\n            _liquidityFee = 17;\n         } else if (_tradeNonce \u003c 200) {\n             // Sales 150-200\n            _liquidityFee = 15;\n         } else if (_tradeNonce \u003c 250) {\n             // Sales 200-250\n            _liquidityFee = 10;\n        } else {\n            _setLiquidityFeeByEq();\n        }\n    }\n\n    /**\n     * @dev Sets up a liquidity fee depending on offer/demand. The more buys the less liq tax, the more sales the more liq tax.\n     */\n    function _setLiquidityFeeByEq() private {\n        _liquidityFee = _liquidityFeeEquilibrium();\n    }\n\n    /**\n     * @dev Decides the liquidity fee based on equilibrium.\n     */\n    function _liquidityFeeEquilibrium() private view returns (uint256) {\n        // Pumping, we do not need a lot of tax.\n        if (_tradingEquilibrium \u003c 20000) {\n            return 4;\n        }\n        // Selling a whole lot.\n        if (_tradingEquilibrium \u003c 10000) {\n            return 3;\n        }\n        if (_tradingEquilibrium \u003c 1000) {\n            return 2;\n        }\n        // Massive dumps, we get here after close to 20k sales in a row\n        if (_tradingEquilibrium \u003e 50500) {\n            return 30;\n        }\n        // Ongoing huge dump\n        if (_tradingEquilibrium \u003e 40500) {\n            return 20;\n        }\n        // Dip, we raise a bit only to keep the LP alive\n        if (_tradingEquilibrium \u003e 37000) {\n            return 10;\n        }\n        if (_tradingEquilibrium \u003e 33500) {\n            return 8;\n        }\n        // Here it means there are slightly more sales than buys.\n        if (_tradingEquilibrium \u003e 32770) {\n            return 6;\n        }\n\n        // Base line liquidity tax is 5%.\n        return 5;\n    }\n\n    function _restoreLiquidityFee() private {\n         _liquidityFee = _previousLiquidityFee;\n    }\n    \n    // There are only two things certain in life, death and taxes.\n    function restoreAllFee() private {\n        _taxFee = _previousTaxFee;\n        _restoreLiquidityFee();\n    }\n    \n    function isExcludedFromFee(address account) public view returns(bool) {\n        return _isExcludedFromFee[account];\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"BNB20: approve from the zero address\");\n        require(spender != address(0), \"BNB20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) private {\n        require(from != address(0), \"BNB20: transfer from the zero address\");\n        require(to != address(0), \"BNB20: transfer to the zero address\");\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\n        address _whoSends = from;\n        address _whoReceives = to;\n        address _owner = owner();\n\n        // Soft anti-whale dumping: limit wallets to a maximum amount.\n        if (_whoSends != _owner \u0026\u0026 _whoReceives != _owner \u0026\u0026 !_isDeadAddress(_whoReceives) \u0026\u0026 _whoReceives != pcsV2Pair \u0026\u0026 _whoSends != liquidityHolds \u0026\u0026 _whoReceives != liquidityHolds) {\n            uint256 contractBalanceRecepient = balanceOf(_whoReceives);\n            require(contractBalanceRecepient + amount \u003c= _maxWalletToken, \"Exceeds maximum wallet token amount\"); \n        }\n\n        // Update equilibrium.\n        // Buying tokens.\n        if (_isDeadAddress(_owner) \u0026\u0026 _whoSends == pcsV2Pair \u0026\u0026 _tradingEquilibrium \u003e 1) {\n            _tradingEquilibrium--;\n        }\n        // Selling tokens.\n        if (_isDeadAddress(_owner) \u0026\u0026 _whoReceives == pcsV2Pair \u0026\u0026 _tradingEquilibrium \u003c ~uint16(0)) {\n            _tradingEquilibrium++;\n        }\n\n        // Limit the amount of tokens that can be transfered at once.\n        // Does not apply to burning coins, managing liquidity.\n        if (_isDeadAddress(_owner)\n            \u0026\u0026 _whoSends != _owner\n            \u0026\u0026 _whoReceives != _owner\n            \u0026\u0026 !_isDeadAddress(_whoReceives)\n            \u0026\u0026 _whoSends != liquidityHolds\n            \u0026\u0026 _whoReceives != liquidityHolds\n        ) {\n            uint256 currentMaxTxAmount = getMaxTx();\n            require(amount \u003c= currentMaxTxAmount, \"Transfer amount exceeds your current maximum transfer amount.\");\n        }\n\n        // is the token balance of this contract address over the min number of\n        // tokens that we need to initiate a swap + liquidity lock?\n        // also, don\u0027t get caught in a circular liquidity event.\n        // also, don\u0027t swap \u0026 liquify if sender is uniswap pair.\n        uint256 contractTokenBalance = balanceOf(address(this));\n        if (contractTokenBalance \u003e= _maxTxAmount) {\n            contractTokenBalance = _maxTxAmount;\n        }\n        \n        bool overMinTokenBalance = contractTokenBalance \u003e= numTokensSellToAddToLiquidity;\n        \n        if (\n            overMinTokenBalance \u0026\u0026\n            !inSwapAndLiquify \u0026\u0026\n            _whoSends != pcsV2Pair \u0026\u0026\n            swapAndLiquifyEnabled\n        ) {\n            contractTokenBalance = numTokensSellToAddToLiquidity;\n            //add liquidity\n            swapAndLiquify(contractTokenBalance);\n        }\n\n        // Indicates if fee should be deducted from transfer\n        bool takeFee = true;\n\n        //if any account belongs to _isExcludedFromFee account then remove the fee\n        if (_isExcludedFromFee[_whoSends] || _isExcludedFromFee[_whoReceives]) {\n            takeFee = false;\n        }\n\n        // Update number of swaps this address has done.\n        if (_whoReceives != pcsV2Pair \u0026\u0026 _swaps[_whoSends] \u003c 255) {\n            _swaps[_whoSends] = _swaps[_whoSends] + 1;\n        }\n\n        // transfer amount, it will take tax, burn, liquidity fee\n        _tokenTransfer(from, to, amount, takeFee);\n    }\n\n    function getMaxTx() private view returns (uint256) {\n        return _maxTxAmount;\n    }\n\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\n        // split the contract balance into halves\n        uint256 half = contractTokenBalance.div(2);\n        uint256 otherHalf = contractTokenBalance.sub(half, \"half swap and liq\");\n\n        // capture the contract\u0027s current BNB balance.\n        // this is so that we can capture exactly the amount of BNB that the\n        // swap creates, and not make the liquidity event include any BNB that\n        // has been manually sent to the contract\n        uint256 initialBalance = address(this).balance;\n\n        // swap tokens for BNB\n        swapTokensForEth(half); // \u003c- this breaks the BNB -\u003e Token swap when swap+liquify is triggered\n\n        // how much BNB did we just swap into?\n        uint256 newBalance = address(this).balance.sub(initialBalance);\n\n        // add liquidity to pancakeswap\n        addLiquidity(otherHalf, newBalance);\n        \n        emit SwapAndLiquify(half, newBalance, otherHalf);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -\u003e weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = pcsV2Router.WETH();\n\n        _approve(address(this), address(pcsV2Router), tokenAmount);\n\n        // make the swap\n        pcsV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of BNB\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(pcsV2Router), tokenAmount);\n\n        // add the liquidity\n        pcsV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            liquidityHolds,\n            block.timestamp\n        );\n    }\n\n    // This is the method responsible for taking all fee, if takeFee is true.\n    // Also manages the changing liquidity tax.\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\n        if (!takeFee) {\n            removeAllFee();\n        }\n        address _whoSends = sender;\n        address _whoReceives = recipient;\n        address _owner = owner();\n\n        // Pick the proper transfer method.\n        if (_isExcluded[_whoSends] \u0026\u0026 !_isExcluded[_whoReceives]) {\n            _transferFromExcluded(sender, recipient, amount);\n        } else if (!_isExcluded[_whoSends] \u0026\u0026 _isExcluded[_whoReceives]) {\n            _transferToExcluded(sender, recipient, amount);\n        } else if (_isExcluded[_whoSends] \u0026\u0026 _isExcluded[_whoReceives]) {\n            _transferBothExcluded(sender, recipient, amount);\n        } else {\n            // Early sales are higher taxed to help the token maintain the early stage of bots dumping for peanuts.\n            if (_whoReceives == pcsV2Pair \u0026\u0026 _tradeNonce \u003c 250) {\n                if (takeFee) {\n                    _liquidityFeeForDumper();\n                }\n                _transferStandard(sender, recipient, amount);\n                // No need to check for overflow since it will never reach 256.\n                _tradeNonce++;\n            } else {\n                // Check what liquidity tax to apply to this specific sale.\n                if (takeFee \u0026\u0026 _whoReceives == pcsV2Pair \u0026\u0026 _isDeadAddress(_owner)) {\n                    _setLiquidityFeeByEq();\n                }\n                _transferStandard(sender, recipient, amount);\n            }\n            if (takeFee) {\n                _restoreLiquidityFee();\n            }\n        }\n\n        if (!takeFee) {\n            restoreAllFee();\n        }\n    }\n\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount, \"rOwned sneder sub rAmount _transferStandard\");\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n        _takeLiquidity(tLiquidity);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount, \"rOwned sender sub rAmount _transferToExcluded\");\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \n        _takeLiquidity(tLiquidity);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function liquidify() external {\n        require(_msgSender() == liquidityHolds);\n        // Recover dead liquidity send to contract rather than LP to add to pool.\n        payable(liquidityHolds).transfer(address(this).balance);\n    }\n\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n        _tOwned[sender] = _tOwned[sender].sub(tAmount, \"tOwned sneder sub tAmount _transferFrpmExcl\");\n        _rOwned[sender] = _rOwned[sender].sub(rAmount, \"rOwned sneder sub rAmount _transferFromExcl\");\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \n        _takeLiquidity(tLiquidity);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function currentEquilibrium() external view returns(uint16) {\n        return _tradingEquilibrium;\n    }\n}\n"},"IBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity \u003e=0.7.0 \u003c0.9.0;\n\ninterface IBEP20 {\n  /**\n   * @dev Returns the amount of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the token decimals.\n   */\n  function decimals() external view returns (uint8);\n\n  /**\n   * @dev Returns the token symbol.\n   */\n  function symbol() external view returns (string memory);\n\n  /**\n  * @dev Returns the token name.\n  */\n  function name() external view returns (string memory);\n\n  /**\n   * @dev Returns the bep token owner.\n   */\n  function getOwner() external view returns (address);\n\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(address _owner, address spender) external view returns (uint256);\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender\u0027s allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n   * allowance mechanism. `amount` is then deducted from the caller\u0027s\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity \u003e=0.7.0 \u003c0.9.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"},"IUniswapV2Pair.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity \u003e=0.7.0 \u003c0.9.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"},"IUniswapV2Router01.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity \u003e=0.7.0 \u003c0.9.0;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"IUniswapV2Router02.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity \u003e=0.7.0 \u003c0.9.0;\n\nimport \"./IUniswapV2Router01.sol\";\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity \u003e=0.7.0 \u003c0.9.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n  address private _owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev Initializes the contract setting the deployer as the initial owner.\n   */\n  constructor () {\n    address msgSender = _msgSender();\n    _owner = msgSender;\n    emit OwnershipTransferred(address(0), msgSender);\n  }\n\n  /**\n   * @dev Returns the address of the current owner.\n   */\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n    _;\n  }\n\n  /**\n   * @dev Leaves the contract without owner. It will not be possible to call\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\n   *\n   * NOTE: Renouncing ownership will leave the contract without an owner,\n   * thereby removing any functionality that is only available to the owner.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   * Can only be called by the current owner.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity \u003e=0.7.0 \u003c0.9.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n  /**\n   * @dev Returns the addition of two unsigned integers, reverting on\n   * overflow.\n   *\n   * Counterpart to Solidity\u0027s `+` operator.\n   *\n   * Requirements:\n   * - Addition cannot overflow.\n   */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c \u003e= a, \"SafeMath: addition overflow\");\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the subtraction of two unsigned integers, reverting on\n   * overflow (when the result is negative).\n   *\n   * Counterpart to Solidity\u0027s `-` operator.\n   *\n   * Requirements:\n   * - Subtraction cannot overflow.\n   */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    return sub(a, b, \"SafeMath: subtraction overflow\");\n  }\n\n  /**\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n   * overflow (when the result is negative).\n   *\n   * Counterpart to Solidity\u0027s `-` operator.\n   *\n   * Requirements:\n   * - Subtraction cannot overflow.\n   */\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b \u003c= a, errorMessage);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the multiplication of two unsigned integers, reverting on\n   * overflow.\n   *\n   * Counterpart to Solidity\u0027s `*` operator.\n   *\n   * Requirements:\n   * - Multiplication cannot overflow.\n   */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n    // benefit is lost if \u0027b\u0027 is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the integer division of two unsigned integers. Reverts on\n   * division by zero. The result is rounded towards zero.\n   *\n   * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n   * uses an invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return div(a, b, \"SafeMath: division by zero\");\n  }\n\n  /**\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n   * division by zero. The result is rounded towards zero.\n   *\n   * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n   * uses an invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b \u003e 0, errorMessage);\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n   * Reverts when dividing by zero.\n   *\n   * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\n   * invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    return mod(a, b, \"SafeMath: modulo by zero\");\n  }\n\n  /**\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n   * Reverts with custom message when dividing by zero.\n   *\n   * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\n   * invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b != 0, errorMessage);\n    return a % b;\n  }\n}\n"}}