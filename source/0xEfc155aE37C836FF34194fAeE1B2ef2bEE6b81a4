{"ihc_time_lock.sol":{"content":"pragma solidity ^0.5.16;\nimport {IHC} from \u0027ihc_token.sol\u0027;\n\ncontract IHC_TIME_LOCK {\n    uint public end;\n    address payable public owner;\n    address public ihcTokenAddress;\n\n    constructor(address payable _owner, uint _daysAfter) public payable {\n        require(_owner != address(0),\"_owner: zero address!\");\n        end = block.timestamp + (_daysAfter * 1 days);\n        owner = _owner;\n        ihcTokenAddress = 0x86a53fcd199212FEa44FA7e16EB1f28812be911D;\n    }\n\n    function deposit(uint amount) external returns(bool) {\n        return IHC(ihcTokenAddress).transferFrom(msg.sender, address(this), amount);\n    }\n    \n    function withdraw(uint amount) external returns(bool) {\n        require(msg.sender == owner, \u0027only owner\u0027);\n        require(block.timestamp \u003e= end, \u0027too early\u0027);\n        return IHC(ihcTokenAddress).transfer(owner, amount);\n    }\n    \n    function getEndOfTime() external view returns (uint256) {\n        return end;\n    }\n    \n    function getOwner() external view returns (address payable) {\n        return owner;\n    }\n    \n    \n}\n"},"ihc_token.sol":{"content":"pragma solidity 0.5.16;\n\ninterface IBEP20 {\n  /**\n   * @dev Returns the amount of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the token decimals.\n   */\n  function decimals() external view returns (uint8);\n\n  /**\n   * @dev Returns the token symbol.\n   */\n  function symbol() external view returns (string memory);\n\n  /**\n  * @dev Returns the token name.\n  */\n  function name() external view returns (string memory);\n\n  /**\n   * @dev Returns the bep token owner.\n   */\n  function getOwner() external view returns (address);\n\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(address _owner, address spender) external view returns (uint256);\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender\u0027s allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n   * allowance mechanism. `amount` is then deducted from the caller\u0027s\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n  // Empty internal constructor, to prevent people from mistakenly deploying\n  // an instance of this contract, which should be used via inheritance.\n  constructor () internal { }\n\n  function _msgSender() internal view returns (address payable) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view returns (bytes memory) {\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n    return msg.data;\n  }\n}\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n  /**\n   * @dev Returns the addition of two unsigned integers, reverting on\n   * overflow.\n   *\n   * Counterpart to Solidity\u0027s `+` operator.\n   *\n   * Requirements:\n   * - Addition cannot overflow.\n   */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c \u003e= a, \"SafeMath: addition overflow\");\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the subtraction of two unsigned integers, reverting on\n   * overflow (when the result is negative).\n   *\n   * Counterpart to Solidity\u0027s `-` operator.\n   *\n   * Requirements:\n   * - Subtraction cannot overflow.\n   */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    return sub(a, b, \"SafeMath: subtraction overflow\");\n  }\n\n  /**\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n   * overflow (when the result is negative).\n   *\n   * Counterpart to Solidity\u0027s `-` operator.\n   *\n   * Requirements:\n   * - Subtraction cannot overflow.\n   */\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b \u003c= a, errorMessage);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the multiplication of two unsigned integers, reverting on\n   * overflow.\n   *\n   * Counterpart to Solidity\u0027s `*` operator.\n   *\n   * Requirements:\n   * - Multiplication cannot overflow.\n   */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n    // benefit is lost if \u0027b\u0027 is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the integer division of two unsigned integers. Reverts on\n   * division by zero. The result is rounded towards zero.\n   *\n   * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n   * uses an invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return div(a, b, \"SafeMath: division by zero\");\n  }\n\n  /**\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n   * division by zero. The result is rounded towards zero.\n   *\n   * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n   * uses an invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b \u003e 0, errorMessage);\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n   * Reverts when dividing by zero.\n   *\n   * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\n   * invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    return mod(a, b, \"SafeMath: modulo by zero\");\n  }\n\n  /**\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n   * Reverts with custom message when dividing by zero.\n   *\n   * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\n   * invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b != 0, errorMessage);\n    return a % b;\n  }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n  address private _owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev Initializes the contract setting the deployer as the initial owner.\n   */\n  constructor () internal {\n    address msgSender = _msgSender();\n    _owner = msgSender;\n    emit OwnershipTransferred(address(0), msgSender);\n  }\n\n  /**\n   * @dev Returns the address of the current owner.\n   */\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n    _;\n  }\n\n  /**\n   * @dev Leaves the contract without owner. It will not be possible to call\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\n   *\n   * NOTE: Renouncing ownership will leave the contract without an owner,\n   * thereby removing any functionality that is only available to the owner.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   * Can only be called by the current owner.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\ncontract IHC is Context, IBEP20, Ownable {\n    using SafeMath for uint256;\n    \n    mapping (address =\u003e uint256) private _balances;\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n    \n    address[] private _excludedTransactionFee;\n    mapping (address =\u003e bool) private _isExcludedTransactionFee;\n    \n    uint256 private _totalSupply;\n    uint8 private _decimals;\n    string private _symbol;\n    string private _name;\n    \n    uint256 private end;\n    uint256 private burnAmount;\n    bool private burnFlag;\n    uint256 private transactionFeePercent;\n    address public transactionPoolAddress;\n    address payable public yieldFarmPoolAddress;\n    address payable public loanPoolAddress;\n    uint private apy;\n    uint private loanFeePercent;\n    uint private loanSizePercent;\n    uint private yieldFarmMinAmount;\n    uint private loanMinAmount;\n    \n    constructor() public {\n        _name = \"Inflation Hedging Coin\";\n        _symbol = \"IHC\";\n        _decimals = 18;\n        _totalSupply = 1000000000000 * 10 ** 18;\n        _balances[msg.sender] = _totalSupply;\n        \n        end = block.timestamp;\n        burnFlag = false;\n        transactionFeePercent = 0;\n        apy = 8;\n        loanFeePercent = 10;\n        loanSizePercent = 70;\n        yieldFarmMinAmount= 100000;\n        loanMinAmount= 100000;\n        \n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n    \n    /**\n    * @dev Returns the bep token owner.\n    */\n    function getOwner() external view returns (address) {\n        return owner();\n    }\n    \n    /**\n    * @dev Returns the token decimals.\n    */\n    function decimals() external view returns (uint8) {\n        return _decimals;\n    }\n    \n    /**\n    * @dev Returns the token symbol.\n    */\n    function symbol() external view returns (string memory) {\n        return _symbol;\n    }\n    \n    /**\n    * @dev Returns the token name.\n    */\n    function name() external view returns (string memory) {\n        return _name;\n    }\n    \n    /**\n    * @dev See {BEP20-totalSupply}.\n    */\n    function totalSupply() external view returns (uint256) {\n        return _totalSupply;\n    }\n    \n    /**\n    * @dev See {BEP20-balanceOf}.\n    */\n    function balanceOf(address account) external view returns (uint256) {\n        return _balances[account];\n    }\n    \n    /**\n    * @dev See apy\n    */\n    function getApy() external view returns (uint) {\n        return apy;\n    }\n    \n    /**\n    * @dev See loan fee percent\n    */\n    function getLoanFeePercent() external view returns (uint) {\n        return loanFeePercent;\n    }\n    \n    /**\n    * @dev See loan size percent\n    */\n    function getLoanSizePercent() external view returns (uint) {\n        return loanSizePercent;\n    }\n    \n    /**\n    * @dev See transaction pool address\n    */\n    function getTransactionPoolAddress() external view returns (address) {\n        return transactionPoolAddress;\n    }\n    \n    /**\n    * @dev See yield farm pool address.\n    */\n    function getYieldFarmPoolAddress() external view returns (address payable) {\n        return yieldFarmPoolAddress;\n    }\n    \n    /**\n    * @dev See loan pool address.\n    */\n    function getLoanPoolAddress() external view returns (address payable) {\n        return loanPoolAddress;\n    }\n    \n    /**\n    * @dev see end of time.\n    */\n    function getEndOfTime() external view returns (uint256) {\n        return end;\n    }\n    \n    /**\n    * @dev See transactionFeePercent.\n    */\n    function getTransactionFeePercent() external view returns (uint) {\n        return transactionFeePercent;\n    }\n    \n    /**\n    * @dev See burn amount.\n    */\n    function getBurnAmount() external view returns (uint256) {\n        return burnAmount;\n    }\n    \n    /**\n    * @dev See burnFlag.\n    */\n    function getBurnFlag() external view returns (bool) {\n        return burnFlag;\n    }\n    \n    /**\n    * @dev See isExcludedTransactionFee.\n    */\n    function isExcludedTransactionFee(address _checkAddress) external view returns (bool) {\n        return _isExcludedTransactionFee[_checkAddress];\n    }\n    \n    /**\n    * @dev See yield farm min amount.\n    */\n    function getYieldFarmMinAmount() external view returns (uint256) {\n        return yieldFarmMinAmount;\n    }\n    \n    /**\n    * @dev See loan min amount.\n    */\n    function getLoanMinAmount() external view returns (uint256) {\n        return loanMinAmount;\n    }\n    \n    /**\n    * @dev See {BEP20-transfer}.\n    *\n    * Requirements:\n    *\n    * - `recipient` cannot be the zero address.\n    * - the caller must have a balance of at least `amount`.\n    */\n    function transfer(address recipient, uint256 amount) external returns (bool) {\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\n        require(transactionPoolAddress != address(0), \"BEP20: transfer to the zero address\");\n    \n        uint256 sendAmount = 0;\n        if (_isExcludedTransactionFee[recipient] == true) {\n            sendAmount = amount;\n        }else if (_isExcludedTransactionFee[msg.sender] == true) {\n            sendAmount = amount;\n        }else{\n            uint256 feeAmount = (amount.mul(transactionFeePercent)).div(100);\n            sendAmount = amount.sub(feeAmount);\n            \n            _transfer(_msgSender(), transactionPoolAddress, feeAmount);\n        }\n    \n        _transfer(_msgSender(), recipient, sendAmount);\n        return true;\n    }\n\n    /**\n    * @dev See {BEP20-allowance}.\n    */\n    function allowance(address owner, address spender) external view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n    \n    /**\n    * @dev See {BEP20-approve}.\n    *\n    * Requirements:\n    *\n    * - `spender` cannot be the zero address.\n    */\n    function approve(address spender, uint256 amount) external returns (bool) {\n        require(spender != address(0), \"BEP20: spender cannot be the zero address\");\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n    \n    /**\n    * @dev See {BEP20-transferFrom}.\n    *\n    * Emits an {Approval} event indicating the updated allowance. This is not\n    * required by the EIP. See the note at the beginning of {BEP20};\n    *\n    * Requirements:\n    * - `sender` and `recipient` cannot be the zero address.\n    * - `sender` must have a balance of at least `amount`.\n    * - the caller must have allowance for `sender`\u0027s tokens of at least\n    * `amount`.\n    */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\n        uint256 sendAmount = 0;\n        if (_isExcludedTransactionFee[recipient] == true) {\n            sendAmount = amount;\n        }else if (_isExcludedTransactionFee[sender] == true) {\n            sendAmount = amount;\n        }else{\n            uint256 feeAmount = (amount.mul(transactionFeePercent)).div(100);\n            sendAmount = amount.sub(feeAmount);\n            \n            _transfer(sender, transactionPoolAddress, feeAmount);\n        }\n    \n        _transfer(sender, recipient, sendAmount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(sendAmount, \"BEP20: transfer amount exceeds allowance\"));\n        return true;\n    }\n    \n    /**\n    * @dev Atomically increases the allowance granted to `spender` by the caller.\n    *\n    * This is an alternative to {approve} that can be used as a mitigation for\n    * problems described in {BEP20-approve}.\n    *\n    * Emits an {Approval} event indicating the updated allowance.\n    *\n    * Requirements:\n    *\n    * - `spender` cannot be the zero address.\n    */\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n    \n    /**\n    * @dev Atomically decreases the allowance granted to `spender` by the caller.\n    *\n    * This is an alternative to {approve} that can be used as a mitigation for\n    * problems described in {BEP20-approve}.\n    *\n    * Emits an {Approval} event indicating the updated allowance.\n    *\n    * Requirements:\n    *\n    * - `spender` cannot be the zero address.\n    * - `spender` must have allowance for the caller of at least\n    * `subtractedValue`.\n    */\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\n        return true;\n    }\n    \n    /**\n    * @dev set end time.\n    */\n    function setEndTime(uint256 timeInSec) external onlyOwner returns (uint256) {\n        end = block.timestamp.add(timeInSec);\n        burnFlag = true;\n        \n        return end;\n    }\n    \n    /**\n    * @dev set transaction fee percent.\n    */\n    function setTransactionFeePercent(uint256 newTransactionFeePercent) external onlyOwner returns (uint){\n        transactionFeePercent = newTransactionFeePercent;\n        return transactionFeePercent;\n    }\n    \n    /**\n    * @dev set apy.\n    */\n    function setApy(uint256 newApy) external onlyOwner returns (uint){\n        apy = newApy;\n        return apy;\n    }\n    \n    /**\n    * @dev set loan fee percent.\n    */\n    function setLoanFeePercent(uint256 newLoanFeePercent) external onlyOwner returns (uint){\n        loanFeePercent = newLoanFeePercent;\n        return loanFeePercent;\n    }\n    \n    /**\n    * @dev set loan size percent.\n    */\n    function setLoanSizePercent(uint256 newLoanSizePercent) external onlyOwner returns (uint){\n        loanSizePercent = newLoanSizePercent;\n        return loanSizePercent;\n    }\n    \n    /**\n    * @dev set set burn amount.\n    */\n    function setBurnAmount(uint256 newBurnAmount) external onlyOwner returns (uint256) {\n        burnAmount = newBurnAmount;\n        return burnAmount;\n    }\n  \n    /**\n    * @dev set transactionPoolAddress.\n    */\n    function setTransactionPoolAddress(address newTransactionPoolAddress) external onlyOwner returns (address) {\n        transactionPoolAddress = newTransactionPoolAddress;\n        return newTransactionPoolAddress;\n    }\n    \n  \n    /**\n    * @dev set address to exclude from transaction fee.\n    */\n    function setExcludedAddressOfTransactionFee(address newExcludedAddressTransactionFee) external onlyOwner returns (bool) {\n        if (_isExcludedTransactionFee[newExcludedAddressTransactionFee] == false) {\n            _isExcludedTransactionFee[newExcludedAddressTransactionFee] = true;\n            _excludedTransactionFee.push(newExcludedAddressTransactionFee);\n        }\n        return true;\n    }\n    \n    /**\n    * @dev delete address from transaction fee exclude list.\n    */\n    function popExcludedAddressOfTransactionFee(address oldExcludedAddressTransactionFee) external onlyOwner returns (bool) {\n        if (_isExcludedTransactionFee[oldExcludedAddressTransactionFee] == true) {\n            _isExcludedTransactionFee[oldExcludedAddressTransactionFee] = false;\n            \n            for (uint i = 0; i\u003c_excludedTransactionFee.length; i++){\n                if(_excludedTransactionFee[i] == oldExcludedAddressTransactionFee) {\n                    delete _excludedTransactionFee[i];\n                }\n            }\n            \n        }\n        return true;\n    }\n  \n    /**\n    * @dev set yield farm pool address.\n    */\n    function setYieldFarmPoolAddress(address payable newYieldFarmPoolAddress) external onlyOwner returns (address) {\n        yieldFarmPoolAddress = newYieldFarmPoolAddress;\n        return yieldFarmPoolAddress;\n    }\n  \n    /**\n    * @dev set loanPoolAddress.\n    */\n    function setLoanPoolAddress(address payable newLoanPoolAddress) external onlyOwner returns (address) {\n        loanPoolAddress = newLoanPoolAddress;\n        return loanPoolAddress;\n    }\n    \n    /**\n    * @dev set yield farm min amount.\n    */\n    function setYieldFarmMinAmount(uint256 newYieldFarmMinAmount) external onlyOwner returns (uint256) {\n        yieldFarmMinAmount = newYieldFarmMinAmount;\n        return yieldFarmMinAmount;\n    }\n    \n    /**\n    * @dev set loanMinAmount.\n    */\n    function setLoanMinAmount(uint256 newLoanMinAmount) external onlyOwner returns (uint256) {\n        loanMinAmount = newLoanMinAmount;\n        return loanMinAmount;\n    }\n    \n    /**\n    * @dev set burn.\n    */\n    function burn() external onlyOwner returns (bool) {\n        _burn(_msgSender(), burnAmount);\n        burnFlag = false;\n        return true;\n    }\n    \n    \n    /**\n    * @dev Moves tokens `amount` from `sender` to `recipient`.\n    *\n    * This is internal function is equivalent to {transfer}, and can be used to\n    * e.g. implement automatic token fees, slashing mechanisms, etc.\n    *\n    * Emits a {Transfer} event.\n    *\n    * Requirements:\n    *\n    * - `sender` cannot be the zero address.\n    * - `recipient` cannot be the zero address.\n    * - `sender` must have a balance of at least `amount`.\n    */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\n        \n        _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        \n        emit Transfer(sender, recipient, amount);\n    }\n    \n    /**\n    * @dev Destroys `amount` tokens from `account`, reducing the\n    * total supply.\n    *\n    * Emits a {Transfer} event with `to` set to the zero address.\n    *\n    * Requirements\n    *\n    * - `account` cannot be the zero address.\n    * - `account` must have at least `amount` tokens.\n    */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"BEP20: burn from the zero address\");\n        require(msg.sender == owner(), \u0027only owner\u0027);\n        require(block.timestamp \u003e= end, \u0027too early\u0027);\n        require(burnFlag == true, \u0027Burn function is locked\u0027);\n        \n        _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n    \n    /**\n    * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n    *\n    * This is internal function is equivalent to `approve`, and can be used to\n    * e.g. set automatic allowances for certain subsystems, etc.\n    *\n    * Emits an {Approval} event.\n    *\n    * Requirements:\n    *\n    * - `owner` cannot be the zero address.\n    * - `spender` cannot be the zero address.\n    */\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"BEP20: approve from the zero address\");\n        require(spender != address(0), \"BEP20: approve to the zero address\");\n        \n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    \n}"}}