
// File: Mercury/BiBiToMercuryRankingList.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.8;

import "@openzeppelin/contracts@4.9.0/access/Ownable.sol";

import "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol";


contract BiBiDAO is Ownable {
    
    event BiBiDAOAdded(address indexed bibiDAO);

    event BiBiDAORemoved(address indexed bibiDAO);

    mapping(address => bool) public bibiDAOMap;

    function addBiBiDAO(address bibiDAO) external onlyOwner {
        bibiDAOMap[bibiDAO] = true;
        emit BiBiDAOAdded(bibiDAO);
    }

    function removeBiBiDAO(address bibiDAO) external onlyOwner {
        delete bibiDAOMap[bibiDAO];
        emit BiBiDAORemoved(bibiDAO);
    }

    modifier onlyBiBiDAO() {
        require(bibiDAOMap[_msgSender()], "BiBiDAO: caller is not the BiBiDAO");
        _;
    }
}

contract BiBiToMercuryRankingList is BiBiDAO {

    struct RichData{
        address user;
        uint256 price;
    }

    struct LastBuyData{
        address[20] sharesSubject;
        uint8 index;
    }

    address public token;
    uint256 public richBasePrice;
    RichData[20] public richList;
    LastBuyData public lastBuyData;

    constructor(address _token) {
        token = _token;
        richBasePrice = 10000000000 * 10**18;
    }

    function getRichList(uint8 index) public view returns(address user, uint256 price){
        RichData memory richData = richList[index];
        user = richData.user;
        if(user == address(0)) {
            user = address(this);
        }
        price = richData.price;
        if(price == 0) {
            price = richBasePrice;
        }
        
    }

    function getRichListAll() external view returns(address[] memory userList, uint256[] memory priceList) {
        userList = new address[](richList.length);
        priceList = new uint256[](richList.length);
        
        for(uint8 index=0; index<richList.length; index++) {
            (address user, uint256 price) = getRichList(index);
            userList[index] = user;
            priceList[index] = price;
        }
    }

    function getBuyRichListPrice(uint8 index) public view returns(uint256) {
        uint256 price = richList[index].price;
        if(price == 0) {
            price = richBasePrice;
        }

        return price+(price/5);
    }

    function buyRichList(uint8 index, uint256 price) external {
        require(index < 20, "Mercury: Index error");
        (address user, ) = getRichList(index);
        require(price >= getBuyRichListPrice(index), "Mercury: Price error");

        uint256 protocolFee = price/10;
        uint256 userAmount = price - protocolFee;

        TransferHelper.safeTransferFrom(token, _msgSender(), user, userAmount);
        TransferHelper.safeTransferFrom(token, _msgSender(), address(this), protocolFee);

        richList[index].user = _msgSender();
        richList[index].price = price;
    }

    function addLastBuyList(address sharesSubject) external onlyBiBiDAO {
        lastBuyData.sharesSubject[lastBuyData.index] = sharesSubject;

        if(lastBuyData.index == 19) {
            lastBuyData.index = 0;
        } else {
            lastBuyData.index+=1;
        }
    }

    function getLastBuyList() external view returns(address[] memory shares) {
        shares = new address[](lastBuyData.sharesSubject.length);

        uint8 lastIndex = lastBuyData.index;
        for(uint8 index=uint8(shares.length); index>=1; index--) {
            shares[index-1] = lastBuyData.sharesSubject[lastIndex];
            if(lastIndex ==19) {
                lastIndex = 0;
            } else {
                lastIndex +=1;
            }
        }
    }

    function safeTransferToken(address _token, address to, uint256 value) external onlyOwner {
        TransferHelper.safeTransfer(_token, to, value);
    }

    function safeTransferETH(address to, uint value) external onlyOwner {
        TransferHelper.safeTransferETH(to, value);
    }

}

// File: @uniswap/v3-periphery/contracts/libraries/TransferHelper.sol
// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity >=0.6.0;

import '@openzeppelin/contracts/token/ERC20/IERC20.sol';

library TransferHelper {
    /// @notice Transfers tokens from the targeted address to the given destination
    /// @notice Errors with 'STF' if transfer fails
    /// @param token The contract address of the token to be transferred
    /// @param from The originating address from which the tokens will be transferred
    /// @param to The destination address of the transfer
    /// @param value The amount to be transferred
    function safeTransferFrom(
        address token,
        address from,
        address to,
        uint256 value
    ) internal {
        (bool success, bytes memory data) =
            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');
    }

    /// @notice Transfers tokens from msg.sender to a recipient
    /// @dev Errors with ST if transfer fails
    /// @param token The contract address of the token which will be transferred
    /// @param to The recipient of the transfer
    /// @param value The value of the transfer
    function safeTransfer(
        address token,
        address to,
        uint256 value
    ) internal {
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');
    }

    /// @notice Approves the stipulated contract to spend the given allowance in the given token
    /// @dev Errors with 'SA' if transfer fails
    /// @param token The contract address of the token to be approved
    /// @param to The target of the approval
    /// @param value The amount of the given token the target will be allowed to spend
    function safeApprove(
        address token,
        address to,
        uint256 value
    ) internal {
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');
    }

    /// @notice Transfers ETH to the recipient address
    /// @dev Fails with `STE`
    /// @param to The destination of the transfer
    /// @param value The value to be transferred
    function safeTransferETH(address to, uint256 value) internal {
        (bool success, ) = to.call{value: value}(new bytes(0));
        require(success, 'STE');
    }
}


// File: @openzeppelin/contracts@4.9.0/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts@4.9.0/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

