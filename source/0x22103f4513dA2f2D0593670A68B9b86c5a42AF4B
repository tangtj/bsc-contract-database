// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract AlionDistributor {
    address public USDCAddress; //0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d
    address[] public aportadores;
    uint256[] public aportes;
    uint256 public totalAportes;
    uint256 public maxAportadores = 37;

    mapping(address => mapping(address => address)) public votos;  // antigoEndereco => novoEndereco => aportador
    mapping(address => uint256) public contadorVotos;  // novoEndereco => contador

    constructor(address _USDCAddress) {
        USDCAddress = _USDCAddress;
    }

    function adicionarAportador(address _aportador, uint256 _aporte) external {
        require(aportadores.length < maxAportadores, "Numero maximo de aportadores atingido");
        
        aportadores.push(_aportador);
        aportes.push(_aporte);
        totalAportes += _aporte;
    }

    function distribuir(uint256 valor) external {
        require(valor >= 25, "O valor deve ser maior ou igual a 25");
        require(valor % 25 == 0, "O valor deve ser multiplo de 25");

        IERC20 usdcToken = IERC20(USDCAddress);
        uint256 balance = usdcToken.balanceOf(address(this));

        require(balance >= valor * 1e18, "Saldo insuficiente para distribuicao");//ok

        uint256 valorBase = valor * 1e18;  // Ajuste para 18 casas decimais de USDC

        for (uint i = 0; i < aportadores.length; i++) {
            uint256 valorAportador = (valorBase * aportes[i]) / totalAportes;
            require(usdcToken.transfer(aportadores[i], valorAportador), "Falha na transferencia");
        }
    }

    function votarSubstituicao(address antigoEndereco, address novoEndereco) external {
        require(aportadores[aportadorIndice(msg.sender)] == msg.sender, "Apenas aportadores podem votar");
        require(aportadores[aportadorIndice(antigoEndereco)] == antigoEndereco, "Endereco antigo nao eh um aportador");

        if (votos[antigoEndereco][novoEndereco] == address(0)) {
            votos[antigoEndereco][novoEndereco] = msg.sender;
            contadorVotos[novoEndereco]++;
            
            if (contadorVotos[novoEndereco] >= 25) {
                _substituirAportador(antigoEndereco, novoEndereco);
            }
        }
    }

    function _substituirAportador(address antigoEndereco, address novoEndereco) internal {
        uint256 indice = aportadorIndice(antigoEndereco);
        aportadores[indice] = novoEndereco;
    }

    function aportadorIndice(address aportadorEndereco) internal view returns (uint256) {
        for (uint256 i = 0; i < aportadores.length; i++) {
            if (aportadores[i] == aportadorEndereco) {
                return i;
            }
        }
        revert("Aportador nao encontrado");
    }
}