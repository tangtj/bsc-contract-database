
// File: contracts/OIRContest.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.11;

import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol";
import "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol";

contract OIRContest is Ownable, ReentrancyGuard, VRFConsumerBaseV2 {
    using Strings for uint256;
    using SafeERC20 for IERC20;

    // CHAINLINK
    VRFCoordinatorV2Interface COORDINATOR;
    uint64 s_subscriptionID;

    // see https://docs.chain.link/docs/vrf-contracts/#configurations
    address vrfCoordinator;

    // The gas lane to use, which specifies the maximum gas price to bump to.
    // see https://docs.chain.link/docs/vrf-contracts/#configurations
    bytes32 keyHash;

    uint32 public callbackGasLimit = 200000;
    uint16 requestConfirmations = 3;
    uint32 numWords = 1;
    uint256[] public s_randomWords;
    address s_owner;    
    mapping(uint256 => uint256) public RequestIDToContestID;

    mapping(address => bool) public proxyToApproved; // proxy allowance for interaction with future contract
    address public treasuryAddress; 

    struct Contest {
        uint16 id;                                  // unique ID for this contest
        uint16 entryCount;                          // number of entries
        uint16 maxEntries;                          // max number of entries
        uint16 maxEntriesForThree;                  // precalculated value for inexpensive comparison
        uint16 winningEntry;                       // random winner from Chainlink RNG
        address rewardToken;                        // reward token address; set to 0 for native
        uint256 rewardAmount;                       // token amount sent to the winner
        uint256 price;                              // price in ETH, BNB
        uint256 priceForThree;                      // precalculated price for three
        uint256 payments;                           // total of native payments
        uint256 paymentsDistributed;                // profit distributed
        bool isActive;                              // if contest is accepting entries
        bool refunded;                              // if contest was closed early and refunded
        mapping(uint256 => Entry) Entries;          // list of entries
        mapping(address => uint256) UserEntryCount; // entries count by address
    }

    mapping(uint256 => address) public ContestWinner;

    struct Entry {
        address user;               // user address
        uint256 amount;             // amount paid by user
    }

    uint256 public paymentsWithdrawn;

    struct FeeRecipient {
        address recipient;
        uint256 basisPoints;
    }

    mapping(uint256 => FeeRecipient) public FeeRecipients;
    uint256 public feeRecipientCount;
    uint256 public totalFeeBasisPoints;
    mapping(uint256 => Contest) public Contests;
    uint16 public contestCount;

    constructor(address treasury_, uint64 subscriptionID, address _vrfCoordinator, 
        bytes32 _keyHash) VRFConsumerBaseV2(_vrfCoordinator) 
    {
        treasuryAddress = treasury_;
        //CHAINLINK

        COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);
        s_owner = msg.sender;
        s_subscriptionID = subscriptionID;
        keyHash = _keyHash;
        vrfCoordinator = _vrfCoordinator;
    }

    // ** - CORE - ** //

    // using native
    function buyOne(uint256 contestID) external payable {
        Contest storage contest = Contests[contestID];
        require(contest.isActive && ContestWinner[contestID] == address(0), "NOT_ACTIVE");
        require(contest.maxEntries > contest.entryCount, "EXCEEDS_MAX_ENTRIES");
        require(contest.price == msg.value, "INCORRECT_ETH");
        contest.Entries[contest.entryCount] = Entry({user: _msgSender(), amount: msg.value});
        contest.entryCount++;
        contest.payments += msg.value;
        contest.UserEntryCount[_msgSender()]++;
        if (contest.maxEntries == contest.entryCount) {
            _finishContest(contestID);    
        }
        emit BuyOne(_msgSender(), contestID, msg.value);
    }     

    // using native
    function buyThree(uint256 contestID) external payable {
        Contest storage contest = Contests[contestID];
        require(contest.isActive && ContestWinner[contestID] == address(0), "NOT_ACTIVE");
        require(contest.maxEntriesForThree > contest.entryCount, "EXCEEDS_MAX_ENTRIES");
        require(contest.priceForThree == msg.value, "INCORRECT_ETH");
        contest.Entries[contest.entryCount] = Entry({user: _msgSender(), amount: contest.price});
        contest.entryCount++;
        contest.Entries[contest.entryCount] = Entry({user: _msgSender(), amount: contest.price});
        contest.entryCount++;
        contest.Entries[contest.entryCount] = Entry({user: _msgSender(), amount: contest.price});
        contest.entryCount++;
        contest.payments += msg.value;
        contest.UserEntryCount[_msgSender()] += 3;
        if (contest.maxEntries == contest.entryCount) {
            _finishContest(contestID);
        }
        emit BuyThree(_msgSender(), contestID, msg.value);
    }

    function buy(uint256 contestID, uint256 amount) external payable {
        Contest storage contest = Contests[contestID];
        require(contest.isActive && ContestWinner[contestID] == address(0), "NOT_ACTIVE");
        require(contest.entryCount + amount <= contest.maxEntries, "EXCEEDS_MAX_ENTRIES");
        require(contest.price * amount == msg.value, "INCORRECT_ETH");
        for(uint256 x; x < amount; x++) {
            contest.Entries[contest.entryCount] = Entry({user: _msgSender(), amount: contest.price});
            contest.entryCount++;
        }
        contest.payments += msg.value;
        contest.UserEntryCount[_msgSender()] += amount;
        if (contest.maxEntries == contest.entryCount) {
            _finishContest(contestID);
        }
        emit Buy(_msgSender(), contestID, amount, msg.value);
    }

    function _finishContest(uint256 contestID) private {
        Contests[contestID].isActive = false;
        uint256 s_requestId = COORDINATOR.requestRandomWords(
            keyHash,
            s_subscriptionID,
            requestConfirmations,
            callbackGasLimit,
            numWords
        );     
        RequestIDToContestID[s_requestId] = contestID;
        emit FinishContest(s_requestId, contestID);
    }

    function fulfillRandomWords(uint256 requestID, /* requestId */ uint256[] memory randomWords) internal override {
        Contest storage contest = Contests[RequestIDToContestID[requestID]];
        contest.winningEntry = uint16(randomWords[0] % uint256(contest.entryCount)); // normalize random word to entry count range
        ContestWinner[contest.id] = contest.Entries[contest.winningEntry].user;
        (bool sent, ) = contest.Entries[contest.winningEntry].user.call{value: contest.rewardAmount}("");
        require(sent, "FAILED_SENDING_FUNDS");
        emit FulfillRandomWords(requestID, contest.id, contest.winningEntry);
    }    

    function manualCompleteContest(uint256 contestID) external onlyOwner {
        require(ContestWinner[Contests[contestID].id] == address(0), "WINNER_PICKED");
        _finishContest(contestID);
        emit ManualCompleteContest(_msgSender(), contestID);
    }

    function getContestEntries(uint256 contestID) external view returns(Entry[] memory) {
        Contest storage contest = Contests[contestID];
        Entry[] memory result = new Entry[](contest.entryCount);
        for(uint256 x; x < contest.entryCount; x++) {
            result[x] = contest.Entries[x];
        }
        return result;
    }

    function getUserEntryCount(uint256 contestID, address user) external view returns(uint256) {
        return Contests[contestID].UserEntryCount[user];
    }

    function getUserEntries(uint256 contestID, address user) external view returns(Entry[] memory) {
        Contest storage contest = Contests[contestID];
        Entry[] memory result = new Entry[](Contests[contestID].UserEntryCount[user]);
        uint256 entryCount;
        for(uint256 x; x < contest.entryCount; x++) {
            if (contest.Entries[x].user == user) {
                result[entryCount] = contest.Entries[x];
                entryCount++;
            }
        }
        return result;
    }

    // ** - ADD/EDIT CONTEST - ** //

    // set _rewardToken to address(0) to use native
    function addContest(uint16 _maxEntries, address _rewardToken, uint256 _rewardAmount,
        bool _isActive, uint256 _price) external onlyApproved 
    {
        Contest storage contest = Contests[contestCount];
        contest.id = contestCount;
        contest.maxEntries = _maxEntries;
        contest.maxEntriesForThree = _maxEntries - 2;
        contest.rewardToken = _rewardToken;
        contest.rewardAmount = _rewardAmount;
        contest.isActive = _isActive;
        contest.price = _price;
        contest.priceForThree = _price * 3;
        emit AddContest(_msgSender(), contestCount);      
        contestCount++;
    }

    function cloneContest(uint256 contestID, bool setActive) external onlyApproved 
    {
        Contest storage oldContest = Contests[contestID];
        Contest storage newContest = Contests[contestCount];
        newContest.id = contestCount;
        newContest.maxEntries = oldContest.maxEntries;
        newContest.maxEntriesForThree = oldContest.maxEntriesForThree;
        newContest.rewardToken = oldContest.rewardToken;
        newContest.rewardAmount = oldContest.rewardAmount;
        newContest.isActive = setActive;
        newContest.price = oldContest.price;
        newContest.priceForThree = oldContest.priceForThree;
        emit CloneContest(_msgSender(), contestID, contestCount);      
        contestCount++;
    }    

    function editContest(uint256 _id, uint16 _maxEntries, address _rewardToken, uint256 _rewardAmount,
        bool _isActive, uint256 _price) external onlyApproved {
        require(Contests[_id].entryCount == 0, "ENTRIES_EXIST");
        Contest storage contest = Contests[_id];
        contest.maxEntries = _maxEntries;
        contest.rewardToken = _rewardToken;
        contest.rewardAmount = _rewardAmount;
        contest.isActive = _isActive;
        contest.price = _price;
        emit EditContest(_msgSender(), contestCount);      
    }

    function setContestActive(uint256 _id, bool _isActive) external onlyApproved {
        Contests[_id].isActive = _isActive;
        emit SetContestActive(_msgSender(), _id, _isActive);
    }

    function setPriceForContest(uint256 _id, uint256 _price) external onlyApproved {
        Contests[_id].price = _price;
        Contests[_id].priceForThree = _price * 3;
    }

     // ** - PROXY - ** //

    function singleEntry(uint256 contestID, address receiver) external onlyApproved {
        Contest storage contest = Contests[contestID];
        require(contest.isActive && ContestWinner[contestID] == address(0), "NOT_ACTIVE");
        require(contest.maxEntries > contest.entryCount, "EXCEEDS_MAX_ENTRIES");
        contest.Entries[contest.entryCount] = Entry({user: _msgSender(), amount: 0});
        contest.entryCount++;
        contest.UserEntryCount[receiver]++;
        if (contest.maxEntries == contest.entryCount) {
            _finishContest(contestID); 
        }
        emit SingleEntry(_msgSender(), receiver, contestID);
    }

    function tripleEntry(uint256 contestID, address receiver) external onlyApproved {
        Contest storage contest = Contests[contestID];
        require(contest.isActive && ContestWinner[contestID] == address(0), "NOT_ACTIVE");
        require(contest.maxEntriesForThree > contest.entryCount, "EXCEEDS_MAX_ENTRIES");
        contest.Entries[contest.entryCount] = Entry({user: _msgSender(), amount: 0});
        contest.entryCount++;
        contest.Entries[contest.entryCount] = Entry({user: _msgSender(), amount: 0});
        contest.entryCount++;
        contest.Entries[contest.entryCount] = Entry({user: _msgSender(), amount: 0});
        contest.entryCount++;
        contest.UserEntryCount[receiver] += 3;
        if (contest.maxEntries == contest.entryCount) {
            _finishContest(contestID); 
        }
        emit TripleEntry(_msgSender(), receiver, contestID);
    }

    // ** - ADMIN - ** //

    function endContestWithWinner(uint256 contestID) external onlyApproved {
        require(Contests[contestID].isActive, "NOT_ACTIVE");
        _finishContest(contestID);        
        emit EndContestWithWinner(_msgSender(), contestID);
    }

    function endContestWithoutWinner(uint256 contestID) external onlyApproved {
        Contest storage contest = Contests[contestID];
        require(contest.isActive, "NOT_ACTIVE");
        contest.isActive = false;
        //refund entrants
        for(uint256 x; x < contest.entryCount; x++) {
            Entry memory entry = contest.Entries[x];
            if (entry.amount == 0) continue; //don't refund free entries
            (bool sent, ) = entry.user.call{value: entry.amount}("");
            require(sent, "FAILED_SENDING_FUNDS");
        }
        contest.refunded = true;
        emit EndContestWithoutWinner(_msgSender(), contestID);
    }

    function addFeeRecipient(address recipient, uint256 basisPoints) external onlyOwner {
        feeRecipientCount++;
        FeeRecipients[feeRecipientCount].recipient = recipient;
        FeeRecipients[feeRecipientCount].basisPoints = basisPoints;
        totalFeeBasisPoints += basisPoints;
    }

    function editFeeRecipient(uint256 id, address recipient, uint256 basisPoints) external onlyOwner {
        require(id <= feeRecipientCount, "INVALID_ID");
        totalFeeBasisPoints = totalFeeBasisPoints - FeeRecipients[id].basisPoints + basisPoints;
        FeeRecipients[id].recipient = recipient;
        FeeRecipients[id].basisPoints = basisPoints;
    }

    function distributeETH(uint256 contestID) public nonReentrant {
        require(feeRecipientCount > 0, "RECIPIENTS_NOT_SET");
        Contest storage contest = Contests[contestID];
        require(!contest.isActive, "CONTEST_IS_ACTIVE");
        require(contest.payments - contest.rewardAmount - contest.paymentsDistributed > 0, "NOTHING_TO_DISTRIBUTE");
        uint256 totalAmount = contest.payments - contest.rewardAmount - contest.paymentsDistributed;
        for(uint256 x = 1; x <= feeRecipientCount; x++) {
            FeeRecipient memory feeRecipient = FeeRecipients[x];
            if (feeRecipient.recipient == address(0) || feeRecipient.basisPoints == 0) continue;
            uint256 amount = totalAmount * feeRecipient.basisPoints / totalFeeBasisPoints;
            if (amount == 0) continue;
            (bool sent, ) = feeRecipient.recipient.call{value: amount}("");
            require(sent, "FAILED_SENDING_FUNDS");
        }
        contest.paymentsDistributed += totalAmount;
        emit DistributeETH(_msgSender(), contestID, totalAmount);
    }

    function withdrawETH() external nonReentrant onlyApproved {
        require(treasuryAddress != address(0), "TREASURY_NOT_SET");
        uint256 bal = address(this).balance;
        (bool sent, ) = treasuryAddress.call{value: bal}("");
        require(sent, "FAILED_SENDING_FUNDS");
        emit WithdrawETH(_msgSender(), bal);
    }

    function withdrawTokens(address _token) external nonReentrant onlyApproved {
        require(treasuryAddress != address(0), "TREASURY_NOT_SET");
        IERC20(_token).safeTransfer(
            treasuryAddress,
            IERC20(_token).balanceOf(address(this))
        );
    }

    function flipProxyState(address proxyAddress) public onlyOwner {
        proxyToApproved[proxyAddress] = !proxyToApproved[proxyAddress];
    }

    function isProxyToApproved(address proxyAddress) external view onlyOwner returns(bool) {
        return proxyToApproved[proxyAddress];
    }

    // ** - SETTERS - ** //

    function setTreasuryAddress(address addr) external onlyOwner {
        treasuryAddress = addr;
    }

    function setSubscriptionIO(uint64 _s_subscriptionID) external onlyOwner {
        s_subscriptionID = _s_subscriptionID;
    }

    function setKeyHash(bytes32 value) external onlyOwner {
        keyHash = value;
    }

    function setVrfCoordinator(address value) external onlyOwner {
        vrfCoordinator = value;
        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);
    }

    function setCallbackGasLimit(uint32 amount) external onlyOwner {
        callbackGasLimit = amount;
    }

    modifier onlyProxy() {
        require(proxyToApproved[_msgSender()] == true, "onlyProxy");
        _;
    }    

    modifier onlyApproved() {
        require(proxyToApproved[_msgSender()] == true || _msgSender() == owner(), "onlyProxy");
        _;
    }  

    event BuyOne(address indexed user, uint256 indexed contestID, uint256 indexed amount);
    event BuyThree(address indexed user, uint256 indexed contestID, uint256 indexed amount);
    event AddContest(address indexed user, uint256 indexed id);
    event EditContest(address indexed user, uint256 indexed id);
    event SetContestActive(address indexed user, uint256 indexed id, bool indexed isActive);
    event SetPriceForContest(address indexed user, uint256 indexed contestID, uint256 indexed price);
    event SingleEntry(address indexed user, address indexed recipient, uint256 contestID);
    event TripleEntry(address indexed user, address indexed recipient, uint256 contestID);
    event DistributeETH(address indexed sender, uint256 contestID, uint256 indexed balance);
    event DistributeTokens(address indexed sender, uint256 indexed balance);
    event WithdrawETH(address indexed sender, uint256 indexed balance);
    event DepositBNB(address indexed user, uint256 indexed amount, uint256 indexed depositPerNFT);
    event Claim(address indexed user, uint256 indexed amount);
    event EndContestWithWinner(address indexed user, uint256 indexed contestID);
    event EndContestWithoutWinner(address indexed user, uint256 indexed contestID);
    event FinishContest(uint256 indexed requestID, uint256 indexed contestID);
    event FulfillRandomWords(uint256 indexed requestID, uint256 indexed contestID, uint256 indexed winningEntry);
    event CloneContest(address indexed user, uint256 indexed oldContestID, uint256 indexed newContestID);
    event Buy(address indexed user, uint256 indexed contestID, uint256 indexed amount, uint256 value);
    event ManualCompleteContest(address indexed user, uint256 indexed contestID);
}


// File: @openzeppelin/contracts/utils/Strings.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface VRFCoordinatorV2Interface {
  /**
   * @notice Get configuration relevant for making requests
   * @return minimumRequestConfirmations global min for request confirmations
   * @return maxGasLimit global max for request gas limit
   * @return s_provingKeyHashes list of registered key hashes
   */
  function getRequestConfig()
    external
    view
    returns (
      uint16,
      uint32,
      bytes32[] memory
    );

  /**
   * @notice Request a set of random words.
   * @param keyHash - Corresponds to a particular oracle job which uses
   * that key for generating the VRF proof. Different keyHash's have different gas price
   * ceilings, so you can select a specific one to bound your maximum per request cost.
   * @param subId  - The ID of the VRF subscription. Must be funded
   * with the minimum subscription balance required for the selected keyHash.
   * @param minimumRequestConfirmations - How many blocks you'd like the
   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS
   * for why you may want to request more. The acceptable range is
   * [minimumRequestBlockConfirmations, 200].
   * @param callbackGasLimit - How much gas you'd like to receive in your
   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords
   * may be slightly less than this amount because of gas used calling the function
   * (argument decoding etc.), so you may need to request slightly more than you expect
   * to have inside fulfillRandomWords. The acceptable range is
   * [0, maxGasLimit]
   * @param numWords - The number of uint256 random values you'd like to receive
   * in your fulfillRandomWords callback. Note these numbers are expanded in a
   * secure way by the VRFCoordinator from a single random value supplied by the oracle.
   * @return requestId - A unique identifier of the request. Can be used to match
   * a request to a response in fulfillRandomWords.
   */
  function requestRandomWords(
    bytes32 keyHash,
    uint64 subId,
    uint16 minimumRequestConfirmations,
    uint32 callbackGasLimit,
    uint32 numWords
  ) external returns (uint256 requestId);

  /**
   * @notice Create a VRF subscription.
   * @return subId - A unique subscription id.
   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.
   * @dev Note to fund the subscription, use transferAndCall. For example
   * @dev  LINKTOKEN.transferAndCall(
   * @dev    address(COORDINATOR),
   * @dev    amount,
   * @dev    abi.encode(subId));
   */
  function createSubscription() external returns (uint64 subId);

  /**
   * @notice Get a VRF subscription.
   * @param subId - ID of the subscription
   * @return balance - LINK balance of the subscription in juels.
   * @return reqCount - number of requests for this subscription, determines fee tier.
   * @return owner - owner of the subscription.
   * @return consumers - list of consumer address which are able to use this subscription.
   */
  function getSubscription(uint64 subId)
    external
    view
    returns (
      uint96 balance,
      uint64 reqCount,
      address owner,
      address[] memory consumers
    );

  /**
   * @notice Request subscription owner transfer.
   * @param subId - ID of the subscription
   * @param newOwner - proposed new owner of the subscription
   */
  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;

  /**
   * @notice Request subscription owner transfer.
   * @param subId - ID of the subscription
   * @dev will revert if original owner of subId has
   * not requested that msg.sender become the new owner.
   */
  function acceptSubscriptionOwnerTransfer(uint64 subId) external;

  /**
   * @notice Add a consumer to a VRF subscription.
   * @param subId - ID of the subscription
   * @param consumer - New consumer which can use the subscription
   */
  function addConsumer(uint64 subId, address consumer) external;

  /**
   * @notice Remove a consumer from a VRF subscription.
   * @param subId - ID of the subscription
   * @param consumer - Consumer to remove from the subscription
   */
  function removeConsumer(uint64 subId, address consumer) external;

  /**
   * @notice Cancel a subscription
   * @param subId - ID of the subscription
   * @param to - Where to send the remaining LINK to
   */
  function cancelSubscription(uint64 subId, address to) external;
}


// File: @chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/** ****************************************************************************
 * @notice Interface for contracts using VRF randomness
 * *****************************************************************************
 * @dev PURPOSE
 *
 * @dev Reggie the Random Oracle (not his real job) wants to provide randomness
 * @dev to Vera the verifier in such a way that Vera can be sure he's not
 * @dev making his output up to suit himself. Reggie provides Vera a public key
 * @dev to which he knows the secret key. Each time Vera provides a seed to
 * @dev Reggie, he gives back a value which is computed completely
 * @dev deterministically from the seed and the secret key.
 *
 * @dev Reggie provides a proof by which Vera can verify that the output was
 * @dev correctly computed once Reggie tells it to her, but without that proof,
 * @dev the output is indistinguishable to her from a uniform random sample
 * @dev from the output space.
 *
 * @dev The purpose of this contract is to make it easy for unrelated contracts
 * @dev to talk to Vera the verifier about the work Reggie is doing, to provide
 * @dev simple access to a verifiable source of randomness. It ensures 2 things:
 * @dev 1. The fulfillment came from the VRFCoordinator
 * @dev 2. The consumer contract implements fulfillRandomWords.
 * *****************************************************************************
 * @dev USAGE
 *
 * @dev Calling contracts must inherit from VRFConsumerBase, and can
 * @dev initialize VRFConsumerBase's attributes in their constructor as
 * @dev shown:
 *
 * @dev   contract VRFConsumer {
 * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)
 * @dev       VRFConsumerBase(_vrfCoordinator) public {
 * @dev         <initialization with other arguments goes here>
 * @dev       }
 * @dev   }
 *
 * @dev The oracle will have given you an ID for the VRF keypair they have
 * @dev committed to (let's call it keyHash). Create subscription, fund it
 * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface
 * @dev subscription management functions).
 * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,
 * @dev callbackGasLimit, numWords),
 * @dev see (VRFCoordinatorInterface for a description of the arguments).
 *
 * @dev Once the VRFCoordinator has received and validated the oracle's response
 * @dev to your request, it will call your contract's fulfillRandomWords method.
 *
 * @dev The randomness argument to fulfillRandomWords is a set of random words
 * @dev generated from your requestId and the blockHash of the request.
 *
 * @dev If your contract could have concurrent requests open, you can use the
 * @dev requestId returned from requestRandomWords to track which response is associated
 * @dev with which randomness request.
 * @dev See "SECURITY CONSIDERATIONS" for principles to keep in mind,
 * @dev if your contract could have multiple requests in flight simultaneously.
 *
 * @dev Colliding `requestId`s are cryptographically impossible as long as seeds
 * @dev differ.
 *
 * *****************************************************************************
 * @dev SECURITY CONSIDERATIONS
 *
 * @dev A method with the ability to call your fulfillRandomness method directly
 * @dev could spoof a VRF response with any random value, so it's critical that
 * @dev it cannot be directly called by anything other than this base contract
 * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).
 *
 * @dev For your users to trust that your contract's random behavior is free
 * @dev from malicious interference, it's best if you can write it so that all
 * @dev behaviors implied by a VRF response are executed *during* your
 * @dev fulfillRandomness method. If your contract must store the response (or
 * @dev anything derived from it) and use it later, you must ensure that any
 * @dev user-significant behavior which depends on that stored value cannot be
 * @dev manipulated by a subsequent VRF request.
 *
 * @dev Similarly, both miners and the VRF oracle itself have some influence
 * @dev over the order in which VRF responses appear on the blockchain, so if
 * @dev your contract could have multiple VRF requests in flight simultaneously,
 * @dev you must ensure that the order in which the VRF responses arrive cannot
 * @dev be used to manipulate your contract's user-significant behavior.
 *
 * @dev Since the block hash of the block which contains the requestRandomness
 * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful
 * @dev miner could, in principle, fork the blockchain to evict the block
 * @dev containing the request, forcing the request to be included in a
 * @dev different block with a different hash, and therefore a different input
 * @dev to the VRF. However, such an attack would incur a substantial economic
 * @dev cost. This cost scales with the number of blocks the VRF oracle waits
 * @dev until it calls responds to a request. It is for this reason that
 * @dev that you can signal to an oracle you'd like them to wait longer before
 * @dev responding to the request (however this is not enforced in the contract
 * @dev and so remains effective only in the case of unmodified oracle software).
 */
abstract contract VRFConsumerBaseV2 {
  error OnlyCoordinatorCanFulfill(address have, address want);
  address private immutable vrfCoordinator;

  /**
   * @param _vrfCoordinator address of VRFCoordinator contract
   */
  constructor(address _vrfCoordinator) {
    vrfCoordinator = _vrfCoordinator;
  }

  /**
   * @notice fulfillRandomness handles the VRF response. Your contract must
   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
   * @notice principles to keep in mind when implementing your fulfillRandomness
   * @notice method.
   *
   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this
   * @dev signature, and will call it once it has verified the proof
   * @dev associated with the randomness. (It is triggered via a call to
   * @dev rawFulfillRandomness, below.)
   *
   * @param requestId The Id initially returned by requestRandomness
   * @param randomWords the VRF output expanded to the requested number of words
   */
  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;

  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
  // the origin of the call
  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {
    if (msg.sender != vrfCoordinator) {
      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);
    }
    fulfillRandomWords(requestId, randomWords);
  }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

