
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/interfaces/IToken.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

interface IToken {
    function rewards(address account, uint256 amount) external;

    function transfer(address to, uint256 amount) external returns (bool);
}

// File: contracts/TeamLock.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "./interfaces/IToken.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract TeamLock is Ownable {
   
    address public tokenAddress;
    address public multSigAddress;
    uint256 public teamTotal = 95000000 * 10 ** 18; // 9.5%
    uint256 public adviserTotal = 10000000 * 10 ** 18; // 1%
    uint256 public totalSupply;
    uint256 public monBlockNum = 28800 * 30;

    struct UserLock {
        uint256 lockTotal;
        uint256 claimed;
        uint256 perReleaseMonth;
        uint256 nextReleaseBlock;
    }

    mapping(address => UserLock) public userLocks;

    modifier onlyMultSig() {
        require(multSigAddress == msg.sender || msg.sender == owner(), "Not permisson");
        _;
    }

    constructor(address _tokenAddress, address _multSigAddress) public {
        tokenAddress = _tokenAddress;
        multSigAddress = _multSigAddress;
    }

    function claim() public {
        UserLock storage userLock = userLocks[msg.sender];
        require(userLock.lockTotal > 0, "User not exists");
        require(userLock.claimed < userLock.lockTotal, "Lock release finish");
        require(block.number > userLock.nextReleaseBlock, "Lock time err");

        uint256 diffBlock = block.number - userLock.nextReleaseBlock;
        uint256 month = diffBlock / monBlockNum + 1;
        uint256 release = month * userLock.perReleaseMonth;
        if(userLock.claimed + release > userLock.lockTotal) {
            release = userLock.lockTotal - userLock.claimed;
        }

        userLock.claimed += release;
        userLock.nextReleaseBlock = block.number + monBlockNum - diffBlock % monBlockNum;

        totalSupply += release;
        require(totalSupply <= teamTotal + adviserTotal, "totalSupply must <= teamTotal + adviserTotal");

        IToken(tokenAddress).rewards(address(this), release);
        IToken(tokenAddress).transfer(msg.sender, release);
    }

    function addTeamLock(address account, uint256 ratio) public onlyMultSig {
        UserLock storage userLock = userLocks[account];
        userLock.lockTotal = teamTotal * ratio / 10000;
        userLock.nextReleaseBlock = block.number + 12 * monBlockNum;
        userLock.perReleaseMonth = userLock.lockTotal / 20;
    }

    function changeAccount(address oldAddr, address newAddr) public onlyMultSig {
        UserLock storage userLock = userLocks[oldAddr];
        userLocks[newAddr] = userLock;
        delete userLocks[oldAddr];
    }

    function addAdviserLock(address account, uint256 ratio) public onlyMultSig {
        UserLock storage userLock = userLocks[account];
        userLock.lockTotal = adviserTotal * ratio / 10000;
        userLock.nextReleaseBlock = block.number + 12 * monBlockNum;
        userLock.perReleaseMonth = userLock.lockTotal / 20;
    }

    function penddingRelease(address account) public view returns (uint256) {
        UserLock memory userLock = userLocks[account];
        if(block.number < userLock.nextReleaseBlock) {
            return 0;
        }

        if(userLock.claimed >= userLock.lockTotal) {
            return 0;
        }

        uint256 diffBlock = block.number - userLock.nextReleaseBlock;
        uint256 month = diffBlock / monBlockNum + 1;

        uint256 release = month * userLock.perReleaseMonth;
        if(userLock.claimed + release > userLock.lockTotal) {
            release = userLock.lockTotal - userLock.claimed;
        }

        return release;
    }
}

